console.log('[Z3DPortable] Script loading started');
"use strict";
var Z3DPortable = (() => {
  console.log('[Z3DPortable] Inside IIFE');
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // packages/z3d-object/src/editor/index.ts
  var editor_exports = {};
  __export(editor_exports, {
    PropertyAdapter: () => PropertyAdapter,
    Z3DObjectEditor: () => Z3DObjectEditor,
    default: () => editor_default
  });

  // packages/z3d-object/src/editor/portable-interface.ts
  var PropertyAdapter = class {
    constructor(host) {
      this.host = host;
      this.mapping = host.propertyMapping || {};
    }
    // Update animation state in z3d-json
    updateAnimationState(animationState) {
      const config = this.getZ3DConfig();
      if (!config.object.animation) {
        config.object.animation = {
          currentAnimation: null,
          currentTime: 0,
          isPlaying: false,
          isLooping: true,
          playbackSpeed: 1
        };
      }
      if (animationState.currentAnimation !== void 0) {
        config.object.animation.currentAnimation = animationState.currentAnimation;
      }
      if (animationState.currentTime !== void 0) {
        config.object.animation.currentTime = animationState.currentTime;
      }
      if (animationState.isPlaying !== void 0) {
        config.object.animation.isPlaying = animationState.isPlaying;
      }
      if (animationState.isLooping !== void 0) {
        config.object.animation.isLooping = animationState.isLooping;
      }
      if (animationState.playbackSpeed !== void 0) {
        config.object.animation.playbackSpeed = animationState.playbackSpeed;
      }
      this.setZ3DConfig(config);
    }
    // Update node visibility in z3d-json
    updateNodeVisibility(nodeName, visible) {
      const config = this.getZ3DConfig();
      if (!config.object.nodeVisibility) {
        config.object.nodeVisibility = {};
      }
      config.object.nodeVisibility[nodeName] = visible;
      this.setZ3DConfig(config);
    }
    // Update skinned mesh data in z3d-json
    updateSkinnedMesh(skinnedMeshData) {
      const config = this.getZ3DConfig();
      if (skinnedMeshData) {
        config.object.skinnedMesh = {
          timestamp: skinnedMeshData.timestamp || performance.now(),
          verticesCompressed: skinnedMeshData.verticesCompressed,
          meshVisibility: skinnedMeshData.visibility || {},
          // Store mesh visibility map
          updateFrequency: skinnedMeshData.updateFrequency || 30
        };
        console.log(
          "[PropertyAdapter] Updated skinned mesh in z3d-json, compressed length:",
          skinnedMeshData.verticesCompressed?.length || 0,
          "visibility map:",
          skinnedMeshData.visibility
        );
      } else {
        delete config.object.skinnedMesh;
        console.log("[PropertyAdapter] Cleared skinned mesh data from z3d-json");
      }
      this.setZ3DConfig(config);
    }
    // Get animation state from z3d-json
    getAnimationState() {
      const config = this.getZ3DConfig();
      return config.object.animation || {
        currentAnimation: null,
        currentTime: 0,
        isPlaying: false,
        isLooping: true,
        playbackSpeed: 1
      };
    }
    // Get node visibility from z3d-json
    getNodeVisibility() {
      const config = this.getZ3DConfig();
      return config.object.nodeVisibility || {};
    }
    getZ3DConfig() {
      try {
        const jsonPropName = this.mapping.z3dJson || "z3d-json";
        const jsonStr = this.host.getPropertyValue(jsonPropName);
        if (!jsonStr)
          return this.getDefaultZ3DConfig();
        const config = JSON.parse(jsonStr);
        if (!config.object)
          config.object = {};
        if (!config.object.transform)
          config.object.transform = {};
        if (!config.object.transform.delta) {
          config.object.transform.delta = {
            position: { x: 0, y: 0, z: 0 },
            rotation: { x: 0, y: 0, z: 0 },
            scale: { x: 1, y: 1, z: 1 }
          };
        }
        return config;
      } catch (error) {
        console.warn("[PropertyAdapter] Failed to parse z3d-json, using defaults:", error);
        return this.getDefaultZ3DConfig();
      }
    }
    setZ3DConfig(config) {
      const jsonPropName = this.mapping.z3dJson || "z3d-json";
      const jsonStr = JSON.stringify(config, null, 2);
      this.host.setPropertyValue(jsonPropName, jsonStr);
    }
    getDefaultZ3DConfig() {
      return {
        object: {
          transform: {
            delta: {
              position: { x: 0, y: 0, z: 0 },
              rotation: { x: 0, y: 0, z: 0 },
              scale: { x: 1, y: 1, z: 1 }
            }
          },
          animation: {
            currentAnimation: null,
            currentTime: 0,
            isPlaying: false,
            isLooping: true,
            playbackSpeed: 1
          },
          nodeVisibility: {}
        }
      };
    }
    getValue(key) {
      if (key === "positionX") {
        return this.host.inst.GetX ? this.host.inst.GetX() : 0;
      }
      if (key === "positionY") {
        return this.host.inst.GetY ? this.host.inst.GetY() : 0;
      }
      if (key === "positionZ") {
        return this.host.inst.GetZElevation ? this.host.inst.GetZElevation() : 0;
      }
      if (key.startsWith("delta")) {
        const config = this.getZ3DConfig();
        const delta = config.object.transform.delta;
        switch (key) {
          case "deltaPositionX":
            return delta.position.x;
          case "deltaPositionY":
            return delta.position.y;
          case "deltaPositionZ":
            return delta.position.z;
          case "deltaRotationX":
            return delta.rotation.x;
          case "deltaRotationY":
            return delta.rotation.y;
          case "deltaRotationZ":
            return delta.rotation.z;
          case "deltaScaleX":
            return delta.scale.x;
          case "deltaScaleY":
            return delta.scale.y;
          case "deltaScaleZ":
            return delta.scale.z;
          default:
            return 0;
        }
      }
      const propName = this.mapping[key];
      if (!propName) {
        console.warn(`[PropertyAdapter] No mapping for key: ${key}`);
        return void 0;
      }
      return this.host.getPropertyValue(propName);
    }
    setValue(key, value) {
      if (key === "positionX") {
        if (this.host.inst.SetX)
          this.host.inst.SetX(value);
        return;
      }
      if (key === "positionY") {
        if (this.host.inst.SetY)
          this.host.inst.SetY(value);
        return;
      }
      if (key === "positionZ") {
        if (this.host.inst.SetZElevation)
          this.host.inst.SetZElevation(value);
        return;
      }
      if (key.startsWith("delta")) {
        const config = this.getZ3DConfig();
        const delta = config.object.transform.delta;
        switch (key) {
          case "deltaPositionX":
            delta.position.x = value;
            break;
          case "deltaPositionY":
            delta.position.y = value;
            break;
          case "deltaPositionZ":
            delta.position.z = value;
            break;
          case "deltaRotationX":
            delta.rotation.x = value;
            break;
          case "deltaRotationY":
            delta.rotation.y = value;
            break;
          case "deltaRotationZ":
            delta.rotation.z = value;
            break;
          case "deltaScaleX":
            delta.scale.x = value;
            break;
          case "deltaScaleY":
            delta.scale.y = value;
            break;
          case "deltaScaleZ":
            delta.scale.z = value;
            break;
          default:
            return;
        }
        this.setZ3DConfig(config);
        return;
      }
      const propName = this.mapping[key];
      if (!propName) {
        console.warn(`[PropertyAdapter] No mapping for key: ${key}`);
        return;
      }
      this.host.setPropertyValue(propName, value);
    }
    getState() {
      const config = this.getZ3DConfig();
      return {
        transform: {
          position: {
            x: this.getValue("positionX"),
            y: this.getValue("positionY"),
            z: this.getValue("positionZ")
          },
          rotation: {
            x: this.getValue("rotationX") || 0,
            y: this.getValue("rotationY") || 0,
            z: this.getValue("rotationZ") || 0
          },
          scale: {
            x: this.getValue("scaleX") || 1,
            y: this.getValue("scaleY") || 1,
            z: this.getValue("scaleZ") || 1
          },
          uniformScale: this.getValue("uniformScale") || 1,
          unitScale: this.getValue("unitScale") || 64,
          rotationOrder: this.getValue("rotationOrder") || "ZXY"
        },
        deltaTransform: {
          position: {
            x: config.object.transform.delta.position.x || 0,
            y: config.object.transform.delta.position.y || 0,
            z: config.object.transform.delta.position.z || 0
          },
          rotation: {
            x: config.object.transform.delta.rotation.x || 0,
            y: config.object.transform.delta.rotation.y || 0,
            z: config.object.transform.delta.rotation.z || 0
          },
          scale: {
            x: config.object.transform.delta.scale.x || 1,
            y: config.object.transform.delta.scale.y || 1,
            z: config.object.transform.delta.scale.z || 1
          }
        },
        wireframe: this.getValue("wireframe") || false,
        modelPath: this.getValue("modelPath") || "",
        // Include animation state from z3d-json
        animation: config.object.animation || {
          currentAnimation: null,
          currentTime: 0,
          isPlaying: false,
          isLooping: true,
          playbackSpeed: 1
        },
        nodeVisibility: config.object.nodeVisibility || {}
      };
    }
    applyState(state) {
      if (state.transform) {
        const t = state.transform;
        if (t.position) {
          if (typeof t.position.x === "number")
            this.setValue("positionX", t.position.x);
          if (typeof t.position.y === "number")
            this.setValue("positionY", t.position.y);
          if (typeof t.position.z === "number")
            this.setValue("positionZ", t.position.z);
        }
        if (t.rotation) {
          if (typeof t.rotation.x === "number")
            this.setValue("rotationX", t.rotation.x);
          if (typeof t.rotation.y === "number")
            this.setValue("rotationY", t.rotation.y);
          if (typeof t.rotation.z === "number")
            this.setValue("rotationZ", t.rotation.z);
        }
        if (t.scale) {
          if (typeof t.scale.x === "number")
            this.setValue("scaleX", t.scale.x);
          if (typeof t.scale.y === "number")
            this.setValue("scaleY", t.scale.y);
          if (typeof t.scale.z === "number")
            this.setValue("scaleZ", t.scale.z);
        }
        if (typeof t.uniformScale === "number")
          this.setValue("uniformScale", t.uniformScale);
        if (typeof t.unitScale === "number")
          this.setValue("unitScale", t.unitScale);
        if (t.rotationOrder)
          this.setValue("rotationOrder", t.rotationOrder);
      }
      if (state.deltaTransform) {
        const config = this.getZ3DConfig();
        if (state.deltaTransform.position) {
          config.object.transform.delta.position = {
            x: state.deltaTransform.position.x || 0,
            y: state.deltaTransform.position.y || 0,
            z: state.deltaTransform.position.z || 0
          };
        }
        if (state.deltaTransform.rotation) {
          config.object.transform.delta.rotation = {
            x: state.deltaTransform.rotation.x || 0,
            y: state.deltaTransform.rotation.y || 0,
            z: state.deltaTransform.rotation.z || 0
          };
        }
        if (state.deltaTransform.scale) {
          config.object.transform.delta.scale = {
            x: state.deltaTransform.scale.x || 1,
            y: state.deltaTransform.scale.y || 1,
            z: state.deltaTransform.scale.z || 1
          };
        }
        this.setZ3DConfig(config);
      }
      if (state.wireframe !== void 0)
        this.setValue("wireframe", state.wireframe);
      if (state.modelPath !== void 0)
        this.setValue("modelPath", state.modelPath);
    }
  };

  // packages/z3d-object/src/editor/assets/three-js-source.ts
  var THREEJS_BASE64 = "";
  var GLTF_LOADER_BASE64 = "";
  var ORBIT_CONTROLS_BASE64 = "";
  var ThreeJSLoader = class {
    static async loadThreeJS() {
      if (this.threeJsSource) {
        return this.threeJsSource;
      }
      console.log("[ThreeJS Loader] Using embedded base64 version");
      this.threeJsSource = this.getEmbeddedThreeJS();
      return this.threeJsSource;
    }
    static async loadGLTFLoader() {
      if (this.gltfLoaderSource) {
        return this.gltfLoaderSource;
      }
      console.log("[ThreeJS Loader] Using embedded GLTF Loader");
      this.gltfLoaderSource = this.getEmbeddedGLTFLoader();
      return this.gltfLoaderSource;
    }
    static async loadOrbitControls() {
      if (this.orbitControlsSource) {
        return this.orbitControlsSource;
      }
      console.log("[ThreeJS Loader] Using embedded OrbitControls");
      this.orbitControlsSource = this.getEmbeddedOrbitControls();
      return this.orbitControlsSource;
    }
    static getEmbeddedThreeJS() {
      try {
        return atob(THREEJS_BASE64);
      } catch (error) {
        console.error("[ThreeJS Loader] Failed to decode Three.js base64:", error);
        throw new Error("Failed to load Three.js");
      }
    }
    static getEmbeddedGLTFLoader() {
      try {
        return atob(GLTF_LOADER_BASE64);
      } catch (error) {
        console.error("[ThreeJS Loader] Failed to decode GLTF Loader base64:", error);
        throw new Error("Failed to load GLTF Loader");
      }
    }
    static getEmbeddedOrbitControls() {
      try {
        return atob(ORBIT_CONTROLS_BASE64);
      } catch (error) {
        console.error("[ThreeJS Loader] Failed to decode OrbitControls base64:", error);
        throw new Error("Failed to load OrbitControls");
      }
    }
  };
  ThreeJSLoader.threeJsSource = null;
  ThreeJSLoader.gltfLoaderSource = null;
  ThreeJSLoader.orbitControlsSource = null;

  // packages/z3d-object/src/editor/templates/builder.ts
  var EMBEDDED_TEMPLATE_ASSETS = {
    "html": {
      "main": '<!DOCTYPE html>\r\n<html lang="en">\r\n<head>\r\n    <meta charset="UTF-8">\r\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\r\n    <title>{{TITLE}}</title>\r\n    <style>\r\n        /* Styles will be injected here by template-builder */\r\n        {{STYLES}}\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class="z3d-editor" id="z3d-editor">\r\n        <!-- Top Bar with Help Menu -->\r\n        <div class="topbar" id="topbar">\r\n            <div class="topbar-left">\r\n                <div class="logo">Z3D Object Editor</div>\r\n            </div>\r\n            <div class="topbar-right">\r\n                <a href="https://discord.gg/7R8ctHyJtw" target="_blank" class="discord-link">\r\n                    <svg class="discord-icon" width="18" height="18" viewBox="0 0 24 24" fill="currentColor">\r\n                        <path d="M20.317 4.37a19.791 19.791 0 0 0-4.885-1.515a.074.074 0 0 0-.079.037c-.21.375-.444.864-.608 1.25a18.27 18.27 0 0 0-5.487 0a12.64 12.64 0 0 0-.617-1.25a.077.077 0 0 0-.079-.037A19.736 19.736 0 0 0 3.677 4.37a.07.07 0 0 0-.032.027C.533 9.046-.32 13.58.099 18.057a.082.082 0 0 0 .031.057a19.9 19.9 0 0 0 5.993 3.03a.078.078 0 0 0 .084-.028a14.09 14.09 0 0 0 1.226-1.994a.076.076 0 0 0-.041-.106a13.107 13.107 0 0 1-1.872-.892a.077.077 0 0 1-.008-.128a10.2 10.2 0 0 0 .372-.292a.074.074 0 0 1 .077-.01c3.928 1.793 8.18 1.793 12.062 0a.074.074 0 0 1 .078.01c.12.098.246.198.373.292a.077.077 0 0 1-.006.127a12.299 12.299 0 0 1-1.873.892a.077.077 0 0 0-.041.107c.36.698.772 1.362 1.225 1.993a.076.076 0 0 0 .084.028a19.839 19.839 0 0 0 6.002-3.03a.077.077 0 0 0 .032-.054c.5-5.177-.838-9.674-3.549-13.66a.061.061 0 0 0-.031-.03zM8.02 15.33c-1.183 0-2.157-1.085-2.157-2.419c0-1.333.956-2.419 2.157-2.419c1.21 0 2.176 1.096 2.157 2.42c0 1.333-.956 2.418-2.157 2.418zm7.975 0c-1.183 0-2.157-1.085-2.157-2.419c0-1.333.955-2.419 2.157-2.419c1.21 0 2.176 1.096 2.157 2.42c0 1.333-.946 2.418-2.157 2.418z"/>\r\n                    </svg>\r\n                    Discord Support\r\n                </a>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Main Content Area -->\r\n        <div class="main-content">\r\n            <!-- Left Region -->\r\n            <div class="left-region">\r\n                <!-- Viewport Area - SIMPLIFIED STRUCTURE -->\r\n                <div class="viewport-area" id="viewport-area">\r\n                    <!-- Canvas is now direct child -->\r\n                    <canvas id="three-canvas" class="three-canvas"></canvas>\r\n                    \r\n                    <!-- All overlays as siblings to canvas -->\r\n                    <div class="scene-topbar">\r\n                        <!-- Content will be populated by SceneTopbarControls -->\r\n                    </div>\r\n                    \r\n                    <!-- Viewport Gizmo (Top Right) -->\r\n                    <div class="viewport-gizmo" id="viewport-gizmo">\r\n                        <!-- three-viewport-gizmo will be inserted here -->\r\n                    </div>\r\n                    \r\n                    <!-- Stats Overlay (Top Left) -->\r\n                    <div class="stats-overlay" id="stats-overlay">\r\n                        <div class="stats-content">\r\n                            <div>Vertices: <span id="vertex-count">0</span></div>\r\n                            <div>Triangles: <span id="triangle-count">0</span></div>\r\n                            <div>FPS: <span id="fps-count">60</span></div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <!-- Loading Indicator -->\r\n                    <div id="loading-indicator" class="loading-indicator">\r\n                        <div class="loading-spinner"></div>\r\n                        <div class="loading-text">\u{1F680} Loading 3D Scene...</div>\r\n                    </div>\r\n                </div>\r\n                \r\n                <!-- Left Horizontal Resizer (KEPT) -->\r\n                <div class="left-horizontal-resizer" id="left-horizontal-resizer"></div>\r\n                \r\n                <!-- Bottom Viewer Area -->\r\n                <div class="viewer-area">\r\n                    <div class="viewer-topbar">\r\n                        <div class="viewer-controls">\r\n                            <select id="viewer-type" class="viewer-select">\r\n                                <option value="texture">Texture Viewer</option>\r\n                                <option value="animation">Animation Viewer</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div class="viewer-content" id="viewer-content">\r\n                        <!-- Texture/Animation viewer will be populated here -->\r\n                        <div class="placeholder">Select viewer type above</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n            <!-- Vertical Resizer -->\r\n            <div class="vertical-resizer" id="vertical-resizer"></div>\r\n            \r\n            <!-- Right Region -->\r\n            <div class="right-region">\r\n                <!-- Info Section -->\r\n                <div class="info-section">\r\n                    <h3>Z3D Object Editor</h3>\r\n                    <div class="instance-info" id="instance-info">Instance Loading...</div>\r\n                    <div class="version-info">Plugin v1.0.0</div>\r\n                </div>\r\n                \r\n                <!-- Node Tree -->\r\n                <div class="node-tree-section">\r\n                    <h4>GLB Structure</h4>\r\n                    <div class="node-tree" id="node-tree">\r\n                        <div class="placeholder">Loading model structure...</div>\r\n                    </div>\r\n                </div>\r\n                \r\n                <!-- Horizontal Resizer -->\r\n                <div class="horizontal-resizer" id="horizontal-resizer"></div>\r\n                \r\n                <!-- Side Tabs Panel -->\r\n                <div class="side-tabs-section">\r\n                    <div class="tab-bar" aria-label="Editor panels">\r\n                        <button class="tab-btn active" data-tab="object" aria-label="Object" title="Object">\r\n                            <span class="icon">\u{1F9CA}</span>\r\n                        </button>\r\n                        <button class="tab-btn" data-tab="viewport" aria-label="Viewport" title="Viewport">\r\n                            <span class="icon">\u{1F441}\uFE0F</span>\r\n                        </button>\r\n                    </div>\r\n                    <div class="tab-content">\r\n                        <div id="object-tab" class="tab-panel active" aria-labelledby="object">\r\n                            <div id="object-controls"></div>\r\n                        </div>\r\n                        <div id="viewport-tab" class="tab-panel" aria-labelledby="viewport">\r\n                            <div id="viewport-controls"></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                \r\n                <!-- Status -->\r\n                <div class="status-bar">\r\n                    <div id="status-message">Ready</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- Hidden Config Data -->\r\n    <script type="application/json" id="build-config">{{CONFIG}}<\/script>\r\n    <script type="application/json" id="editor-config">{{EDITOR_CONFIG}}<\/script>\r\n    \r\n    <!-- Main Script will be injected as separate script tags -->\r\n</body>\r\n</html>'
    },
    "styles": {
      "base": "/* =============================================================================\r\n   TEMPLATE CSS FILES - Clean, Organized Styles\r\n   ============================================================================= */\r\n\r\n/* FILE: editor/z3d-object-editor/templates/styles/base.css */\r\n/* Base styles and CSS variables */\r\n* {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\n:root {\r\n    /* Colors */\r\n    --bg-primary: #1e1e1e;\r\n    --bg-secondary: #2a2a2a;\r\n    --bg-tertiary: #252525;\r\n    --bg-elevated: #323232;\r\n    --border-color: #3e3e3e;\r\n    --border-light: #4a4a4a;\r\n    \r\n    /* Text */\r\n    --text-primary: #ffffff;\r\n    --text-secondary: #cccccc;\r\n    --text-muted: #888888;\r\n    --text-disabled: #555555;\r\n    \r\n    /* Accent Colors */\r\n    --accent-color: #4CAF50;\r\n    --accent-hover: #5CBF60;\r\n    --error-color: #f44336;\r\n    --warning-color: #ff9800;\r\n    --info-color: #007acc;\r\n    \r\n    /* Shadows */\r\n    --shadow-small: 0 2px 4px rgba(0, 0, 0, 0.3);\r\n    --shadow-medium: 0 4px 8px rgba(0, 0, 0, 0.4);\r\n    --shadow-large: 0 8px 16px rgba(0, 0, 0, 0.5);\r\n    \r\n    /* Transitions */\r\n    --transition-fast: 0.15s ease;\r\n    --transition-normal: 0.25s ease;\r\n    --transition-slow: 0.4s ease;\r\n    \r\n    /* Spacing */\r\n    --spacing-xs: 4px;\r\n    --spacing-sm: 8px;\r\n    --spacing-md: 16px;\r\n    --spacing-lg: 24px;\r\n    --spacing-xl: 32px;\r\n    \r\n    /* Border Radius */\r\n    --radius-sm: 4px;\r\n    --radius-md: 8px;\r\n    --radius-lg: 12px;\r\n}\r\n\r\nbody {\r\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\r\n    background: var(--bg-primary);\r\n    color: var(--text-primary);\r\n    height: 100vh;\r\n    overflow: hidden;\r\n    font-size: 13px;\r\n    line-height: 1.4;\r\n}\r\n\r\n/* Selection */\r\n::selection {\r\n    background: var(--accent-color);\r\n    color: white;\r\n}\r\n\r\n/* Scrollbars */\r\n::-webkit-scrollbar {\r\n    width: 8px;\r\n    height: 8px;\r\n}\r\n\r\n::-webkit-scrollbar-track {\r\n    background: var(--bg-secondary);\r\n}\r\n\r\n::-webkit-scrollbar-thumb {\r\n    background: var(--border-color);\r\n    border-radius: var(--radius-sm);\r\n}\r\n\r\n::-webkit-scrollbar-thumb:hover {\r\n    background: var(--border-light);\r\n}\r\n\r\n/* Focus styles */\r\nbutton:focus,\r\ninput:focus,\r\nselect:focus {\r\n    outline: 2px solid var(--accent-color);\r\n    outline-offset: 2px;\r\n}",
      "components": `/* FILE: editor/z3d-object-editor/templates/styles/components.css */\r
/* Reusable component styles */\r
\r
/* Buttons */\r
.btn {\r
    display: inline-flex;\r
    align-items: center;\r
    justify-content: center;\r
    padding: var(--spacing-sm) var(--spacing-md);\r
    border: 1px solid var(--border-color);\r
    border-radius: var(--radius-sm);\r
    background: var(--bg-tertiary);\r
    color: var(--text-secondary);\r
    font-size: 12px;\r
    font-weight: 500;\r
    cursor: pointer;\r
    transition: all var(--transition-fast);\r
    user-select: none;\r
\r
    /* Fixed vendor prefixes for appearance */\r
    -webkit-appearance: none;\r
    -moz-appearance: none;\r
    appearance: none;\r
}\r
\r
.btn:hover {\r
    background: var(--bg-elevated);\r
    border-color: var(--border-light);\r
    transform: translateY(-1px);\r
}\r
\r
.btn:active {\r
    transform: translateY(0);\r
}\r
\r
.btn-primary {\r
    background: var(--accent-color);\r
    color: white;\r
    border-color: var(--accent-color);\r
}\r
\r
.btn-primary:hover {\r
    background: var(--accent-hover);\r
    border-color: var(--accent-hover);\r
}\r
\r
.btn-secondary {\r
    background: var(--bg-secondary);\r
    border-color: var(--border-color);\r
}\r
\r
.btn-sm {\r
    padding: var(--spacing-xs) var(--spacing-sm);\r
    font-size: 11px;\r
    min-width: 28px;\r
    height: 28px;\r
}\r
\r
.btn-danger {\r
    background: var(--error-color);\r
    color: white;\r
    border-color: var(--error-color);\r
}\r
\r
/* Status Messages */\r
.status-message {\r
    margin-bottom: var(--spacing-lg);\r
    padding: var(--spacing-md);\r
    border-radius: var(--radius-md);\r
    text-align: center;\r
    font-size: 13px;\r
    border: 1px solid transparent;\r
    animation: fadeIn 0.3s ease;\r
}\r
\r
@keyframes fadeIn {\r
    from { opacity: 0; transform: translateY(-10px); }\r
    to { opacity: 1; transform: translateY(0); }\r
}\r
\r
.status-message.loading {\r
    background: rgba(0, 122, 204, 0.1);\r
    border-color: rgba(0, 122, 204, 0.3);\r
    color: var(--info-color);\r
}\r
\r
.status-message.success {\r
    background: rgba(76, 175, 80, 0.1);\r
    border-color: rgba(76, 175, 80, 0.3);\r
    color: var(--accent-color);\r
}\r
\r
.status-message.error {\r
    background: rgba(244, 67, 54, 0.1);\r
    border-color: rgba(244, 67, 54, 0.3);\r
    color: var(--error-color);\r
}\r
\r
.status-message.warning {\r
    background: rgba(255, 152, 0, 0.1);\r
    border-color: rgba(255, 152, 0, 0.3);\r
    color: var(--warning-color);\r
}\r
\r
/* Panel Sections */\r
.panel-section {\r
    margin-bottom: var(--spacing-lg);\r
    padding: var(--spacing-lg);\r
    background: var(--bg-tertiary);\r
    border-radius: var(--radius-md);\r
    border: 1px solid var(--border-color);\r
    transition: border-color var(--transition-fast);\r
}\r
\r
.panel-section:hover {\r
    border-color: var(--border-light);\r
}\r
\r
.panel-section h3 {\r
    color: var(--accent-color);\r
    margin-bottom: var(--spacing-md);\r
    font-size: 14px;\r
    font-weight: 600;\r
    display: flex;\r
    align-items: center;\r
    gap: var(--spacing-sm);\r
}\r
\r
.panel-section.collapsed .panel-content {\r
    display: none;\r
}\r
\r
.panel-section.collapsed h3::after {\r
    content: ' (collapsed)';\r
    color: var(--text-muted);\r
    font-weight: normal;\r
    font-size: 11px;\r
}\r
\r
/* Form Controls */\r
.control-row {\r
    margin-bottom: var(--spacing-md);\r
}\r
\r
.control-row:last-child {\r
    margin-bottom: 0;\r
}\r
\r
.control-row label {\r
    display: flex;\r
    justify-content: space-between;\r
    align-items: center;\r
    color: var(--text-secondary);\r
    margin-bottom: var(--spacing-sm);\r
    font-size: 12px;\r
    font-weight: 500;\r
}\r
\r
.control-value {\r
    color: var(--accent-color);\r
    font-weight: 600;\r
    font-family: 'SF Mono', Monaco, 'Cascadia Code', monospace;\r
}\r
\r
.control-row input[type="range"] {\r
    width: 100%;\r
    height: 4px;\r
    border-radius: 2px;\r
    background: var(--border-color);\r
    outline: none;\r
    cursor: pointer;\r
    \r
    /* Fixed vendor prefixes for appearance */\r
    -webkit-appearance: none;\r
    -moz-appearance: none;\r
    appearance: none;\r
}\r
\r
.control-row input[type="range"]::-webkit-slider-thumb {\r
    -webkit-appearance: none;\r
    appearance: none;\r
    width: 16px;\r
    height: 16px;\r
    border-radius: 50%;\r
    background: var(--accent-color);\r
    cursor: pointer;\r
    box-shadow: var(--shadow-small);\r
    transition: all var(--transition-fast);\r
}\r
\r
.control-row input[type="range"]::-webkit-slider-thumb:hover {\r
    transform: scale(1.1);\r
    box-shadow: var(--shadow-medium);\r
}\r
\r
.control-row input[type="number"],\r
.control-row input[type="text"],\r
.control-row select {\r
    width: 100%;\r
    padding: var(--spacing-sm);\r
    background: var(--bg-secondary);\r
    border: 1px solid var(--border-color);\r
    border-radius: var(--radius-sm);\r
    color: var(--text-primary);\r
    font-size: 12px;\r
}\r
\r
.control-row input[type="number"]:focus,\r
.control-row input[type="text"]:focus,\r
.control-row select:focus {\r
    border-color: var(--accent-color);\r
    box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\r
}\r
\r
/* Checkbox and Radio */\r
.control-row input[type="checkbox"],\r
.control-row input[type="radio"] {\r
    margin-right: var(--spacing-sm);\r
    accent-color: var(--accent-color);\r
}\r
\r
/* Button Groups */\r
.btn-group {\r
    display: flex;\r
    gap: 2px;\r
}\r
\r
.btn-group .btn {\r
    border-radius: 0;\r
}\r
\r
.btn-group .btn:first-child {\r
    border-top-left-radius: var(--radius-sm);\r
    border-bottom-left-radius: var(--radius-sm);\r
}\r
\r
.btn-group .btn:last-child {\r
    border-top-right-radius: var(--radius-sm);\r
    border-bottom-right-radius: var(--radius-sm);\r
}\r
\r
.btn-group .btn.active {\r
    background: var(--accent-color);\r
    color: white;\r
    border-color: var(--accent-color);\r
}\r
\r
/* Loading Spinner */\r
.loading-spinner {\r
    width: 32px;\r
    height: 32px;\r
    border: 3px solid rgba(76, 175, 80, 0.3);\r
    border-top: 3px solid var(--accent-color);\r
    border-radius: 50%;\r
    animation: spin 1s linear infinite;\r
    margin: 0 auto var(--spacing-sm);\r
}\r
\r
@keyframes spin {\r
    0% { transform: rotate(0deg); }\r
    100% { transform: rotate(360deg); }\r
}\r
\r
/* Context Menu */\r
.context-menu {\r
    position: fixed;\r
    background: var(--bg-elevated);\r
    border: 1px solid var(--border-color);\r
    border-radius: var(--radius-md);\r
    box-shadow: var(--shadow-large);\r
    z-index: 1000;\r
    min-width: 150px;\r
    padding: var(--spacing-sm) 0;\r
}\r
\r
.context-item {\r
    padding: var(--spacing-sm) var(--spacing-md);\r
    cursor: pointer;\r
    font-size: 12px;\r
    color: var(--text-secondary);\r
    transition: all var(--transition-fast);\r
}\r
\r
.context-item:hover {\r
    background: var(--bg-secondary);\r
    color: var(--text-primary);\r
}\r
\r
.context-divider {\r
    height: 1px;\r
    background: var(--border-color);\r
    margin: var(--spacing-sm) 0;\r
}`,
      "layout": `/* FILE: editor/z3d-object-editor/templates/styles/layout.css */\r
/* UPDATED: Flexbox layout, right-region stretch fix, unified control alignment */\r
\r
html, body {\r
    margin: 0;\r
    padding: 0;\r
    width: 100%;\r
    height: 100%;\r
}\r
\r
.z3d-editor {\r
    display: flex;\r
    flex-direction: column;\r
    height: 100vh;\r
    width: 100vw;\r
    overflow: hidden;\r
}\r
\r
/* Top Bar */\r
.topbar {\r
    height: 32px;\r
    display: flex;\r
    align-items: center;\r
    justify-content: space-between;\r
    padding: 0 var(--spacing-md);\r
    background: var(--bg-secondary);\r
    border-bottom: 1px solid var(--border-color);\r
    flex-shrink: 0; /* Never shrink */\r
}\r
\r
/* Main Content - Horizontal Split */\r
.main-content {\r
    flex: 1;\r
    display: flex;\r
    min-height: 0; /* Critical for nested flex */\r
    overflow: hidden;\r
}\r
\r
/* Left Region - Contains viewport and viewer */\r
.left-region {\r
    flex: 0 0 70%; /* Initial width reduced from 80% so resizer starts ~10% further left */\r
    display: flex;\r
    flex-direction: column;\r
    min-width: 400px;\r
    overflow: hidden;\r
}\r
\r
/* Viewport Area - Where canvas lives */\r
.viewport-area {\r
    flex: 0 0 70%; /* Changed from 80% to 70% */\r
    position: relative;\r
    background: var(--bg-secondary);\r
    min-height: 300px;\r
    overflow: hidden;\r
}\r
\r
/* CRITICAL: Canvas container must fill viewport area */\r
.viewport-container {\r
    position: absolute;\r
    top: 36px; /* Offset by topbar height */\r
    left: 0;\r
    right: 0;\r
    bottom: 0;\r
    overflow: hidden;\r
}\r
\r
/* CRITICAL: Canvas must fill container without inline styles */\r
.three-canvas {\r
    display: block;\r
    width: 100% !important;\r
    height: 100% !important;\r
    position: absolute !important;\r
    top: 0 !important;\r
    left: 0 !important;\r
    cursor: grab;\r
    background: linear-gradient(135deg, var(--bg-secondary) 0%, var(--bg-primary) 100%);\r
    z-index: 0 !important;\r
}\r
\r
.three-canvas:active {\r
    cursor: grabbing;\r
}\r
\r
/* Scene Top Bar Overlay - defined in topbar.css */\r
\r
/* Left Horizontal Resizer */\r
.left-horizontal-resizer {\r
    flex: 0 0 4px;\r
    height: 4px;\r
    background: var(--border-color);\r
    cursor: ns-resize;\r
    transition: background var(--transition-fast);\r
    position: relative;\r
    z-index: 10;\r
}\r
\r
.left-horizontal-resizer:hover,\r
.left-horizontal-resizer.resizing {\r
    background: var(--accent-color);\r
}\r
\r
/* Viewer Area */\r
.viewer-area {\r
    flex: 1 1 30%; /* Changed from 0 0 20% to 1 1 30% - flex-grow: 1 ensures it fills remaining space */\r
    display: flex;\r
    flex-direction: column;\r
    background: var(--bg-tertiary);\r
    min-height: 100px;\r
    overflow: hidden;\r
}\r
\r
/* Viewer Topbar - Tighter spacing to match object-controls */\r
.viewer-topbar {\r
    display: flex;\r
    align-items: center;\r
    padding: 6px 12px; /* Reduced from default padding */\r
    background: var(--bg-secondary);\r
    border-bottom: 1px solid var(--border-color);\r
    flex-shrink: 0;\r
    height: 32px; /* Fixed height to match other topbars */\r
}\r
\r
.viewer-controls {\r
    display: flex;\r
    align-items: center;\r
    gap: 8px;\r
}\r
\r
.viewer-select {\r
    padding: 4px 8px;\r
    background: #1a1a1a;\r
    border: 1px solid rgba(255, 255, 255, 0.1);\r
    border-radius: var(--radius-sm);\r
    color: #e0e0e0;\r
    font-size: 11px;\r
    font-family: 'SF Mono', Monaco, 'Cascadia Code', monospace;\r
    cursor: pointer;\r
    outline: none;\r
    transition: all var(--transition-fast);\r
}\r
\r
.viewer-select:hover {\r
    border-color: rgba(255, 255, 255, 0.2);\r
    background: #1d1d1d;\r
}\r
\r
.viewer-select:focus {\r
    border-color: var(--accent-color);\r
    box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\r
}\r
\r
/* Viewer Content - Ensure it fills remaining space */\r
.viewer-content {\r
    flex: 1;\r
    overflow-y: auto;\r
    overflow-x: hidden;\r
    display: flex;\r
    flex-direction: column;\r
}\r
\r
/* Vertical Resizer */\r
.vertical-resizer {\r
    flex: 0 0 4px;\r
    width: 4px;\r
    background: var(--border-color);\r
    cursor: ew-resize;\r
    transition: background var(--transition-fast);\r
    position: relative;\r
    z-index: 10;\r
}\r
\r
.vertical-resizer:hover,\r
.vertical-resizer.resizing {\r
    background: var(--accent-color);\r
}\r
\r
/* Right Region */\r
.right-region {\r
    flex: 1 1 auto; /* Allow expansion */\r
    display: flex;\r
    flex-direction: column;\r
    background: var(--bg-tertiary);\r
    min-width: 250px;\r
    overflow: hidden;\r
    align-self: stretch;\r
    max-width: 100%;\r
}\r
\r
/* Info Section */\r
.info-section {\r
    padding: var(--spacing-md);\r
    border-bottom: 1px solid var(--border-color);\r
    background: var(--bg-secondary);\r
    flex-shrink: 0;\r
}\r
\r
/* Node Tree Section */\r
.side-tabs-section {\r
    flex: 1 1 auto; /* fill remaining space above status bar */\r
    display: flex;\r
    flex-direction: row; /* vertical tab bar on left */\r
    min-height: 200px;\r
    min-height: 0; /* allow interior flex children to scroll */\r
    overflow: hidden;\r
}\r
.tab-bar {\r
    display: flex;\r
    flex-direction: column;\r
    background: var(--bg-secondary);\r
    border-right: 1px solid var(--border-color);\r
    width: 44px;\r
    flex-shrink: 0;\r
}\r
.tab-bar .tab-btn {\r
    padding: 6px 0;\r
    border: none;\r
    background: transparent;\r
    color: var(--text-secondary);\r
    cursor: pointer;\r
    font-size: 16px; /* larger icon */\r
    display: flex;\r
    justify-content: center;\r
    align-items: center;\r
    flex-direction: column;\r
    gap: 4px;\r
    position: relative;\r
}\r
.tab-bar .tab-btn .icon { line-height: 1; filter: drop-shadow(0 1px 1px rgba(0,0,0,0.4)); }\r
.tab-bar .tab-btn:hover { background: var(--bg-tertiary); color: var(--text-primary); }\r
.tab-bar .tab-btn.active {\r
    background: var(--bg-tertiary);\r
    color: var(--text-primary);\r
    border-left: 3px solid var(--accent-color);\r
}\r
\r
/* Compact object control layout helpers */\r
/* Unified label width + prevent wrapping so e.g. "Rotation Order" stays on one line */\r
.object-controls.compact-layout .vector-row label,\r
.object-controls.compact-layout .control-row.inline label { \r
    width: 96px; \r
    text-align: right; \r
    padding-right: 4px; \r
    white-space: nowrap;\r
}\r
.object-controls.compact-layout .vector-row { gap: 4px; }\r
.object-controls.compact-layout .drag-input { padding: 4px 6px; font-size: 10px; }\r
.object-controls.compact-layout .control-row.inline { display: flex; align-items: center; gap: 4px; }\r
.object-controls.compact-layout .control-row.inline input,\r
.object-controls.compact-layout .control-row.inline select { flex: 1; min-width: 0; }\r
\r
/* Force scalar control rows (Unit Scale, Scale, Rotation Order) to align with vector rows width */\r
/* Allow rows to stretch; width control handled by section padding */\r
.object-controls.compact-layout .scalar-controls,\r
.object-controls.compact-layout .control-row.inline,\r
.object-controls.compact-layout .vector-controls { max-width: none; }\r
\r
/* Ensure degree symbol spacing does not push width beyond set max */\r
.object-controls.compact-layout .vector-row .unit { flex: 0 0 14px; text-align: left; }\r
\r
/* Viewport controls labels alignment mirror object controls */\r
.viewport-controls-panel .vc-field label { width: 70px; text-align: right; }\r
\r
/* Prevent tab content from stretching child panels beyond intended width */\r
.tab-panel.active { align-items: stretch; }\r
\r
/* Rotation order select alignment */\r
/* Rotation order select should expand like other inputs */\r
.object-controls.compact-layout select#rotation-order { max-width: none; }\r
\r
/* Viewport controls unified row */\r
.viewport-controls-panel { padding: var(--spacing-sm); display: flex; flex-direction: column; gap: 6px; }\r
.viewport-controls-panel .controls-row { display: flex; flex-wrap: wrap; gap: 8px; align-items: center; }\r
.viewport-controls-panel .vc-field { display: flex; align-items: center; gap: 4px; }\r
.viewport-controls-panel .vc-field label { width: 70px; text-align: right; white-space: nowrap; font-size: 11px; }\r
.viewport-controls-panel .vc-field input[type=number] { width: 64px; }\r
.viewport-controls-panel .vc-field.checkbox label { width: 70px; }\r
.viewport-controls-panel .vc-field.checkbox input[type=checkbox] { margin-left: 0; }\r
.tab-content {\r
    flex: 1;\r
    overflow-y: auto;\r
    display: flex;\r
    overflow-x: hidden; /* prevent horizontal scroll */\r
}\r
/* Ensure only the active tab-panel is visible */\r
.tab-panel { display: none; flex: 1; }\r
.tab-panel.active { display: flex; flex-direction: column; }\r
\r
/* Collapsible section styling */\r
.object-controls .collapsible-section {\r
    background: rgba(255,255,255,0.03);\r
    border: 1px solid rgba(255,255,255,0.06);\r
    border-radius: 6px;\r
    padding: 4px 6px 6px;\r
    margin: 6px 8px;\r
    position: relative;\r
}\r
.object-controls .collapsible-section.collapsed { opacity: 0.9; }\r
.object-controls .section-header {\r
    display: flex;\r
    align-items: center;\r
    gap: 6px;\r
    font-family: 'SF Mono', Monaco, 'Cascadia Code', monospace;\r
    font-size: 11px;\r
    font-weight: 600;\r
    cursor: pointer;\r
    padding: 2px 2px 4px;\r
    user-select: none;\r
    color: var(--text-secondary);\r
}\r
.object-controls .section-header:hover { color: var(--text-primary); }\r
.object-controls .section-content { padding-top: 4px; }\r
\r
/* Field row layout stretching while keeping consistent internal widths */\r
.object-controls .field-row, .object-controls .vector-row { width: 100%; }\r
.object-controls { --oc-min-input-width: 64px; --oc-label-width: 96px; --oc-unit-col-width: 4px; }\r
.object-controls .vector-row, .object-controls .field-row {\r
    display: grid;\r
    grid-template-columns: var(--oc-label-width) 1fr var(--oc-unit-col-width);\r
    align-items: center;\r
    gap: 1px;\r
}\r
/* Inputs (position, rotation, scale, unit scale, master scale, rotation order) expand uniformly */\r
.object-controls .vector-row input.drag-input,\r
.object-controls .field-row input.drag-input,\r
.object-controls .field-row select {\r
    width: 100%;\r
    min-width: var(--oc-min-input-width);\r
}\r
.object-controls .unit-spacer { width: var(--oc-unit-col-width); display: inline-block; }\r
\r
/* Ensure all degree units align in a reserved spacer column */\r
.object-controls .vector-row span.unit { position: absolute; right: 8px; }\r
.object-controls .vector-row span.unit { width: var(--oc-unit-col-width); text-align: left; font-size: 10px; color: #808080; }\r
\r
/* Reduce right padding inside inputs so number is closer to unit */\r
.object-controls.compact-layout .drag-input { padding: 4px 2px; }\r
\r
/* Vertical grouping spacing */\r
/* Vector group internal spacing */\r
.object-controls .section-content > .vector-controls { display:flex; flex-direction:column; gap:4px; margin:0; }\r
/* Specific group spacing adjustments */\r
/* Primary transform group spacing (slightly reduced) */\r
.object-controls .section-content > .position-group { margin-bottom:16px; }\r
.object-controls .section-content > .rotation-group { margin-bottom:20px; }\r
.object-controls .section-content > .scale-vector-group { margin-bottom:16px; }\r
/* Scalar controls (unit scale + scale) as grid rows matching vector layout */\r
.object-controls .scalar-controls { display:flex; flex-direction:column; gap:4px; margin-bottom:16px; }\r
/* Reset inherited control-row margin from global components.css for compact layout */\r
.object-controls .control-row { margin-bottom:0; }\r
.object-controls .scalar-controls .field-row { display:grid; grid-template-columns: var(--oc-label-width) 1fr var(--oc-unit-col-width); align-items:center; gap:1px; }\r
.object-controls .scalar-controls .field-row + .field-row { margin-top:0; }\r
.object-controls .scalar-controls .field-row label { text-align:right !important; justify-self:end; width:var(--oc-label-width); display:block; }\r
/* Delta transform group spacing (match primary) */\r
.object-controls #delta-transform-content > .delta-position-group { margin-bottom:16px; }\r
.object-controls #delta-transform-content > .delta-rotation-group { margin-bottom:20px; }\r
.object-controls #delta-transform-content > .delta-scale-vector-group { margin-bottom:16px; }\r
/* Ensure rotation order row treated like other field rows */\r
.object-controls .field-row select#rotation-order { width:100%; }\r
\r
/* Prevent overflow past a comfortable reading max width */\r
/* Section content fills available width with internal right padding for unit column */\r
.object-controls .section-content { max-width: none; padding-right: 18px; }\r
\r
/* Make collapsible sections fill parent width */\r
.object-controls { width: 100%; }\r
.object-controls .collapsible-section { width: 100%; margin-left: 8px; margin-right: 8px; }\r
.object-controls { align-self: stretch; }\r
\r
/* Horizontal Resizer */\r
.horizontal-resizer {\r
    flex: 0 0 4px;\r
    height: 4px;\r
    background: var(--border-color);\r
    cursor: ns-resize;\r
    transition: background var(--transition-fast);\r
    position: relative;\r
    z-index: 10;\r
}\r
\r
.horizontal-resizer:hover,\r
.horizontal-resizer.resizing {\r
    background: var(--accent-color);\r
}\r
\r
\r
/* Status Bar */\r
.right-region { position: relative; }\r
.right-region > .status-bar { margin-top: auto; }\r
.status-bar {\r
    display: flex;\r
    align-items: center;\r
    gap: 8px;\r
    padding: 4px var(--spacing-md);\r
    background: var(--bg-secondary);\r
    border-top: 1px solid var(--border-color);\r
    font-size: 10px;\r
    line-height: 1.2;\r
    color: var(--text-muted);\r
    flex-shrink: 0;\r
    min-height: 28px;\r
}\r
\r
/* Overlay for stats */\r
.stats-overlay {\r
    position: absolute;\r
    top: 40px;\r
    left: var(--spacing-sm);\r
    background: rgba(37, 37, 37, 0.9);\r
    backdrop-filter: blur(10px);\r
    padding: var(--spacing-sm);\r
    border-radius: var(--radius-sm);\r
    font-size: 11px;\r
    font-family: 'SF Mono', Monaco, 'Cascadia Code', monospace;\r
    color: var(--text-secondary);\r
    z-index: 100;\r
    pointer-events: none;\r
}\r
\r
/* Loading Indicator */\r
.loading-indicator {\r
    position: absolute;\r
    top: 50%;\r
    left: 50%;\r
    transform: translate(-50%, -50%);\r
    background: rgba(0, 0, 0, 0.85);\r
    padding: var(--spacing-xl);\r
    border-radius: var(--radius-lg);\r
    z-index: 200;\r
    pointer-events: none;\r
}\r
\r
.loading-indicator.hidden {\r
    display: none;\r
}\r
\r
/* Discord Support Link */\r
.discord-link {\r
    display: flex;\r
    align-items: center;\r
    gap: 8px;\r
    color: white;\r
    text-decoration: none;\r
    font-size: 13px;\r
    font-weight: 500;\r
    padding: 6px 12px;\r
    border-radius: var(--radius-sm);\r
    transition: all var(--transition-fast);\r
}\r
\r
.discord-link:hover {\r
    background: rgba(114, 137, 218, 0.2); /* Discord brand color with transparency */\r
    color: #7289da; /* Discord brand color */\r
}\r
\r
.discord-icon {\r
    width: 18px;\r
    height: 18px;\r
    flex-shrink: 0;\r
}\r
\r
/* Ensure topbar-right aligns properly */\r
.topbar-right {\r
    display: flex;\r
    align-items: center;\r
}\r
\r
.topbar-left {\r
    display: flex;\r
    align-items: center;\r
}\r
\r
.logo {\r
    font-weight: 600;\r
    font-size: 14px;\r
    color: var(--text-primary);\r
}`,
      "object-controls": `/* FILE: editor/z3d-object-editor/templates/styles/object-controls.css */\r
/* UPDATED: Better dark theme styling for number inputs */\r
\r
/* Vector Controls */\r
.vector-controls {\r
    display: flex;\r
    flex-direction: column;\r
    gap: var(--spacing-sm);\r
}\r
\r
.vector-row {\r
    display: flex;\r
    align-items: center;\r
    gap: var(--spacing-sm);\r
}\r
\r
.vector-row label {\r
    min-width: 20px;\r
    font-size: 11px;\r
    font-weight: 600;\r
    color: var(--text-secondary);\r
    font-family: 'SF Mono', Monaco, 'Cascadia Code', monospace;\r
}\r
\r
/* Improved Drag Input Fields - Dark Theme */\r
.drag-input {\r
    flex: 1;\r
    padding: 6px 8px;\r
    background: #1a1a1a !important; /* Darker than container - force override */\r
    border: 1px solid rgba(255, 255, 255, 0.1);\r
    border-radius: var(--radius-sm);\r
    color: #e0e0e0 !important; /* Light text - force override */\r
    font-size: 11px;\r
    font-family: 'SF Mono', Monaco, 'Cascadia Code', monospace;\r
    text-align: right;\r
    transition: all var(--transition-fast);\r
    cursor: text;\r
    outline: none;\r
    position: relative;\r
    -webkit-appearance: none; /* Remove default browser styling */\r
    -moz-appearance: textfield; /* Remove default browser styling */\r
    -webkit-user-select: text; /* Allow text selection */\r
    -moz-user-select: text;\r
    user-select: text;\r
}\r
\r
/* Prevent no-drag cursor when dragging selected text */\r
.drag-input::selection {\r
    background: rgba(76, 175, 80, 0.3);\r
    color: #ffffff;\r
}\r
\r
.drag-input::-moz-selection {\r
    background: rgba(76, 175, 80, 0.3);\r
    color: #ffffff;\r
}\r
\r
/* Force dark theme for all number inputs with drag-input class */\r
input[type="number"].drag-input {\r
    background: #1a1a1a !important;\r
    color: #e0e0e0 !important;\r
}\r
\r
.drag-input:hover {\r
    border-color: rgba(255, 255, 255, 0.2);\r
    background: #1d1d1d !important;\r
    color: #ffffff !important;\r
}\r
\r
.drag-input:focus {\r
    border-color: var(--accent-color);\r
    box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\r
    background: #1a1a1a !important;\r
    color: #ffffff !important;\r
}\r
\r
/* Dragging state */\r
.drag-input.dragging {\r
    cursor: ns-resize !important;\r
    background: #222222 !important;\r
    border-color: var(--accent-color);\r
    color: #ffffff !important;\r
    -webkit-user-select: none !important;\r
    -moz-user-select: none !important; \r
    user-select: none !important;\r
}\r
\r
/* Remove spinner buttons for cleaner look */\r
.drag-input::-webkit-inner-spin-button,\r
.drag-input::-webkit-outer-spin-button {\r
    -webkit-appearance: none;\r
    margin: 0;\r
}\r
\r
.drag-input[type=number] {\r
    -moz-appearance: textfield;\r
}\r
\r
/* Visual feedback during drag */\r
.drag-input.dragging::after {\r
    content: '';\r
    position: absolute;\r
    top: -20px;\r
    left: 50%;\r
    transform: translateX(-50%);\r
    width: 0;\r
    height: 0;\r
    border-left: 4px solid transparent;\r
    border-right: 4px solid transparent;\r
    border-bottom: 6px solid var(--accent-color);\r
    opacity: 0;\r
    animation: dragIndicatorUp 0.3s ease-out;\r
}\r
\r
.drag-input.dragging.drag-down::after {\r
    top: auto;\r
    bottom: -20px;\r
    border-bottom: none;\r
    border-top: 6px solid var(--accent-color);\r
    animation: dragIndicatorDown 0.3s ease-out;\r
}\r
\r
@keyframes dragIndicatorUp {\r
    0% { opacity: 0; transform: translateX(-50%) translateY(5px); }\r
    50% { opacity: 1; }\r
    100% { opacity: 0; transform: translateX(-50%) translateY(-5px); }\r
}\r
\r
@keyframes dragIndicatorDown {\r
    0% { opacity: 0; transform: translateX(-50%) translateY(-5px); }\r
    50% { opacity: 1; }\r
    100% { opacity: 0; transform: translateX(-50%) translateY(5px); }\r
}\r
\r
/* Unit labels styling */\r
.unit {\r
    font-size: 10px;\r
    color: #808080;\r
    font-family: 'SF Mono', Monaco, 'Cascadia Code', monospace;\r
    min-width: 15px;\r
}`,
      "outliner": "/* FILE: editor/z3d-object-editor/templates/styles/outliner.css */\r\n/* Enhanced Outliner/Node Tree Styles with Fixed Arrows and Text Selection */\r\n\r\n/* CSS Variables for consistency */\r\n:root {\r\n    --outliner-indent: 20px;\r\n    --outliner-arrow-size: 12px;\r\n}\r\n\r\n.node-tree-section {\r\n    flex: 0 0 50%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    background: var(--bg-tertiary);\r\n    border-bottom: 1px solid var(--border-color);\r\n    min-height: 150px;\r\n    overflow: hidden;\r\n}\r\n\r\n.node-tree-section h4 {\r\n    padding: var(--spacing-sm) var(--spacing-md);\r\n    margin: 0;\r\n    font-size: 13px;\r\n    font-weight: 600;\r\n    color: var(--text-secondary);\r\n    background: var(--bg-secondary);\r\n    border-bottom: 1px solid var(--border-color);\r\n    flex-shrink: 0;\r\n}\r\n\r\n.node-tree {\r\n    flex: 1;\r\n    overflow: hidden;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n/* Outliner Container */\r\n.outliner-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100%;\r\n    background: var(--bg-tertiary);\r\n}\r\n\r\n/* Outliner Toolbar */\r\n.outliner-toolbar {\r\n    display: flex;\r\n    gap: 4px;\r\n    padding: 6px;\r\n    background: var(--bg-secondary);\r\n    border-bottom: 1px solid var(--border-color);\r\n    flex-shrink: 0;\r\n}\r\n\r\n.outliner-category-select {\r\n    min-width: 120px;\r\n    padding: 4px 8px;\r\n    background: var(--bg-primary);\r\n    border: 1px solid var(--border-color);\r\n    border-radius: var(--radius-sm);\r\n    color: var(--text-primary);\r\n    font-size: 11px;\r\n    cursor: pointer;\r\n}\r\n\r\n.outliner-search {\r\n    flex: 1;\r\n    padding: 4px 8px;\r\n    background: var(--bg-primary);\r\n    border: 1px solid var(--border-color);\r\n    border-radius: var(--radius-sm);\r\n    color: var(--text-primary);\r\n    font-size: 11px;\r\n    min-width: 0;\r\n}\r\n\r\n.outliner-search:focus {\r\n    border-color: var(--accent-color);\r\n    outline: none;\r\n}\r\n\r\n/* Outliner Tree */\r\n.outliner-tree {\r\n    flex: 1;\r\n    overflow-y: auto;\r\n    overflow-x: hidden;\r\n    padding: 4px 0;\r\n}\r\n\r\n/* Scene Explorer */\r\n.scene-explorer {\r\n    padding: 4px 0;\r\n}\r\n\r\n/* Category Sections */\r\n.category-section {\r\n    margin-bottom: 4px;\r\n    border-bottom: 1px solid var(--border-color);\r\n}\r\n\r\n.category-section:last-child {\r\n    border-bottom: none;\r\n}\r\n\r\n.category-header {\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 8px 12px;\r\n    cursor: pointer;\r\n    user-select: none;\r\n    background: linear-gradient(135deg, #2a2a2a, #252525);\r\n    transition: background 0.2s;\r\n}\r\n\r\n.category-header:hover {\r\n    background: linear-gradient(135deg, #2d2d2d, #282828);\r\n}\r\n\r\n.category-header.empty {\r\n    opacity: 0.5;\r\n    cursor: default;\r\n}\r\n\r\n.category-toggle {\r\n    display: inline-flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: var(--outliner-arrow-size);\r\n    height: var(--outliner-arrow-size);\r\n    margin-right: 8px;\r\n    color: var(--text-muted);\r\n    font-size: 10px;\r\n    transition: transform 0.2s;\r\n    flex-shrink: 0;\r\n}\r\n\r\n.category-toggle.expanded {\r\n    transform: rotate(90deg);\r\n}\r\n\r\n.category-icon {\r\n    margin-right: 8px;\r\n    font-size: 14px;\r\n    filter: drop-shadow(0 1px 1px rgba(0,0,0,0.3));\r\n}\r\n\r\n.category-name {\r\n    flex: 1;\r\n    font-size: 12px;\r\n    font-weight: 600;\r\n    color: var(--text-primary);\r\n}\r\n\r\n.category-count {\r\n    font-size: 11px;\r\n    color: var(--text-muted);\r\n    opacity: 0.7;\r\n}\r\n\r\n.category-content {\r\n    padding: 2px 0;\r\n    background: rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n/* Node Styles */\r\n.outliner-node {\r\n    font-size: 11px;\r\n    position: relative;\r\n}\r\n\r\n.node-row {\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 2px 8px 2px 4px;\r\n    cursor: pointer;\r\n    transition: background var(--transition-fast);\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    min-height: 22px;\r\n}\r\n\r\n.node-row:hover {\r\n    background: rgba(255, 255, 255, 0.05);\r\n}\r\n\r\n.outliner-node.selected > .node-row {\r\n    background: var(--accent-color);\r\n    color: white;\r\n}\r\n\r\n.outliner-node.hovered > .node-row {\r\n    background: rgba(76, 175, 80, 0.2);\r\n}\r\n\r\n/* Node Toggle Arrow - FIXED */\r\n.node-toggle {\r\n    display: inline-flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: var(--outliner-arrow-size);\r\n    height: var(--outliner-arrow-size);\r\n    margin-right: 4px;\r\n    cursor: pointer;\r\n    color: var(--text-muted);\r\n    font-size: 10px;\r\n    transition: transform 0.2s, color 0.2s;\r\n    flex-shrink: 0;\r\n    /* Ensure arrow is visible */\r\n    line-height: 1;\r\n    font-family: monospace;\r\n}\r\n\r\n.node-toggle:hover {\r\n    color: var(--text-primary);\r\n}\r\n\r\n.node-toggle.expanded {\r\n    transform: rotate(90deg);\r\n}\r\n\r\n.node-toggle-spacer {\r\n    display: inline-block;\r\n    width: var(--outliner-arrow-size);\r\n    margin-right: 4px;\r\n    flex-shrink: 0;\r\n}\r\n\r\n/* Node Icon */\r\n.node-icon {\r\n    margin: 0 6px;\r\n    flex-shrink: 0;\r\n    font-size: 14px;\r\n    filter: drop-shadow(0 1px 1px rgba(0,0,0,0.3));\r\n}\r\n\r\n/* Node Name - ENABLE TEXT SELECTION */\r\n.node-name {\r\n    flex: 1;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    color: var(--text-primary);\r\n    font-family: 'SF Mono', Monaco, 'Cascadia Code', monospace;\r\n    /* Enable text selection */\r\n    user-select: text !important;\r\n    -webkit-user-select: text !important;\r\n    -moz-user-select: text !important;\r\n    -ms-user-select: text !important;\r\n    cursor: text;\r\n}\r\n\r\n/* When hovering over node name, show text cursor */\r\n.node-name:hover {\r\n    cursor: text;\r\n}\r\n\r\n/* Selected text styling - MORE VISIBLE */\r\n.node-name::selection,\r\n.item-name::selection,\r\n.sub-item-name::selection,\r\n.metadata-value::selection {\r\n    background: #FF6B00 !important; /* Bright orange background */\r\n    color: #FFFFFF !important; /* White text */\r\n}\r\n\r\n.node-name::-moz-selection,\r\n.item-name::-moz-selection,\r\n.sub-item-name::-moz-selection,\r\n.metadata-value::-moz-selection {\r\n    background: #FF6B00 !important; /* Bright orange background */\r\n    color: #FFFFFF !important; /* White text */\r\n}\r\n\r\n/* When row is selected but text is being selected, reduce row opacity */\r\n.outliner-node.selected > .node-row:has(.node-name::selection),\r\n.list-item.selected:has(.item-name::selection) {\r\n    background: rgba(76, 175, 80, 0.3); /* Reduced opacity when selecting text */\r\n}\r\n\r\n/* Search match highlighting */\r\n.node-name.search-match {\r\n    background: rgba(255, 200, 0, 0.3);\r\n    padding: 0 2px;\r\n    border-radius: 2px;\r\n}\r\n\r\n/* Node Type */\r\n.node-type {\r\n    margin-left: auto;\r\n    padding-left: 8px;\r\n    color: var(--text-muted);\r\n    font-size: 10px;\r\n    opacity: 0.7;\r\n    font-style: italic;\r\n    user-select: none;\r\n}\r\n\r\n/* Visibility Toggle Button - NEW */\r\n.visibility-toggle {\r\n    display: inline-flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 18px;\r\n    height: 18px;\r\n    margin-left: 6px;\r\n    padding: 0;\r\n    background: transparent;\r\n    border: none;\r\n    color: var(--text-primary);\r\n    font-size: 14px;\r\n    cursor: pointer;\r\n    transition: all 0.2s;\r\n    flex-shrink: 0;\r\n    opacity: 0.8;\r\n    filter: drop-shadow(0 1px 2px rgba(0,0,0,0.3));\r\n}\r\n\r\n.visibility-toggle:hover {\r\n    opacity: 1;\r\n    transform: scale(1.1);\r\n}\r\n\r\n.visibility-toggle.hidden {\r\n    opacity: 0.4;\r\n    color: var(--text-muted);\r\n    text-decoration: line-through;\r\n}\r\n\r\n/* Alternative hidden style with slash-eye */\r\n.visibility-toggle.hidden::after {\r\n    content: '';\r\n    position: absolute;\r\n    width: 14px;\r\n    height: 1px;\r\n    background: var(--text-muted);\r\n    transform: rotate(-45deg);\r\n}\r\n\r\n/* Metadata Toggle Button */\r\n.metadata-toggle {\r\n    display: inline-flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 16px;\r\n    height: 16px;\r\n    margin-left: 6px;\r\n    padding: 0;\r\n    background: transparent;\r\n    border: 1px solid rgba(255, 255, 255, 0.2);\r\n    border-radius: 3px;\r\n    color: var(--text-muted);\r\n    font-size: 9px;\r\n    cursor: pointer;\r\n    transition: all 0.2s;\r\n    flex-shrink: 0;\r\n    opacity: 0.6;\r\n}\r\n\r\n.metadata-toggle:hover {\r\n    opacity: 1;\r\n    background: rgba(255, 255, 255, 0.1);\r\n    border-color: var(--accent-color);\r\n    color: var(--accent-color);\r\n}\r\n\r\n.metadata-toggle.expanded {\r\n    background: rgba(76, 175, 80, 0.2);\r\n    border-color: var(--accent-color);\r\n    color: var(--accent-color);\r\n    opacity: 1;\r\n}\r\n\r\n/* Hide metadata toggle when there's no metadata */\r\n.node-row:not(.has-metadata) .metadata-toggle {\r\n    display: none;\r\n}\r\n\r\n/* Node Children */\r\n.node-children {\r\n    position: relative;\r\n}\r\n\r\n.node-children::before {\r\n    content: '';\r\n    position: absolute;\r\n    left: 10px;\r\n    top: 0;\r\n    bottom: 0;\r\n    width: 1px;\r\n    background: var(--border-color);\r\n    opacity: 0.3;\r\n}\r\n\r\n/* Node Metadata */\r\n.node-metadata {\r\n    padding: 4px 0;\r\n    font-size: 10px;\r\n    color: var(--text-muted);\r\n}\r\n\r\n.metadata-group {\r\n    margin: 2px 0;\r\n    padding: 4px 8px;\r\n    background: rgba(0, 0, 0, 0.2);\r\n    border-left: 2px solid var(--accent-color);\r\n}\r\n\r\n.metadata-item {\r\n    display: flex;\r\n    gap: 8px;\r\n    padding: 1px 0;\r\n}\r\n\r\n.metadata-key {\r\n    color: var(--accent-color);\r\n    font-weight: 600;\r\n    min-width: 60px;\r\n}\r\n\r\n.metadata-value {\r\n    flex: 1;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n    font-family: 'SF Mono', Monaco, 'Cascadia Code', monospace;\r\n    /* Enable text selection for metadata values */\r\n    user-select: text !important;\r\n    cursor: text;\r\n}\r\n\r\n.metadata-value.clickable {\r\n    color: var(--accent-color);\r\n    cursor: pointer;\r\n    text-decoration: underline;\r\n    user-select: none;\r\n}\r\n\r\n.metadata-value.clickable:hover {\r\n    color: var(--accent-light);\r\n}\r\n\r\n/* List Items (Materials, Textures, etc.) */\r\n.items-list {\r\n    padding: 4px 0;\r\n}\r\n\r\n.list-item {\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 4px 12px;\r\n    cursor: pointer;\r\n    transition: background 0.2s;\r\n    font-size: 11px;\r\n}\r\n\r\n.list-item:hover {\r\n    background: rgba(255, 255, 255, 0.05);\r\n}\r\n\r\n.list-item.selected {\r\n    background: var(--accent-color);\r\n    color: white;\r\n}\r\n\r\n.item-toggle {\r\n    display: inline-flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: var(--outliner-arrow-size);\r\n    height: var(--outliner-arrow-size);\r\n    margin-right: 4px;\r\n    cursor: pointer;\r\n    color: var(--text-muted);\r\n    font-size: 10px;\r\n    transition: transform 0.2s;\r\n    flex-shrink: 0;\r\n}\r\n\r\n.item-toggle.expanded {\r\n    transform: rotate(90deg);\r\n}\r\n\r\n.item-icon {\r\n    margin: 0 8px;\r\n    font-size: 14px;\r\n    flex-shrink: 0;\r\n}\r\n\r\n.item-name {\r\n    flex: 1;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    /* Enable text selection */\r\n    user-select: text !important;\r\n    cursor: text;\r\n}\r\n\r\n.item-type,\r\n.item-info {\r\n    margin-left: auto;\r\n    padding-left: 8px;\r\n    color: var(--text-muted);\r\n    font-size: 10px;\r\n    opacity: 0.7;\r\n    user-select: none;\r\n}\r\n\r\n.item-badge {\r\n    margin-left: 4px;\r\n    font-size: 10px;\r\n}\r\n\r\n/* Sub Items (Animation tracks, bones, etc.) */\r\n.sub-items {\r\n    padding-left: 24px;\r\n    background: rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.sub-item {\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 2px 12px;\r\n    font-size: 10px;\r\n    color: var(--text-muted);\r\n}\r\n\r\n.sub-item-icon {\r\n    margin-right: 6px;\r\n    font-size: 12px;\r\n    opacity: 0.7;\r\n}\r\n\r\n.sub-item-name {\r\n    flex: 1;\r\n    /* Enable text selection */\r\n    user-select: text !important;\r\n    cursor: text;\r\n}\r\n\r\n.sub-item-type,\r\n.sub-item-info {\r\n    margin-left: auto;\r\n    padding-left: 8px;\r\n    font-size: 9px;\r\n    opacity: 0.6;\r\n    user-select: none;\r\n}\r\n\r\n/* Loading State */\r\n.outliner-loading {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: var(--spacing-xl);\r\n    color: var(--text-muted);\r\n    gap: var(--spacing-sm);\r\n}\r\n\r\n.outliner-loading .loading-spinner.small {\r\n    width: 24px;\r\n    height: 24px;\r\n    border-width: 2px;\r\n}\r\n\r\n/* Empty State */\r\n.outliner-empty {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: var(--spacing-xl);\r\n    color: var(--text-muted);\r\n    gap: var(--spacing-sm);\r\n}\r\n\r\n.empty-icon {\r\n    font-size: 32px;\r\n    opacity: 0.5;\r\n}\r\n\r\n.empty-text {\r\n    font-size: 12px;\r\n}\r\n\r\n/* Stats */\r\n.outliner-stats {\r\n    padding: 8px;\r\n    background: var(--bg-secondary);\r\n    border-top: 1px solid var(--border-color);\r\n    font-size: 10px;\r\n    color: var(--text-muted);\r\n}\r\n\r\n.stats-row {\r\n    display: flex;\r\n    gap: 12px;\r\n    flex-wrap: wrap;\r\n}\r\n\r\n.stat-item {\r\n    white-space: nowrap;\r\n}\r\n\r\n/* Scrollbar for outliner */\r\n.outliner-tree::-webkit-scrollbar {\r\n    width: 6px;\r\n}\r\n\r\n.outliner-tree::-webkit-scrollbar-track {\r\n    background: transparent;\r\n}\r\n\r\n.outliner-tree::-webkit-scrollbar-thumb {\r\n    background: var(--border-color);\r\n    border-radius: 3px;\r\n}\r\n\r\n.outliner-tree::-webkit-scrollbar-thumb:hover {\r\n    background: var(--border-light);\r\n}\r\n\r\n/* Hidden node indicator */\r\n.node-hidden {\r\n    margin-left: 4px;\r\n    opacity: 0.5;\r\n    font-size: 10px;\r\n}",
      "animation": "/* FILE: editor/z3d-object-editor/templates/styles/animation.css */\r\n/* Animation Viewer Styles - Complete with Restored Styling */\r\n\r\n.animation-controls {\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100%;\r\n    padding: 8px; /* Reduced from 12px */\r\n    gap: 8px; /* Reduced from 12px */\r\n    background: var(--bg-tertiary);\r\n}\r\n\r\n/* Compact Animation Header */\r\n.animation-header-compact {\r\n    padding-bottom: 6px; /* Reduced from 8px */\r\n    border-bottom: 1px solid var(--border-color);\r\n}\r\n\r\n.animation-select-row {\r\n    display: flex;\r\n    gap: 8px; /* Reduced from 12px */\r\n    align-items: center;\r\n}\r\n\r\n.animation-select {\r\n    flex: 1;\r\n    min-width: 0;\r\n    padding: 4px 8px; /* Reduced from 6px 8px */\r\n    background: #1a1a1a;\r\n    border: 1px solid rgba(255, 255, 255, 0.1);\r\n    border-radius: var(--radius-sm);\r\n    color: #e0e0e0;\r\n    font-size: 11px; /* Reduced from 12px */\r\n    font-family: 'SF Mono', Monaco, 'Cascadia Code', monospace;\r\n    cursor: pointer;\r\n    outline: none;\r\n}\r\n\r\n.animation-select:hover {\r\n    border-color: rgba(255, 255, 255, 0.2);\r\n    background: #1d1d1d;\r\n}\r\n\r\n.animation-select:focus {\r\n    border-color: var(--accent-color);\r\n    box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\r\n}\r\n\r\n.animation-select:disabled {\r\n    opacity: 0.5;\r\n    cursor: not-allowed;\r\n}\r\n\r\n.animation-info-inline {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1px; /* Reduced from 2px */\r\n    min-width: 100px; /* Reduced from 120px */\r\n    text-align: right;\r\n}\r\n\r\n.animation-name {\r\n    font-size: 11px; /* Reduced from 12px */\r\n    font-weight: 600;\r\n    color: var(--text-primary);\r\n    font-family: 'SF Mono', Monaco, 'Cascadia Code', monospace;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n}\r\n\r\n.animation-duration {\r\n    font-size: 9px; /* Reduced from 10px */\r\n    color: var(--text-muted);\r\n    font-family: 'SF Mono', Monaco, 'Cascadia Code', monospace;\r\n}\r\n\r\n/* Playback Controls - RESTORED STYLING */\r\n.playback-controls {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 8px; /* Reduced from 10px */\r\n    padding: 6px; /* Reduced from 8px */\r\n    background: var(--bg-secondary);\r\n    border-radius: var(--radius-sm); /* Smaller radius */\r\n}\r\n\r\n.control-buttons {\r\n    display: flex;\r\n    gap: 6px; /* Reduced from 8px */\r\n    align-items: center;\r\n}\r\n\r\n.control-btn {\r\n    width: 28px; /* Reduced from 32px */\r\n    height: 28px; /* Reduced from 32px */\r\n    padding: 0;\r\n    background: #1a1a1a;\r\n    border: 1px solid rgba(255, 255, 255, 0.1);\r\n    border-radius: var(--radius-sm);\r\n    color: #e0e0e0;\r\n    font-size: 14px; /* Reduced from 16px */\r\n    cursor: pointer;\r\n    transition: all 0.2s;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    outline: none;\r\n}\r\n\r\n.control-btn:hover:not(:disabled) {\r\n    background: #1d1d1d;\r\n    border-color: var(--accent-color);\r\n    transform: scale(1.05);\r\n}\r\n\r\n.control-btn:active:not(:disabled) {\r\n    transform: scale(0.95);\r\n}\r\n\r\n.control-btn:focus:not(:disabled) {\r\n    border-color: var(--accent-color);\r\n    box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\r\n}\r\n\r\n.control-btn:disabled {\r\n    opacity: 0.3;\r\n    cursor: not-allowed;\r\n}\r\n\r\n.control-btn.active {\r\n    background: rgba(76, 175, 80, 0.2);\r\n    border-color: var(--accent-color);\r\n    color: var(--accent-color);\r\n}\r\n\r\n.speed-control {\r\n    margin-left: auto;\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 4px; /* Reduced from 6px */\r\n}\r\n\r\n.speed-control label {\r\n    font-size: 10px; /* Reduced from 11px */\r\n    color: var(--text-secondary);\r\n    font-family: 'SF Mono', Monaco, 'Cascadia Code', monospace;\r\n}\r\n\r\n.speed-select {\r\n    padding: 3px 6px; /* Reduced from 4px 6px */\r\n    background: #1a1a1a;\r\n    border: 1px solid rgba(255, 255, 255, 0.1);\r\n    border-radius: var(--radius-sm);\r\n    color: #e0e0e0;\r\n    font-size: 10px; /* Reduced from 11px */\r\n    font-family: 'SF Mono', Monaco, 'Cascadia Code', monospace;\r\n    cursor: pointer;\r\n    outline: none;\r\n}\r\n\r\n.speed-select:focus {\r\n    border-color: var(--accent-color);\r\n    box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\r\n}\r\n\r\n/* Timeline - RESTORED STYLING */\r\n.timeline-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 4px; /* Reduced from 6px */\r\n}\r\n\r\n.time-display {\r\n    display: flex;\r\n    justify-content: center;\r\n    font-size: 10px; /* Reduced from 11px */\r\n    color: var(--text-secondary);\r\n    font-family: 'SF Mono', Monaco, 'Cascadia Code', monospace;\r\n}\r\n\r\n.timeline {\r\n    position: relative;\r\n    height: 20px; /* Reduced from 24px */\r\n    background: #1a1a1a;\r\n    border: 1px solid rgba(255, 255, 255, 0.1);\r\n    border-radius: 10px; /* Adjusted for smaller height */\r\n    overflow: hidden;\r\n}\r\n\r\n.time-slider {\r\n    position: relative;\r\n    width: 100%;\r\n    height: 100%;\r\n    -webkit-appearance: none;\r\n    appearance: none;\r\n    background: transparent;\r\n    cursor: pointer;\r\n    z-index: 2;\r\n    outline: none;\r\n}\r\n\r\n.time-slider::-webkit-slider-thumb {\r\n    width: 14px; /* Reduced from 16px */\r\n    height: 14px; /* Reduced from 16px */\r\n    background: var(--accent-color);\r\n    border-radius: 50%;\r\n    cursor: pointer;\r\n    border: 2px solid white;\r\n    box-shadow: 0 2px 4px rgba(0,0,0,0.3);\r\n}\r\n\r\n.time-slider::-moz-range-thumb {\r\n    width: 14px; /* Reduced from 16px */\r\n    height: 14px; /* Reduced from 16px */\r\n    background: var(--accent-color);\r\n    border-radius: 50%;\r\n    cursor: pointer;\r\n    border: 2px solid white;\r\n    box-shadow: 0 2px 4px rgba(0,0,0,0.3);\r\n}\r\n\r\n.timeline-progress {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    height: 100%;\r\n    background: linear-gradient(90deg, var(--accent-color), var(--accent-light));\r\n    border-radius: 12px;\r\n    transition: width 0.1s;\r\n    pointer-events: none;\r\n}\r\n\r\n/* Animation List with Working Scrolling */\r\n.animation-list {\r\n    flex: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    background: var(--bg-secondary);\r\n    border-radius: var(--radius-sm);\r\n    overflow: hidden;\r\n    min-height: 100px; /* Reduced from 120px */\r\n    /* Remove max-height to allow it to grow */\r\n}\r\n\r\n.list-header {\r\n    padding: 6px 10px; /* Reduced from 8px 12px */\r\n    background: #1a1a1a;\r\n    border-bottom: 1px solid var(--border-color);\r\n    font-size: 10px; /* Reduced from 11px */\r\n    font-weight: 600;\r\n    color: var(--text-secondary);\r\n    font-family: 'SF Mono', Monaco, 'Cascadia Code', monospace;\r\n    text-transform: uppercase;\r\n    letter-spacing: 0.5px;\r\n    flex-shrink: 0;\r\n}\r\n\r\n.list-content {\r\n    flex: 1;\r\n    overflow-y: auto;\r\n    overflow-x: hidden;\r\n    padding: 2px; /* Reduced from 4px */\r\n    min-height: 0;\r\n    /* Remove max-height to allow natural growth */\r\n}\r\n\r\n/* Working Scrollbar Styling */\r\n.list-content {\r\n    scrollbar-width: thin;\r\n    scrollbar-color: #4CAF50 #2a2a2a;\r\n}\r\n\r\n.list-content::-webkit-scrollbar {\r\n    width: 8px; /* Reduced from 12px */\r\n    background: #0a0a0a;\r\n}\r\n\r\n.list-content::-webkit-scrollbar-track {\r\n    background: #1a1a1a;\r\n    border-radius: 4px;\r\n    margin: 1px;\r\n}\r\n\r\n.list-content::-webkit-scrollbar-thumb {\r\n    background: #4CAF50;\r\n    border-radius: 4px;\r\n    border: 1px solid #1a1a1a; /* Reduced from 2px */\r\n    min-height: 20px;\r\n}\r\n\r\n.list-content::-webkit-scrollbar-thumb:hover {\r\n    background: #66BB6A;\r\n}\r\n\r\n.list-content::-webkit-scrollbar-thumb:active {\r\n    background: #388E3C;\r\n}\r\n\r\n/* Animation Items - RESTORED STYLING */\r\n.animation-item {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 6px; /* Reduced from 8px */\r\n    padding: 4px 6px; /* Reduced from 6px 8px */\r\n    margin-bottom: 1px; /* Reduced from 2px */\r\n    margin-right: 2px; /* Reduced from 4px */\r\n    background: #1a1a1a;\r\n    border: 1px solid transparent;\r\n    border-radius: var(--radius-sm);\r\n    cursor: pointer;\r\n    transition: all 0.2s;\r\n}\r\n\r\n.animation-item:hover {\r\n    background: #1d1d1d;\r\n    border-color: rgba(255, 255, 255, 0.1);\r\n    transform: translateX(2px);\r\n}\r\n\r\n.animation-item.active {\r\n    background: rgba(76, 175, 80, 0.15);\r\n    border-left: 3px solid var(--accent-color);\r\n    border-color: rgba(76, 175, 80, 0.3);\r\n}\r\n\r\n.anim-icon {\r\n    font-size: 12px; /* Reduced from 14px */\r\n    filter: drop-shadow(0 1px 1px rgba(0,0,0,0.3));\r\n    flex-shrink: 0;\r\n}\r\n\r\n.anim-name {\r\n    flex: 1;\r\n    font-size: 10px; /* Reduced from 11px */\r\n    color: #e0e0e0;\r\n    font-family: 'SF Mono', Monaco, 'Cascadia Code', monospace;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n    min-width: 0;\r\n}\r\n\r\n.anim-duration {\r\n    font-size: 9px; /* Reduced from 10px */\r\n    color: var(--text-muted);\r\n    font-family: 'SF Mono', Monaco, 'Cascadia Code', monospace;\r\n    flex-shrink: 0;\r\n}\r\n\r\n.empty-state {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 16px; /* Reduced from 24px */\r\n    color: var(--text-muted);\r\n    font-size: 10px; /* Reduced from 11px */\r\n    font-family: 'SF Mono', Monaco, 'Cascadia Code', monospace;\r\n    text-align: center;\r\n}\r\n\r\n/* Responsive adjustments */\r\n@media (max-height: 600px) {\r\n    .animation-list {\r\n        min-height: 80px;\r\n    }\r\n    \r\n    .animation-controls {\r\n        gap: 8px;\r\n        padding: 8px;\r\n    }\r\n}",
      "texture": "/* FILE: editor/z3d-object-editor/templates/styles/texture.css */\r\n/* Texture Viewer Styles */\r\n\r\n.texture-controls {\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100%;\r\n    padding: 8px; /* Reduced from 12px */\r\n    gap: 8px; /* Reduced from 12px */\r\n    background: var(--bg-tertiary);\r\n}\r\n\r\n/* Compact Texture Header - side by side layout */\r\n.texture-header {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 8px;\r\n    padding-bottom: 6px;\r\n    border-bottom: 1px solid var(--border-color);\r\n}\r\n\r\n.texture-select {\r\n    flex: 0 0 140px; /* Fixed width for select */\r\n    padding: 4px 8px;\r\n    background: var(--bg-primary);\r\n    border: 1px solid var(--border-color);\r\n    border-radius: var(--radius-sm);\r\n    color: var(--text-primary);\r\n    font-size: 11px;\r\n    cursor: pointer;\r\n}\r\n\r\n.texture-select:disabled {\r\n    opacity: 0.5;\r\n    cursor: not-allowed;\r\n}\r\n\r\n.texture-info {\r\n    flex: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 2px;\r\n    min-width: 0; /* Allow text truncation */\r\n}\r\n\r\n.texture-name {\r\n    font-size: 12px;\r\n    font-weight: 600;\r\n    color: var(--text-primary);\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n}\r\n\r\n.texture-stats {\r\n    display: flex;\r\n    gap: 8px;\r\n    font-size: 10px;\r\n    color: var(--text-muted);\r\n}\r\n\r\n.texture-format,\r\n.texture-dimensions,\r\n.texture-size {\r\n    font-family: monospace;\r\n    white-space: nowrap;\r\n}\r\n\r\n.texture-format {\r\n    color: var(--accent-color);\r\n}\r\n\r\n/* Texture Viewer */\r\n.texture-viewer {\r\n    flex: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    background: var(--bg-secondary);\r\n    border-radius: var(--radius-md);\r\n    overflow: hidden;\r\n}\r\n\r\n.viewer-controls {\r\n    display: flex;\r\n    gap: 8px;\r\n    align-items: center;\r\n    padding: 8px;\r\n    background: var(--bg-primary);\r\n    border-bottom: 1px solid var(--border-color);\r\n}\r\n\r\n.zoom-btn {\r\n    padding: 4px 8px;\r\n    background: var(--bg-secondary);\r\n    border: 1px solid var(--border-color);\r\n    border-radius: var(--radius-sm);\r\n    color: var(--text-primary);\r\n    font-size: 12px;\r\n    cursor: pointer;\r\n    transition: all 0.2s;\r\n}\r\n\r\n/* Pixel mode button active state */\r\n.zoom-btn.active {\r\n    background: rgba(76, 175, 80, 0.2);\r\n    border-color: var(--accent-color);\r\n    color: var(--accent-color);\r\n}\r\n\r\n.zoom-btn:hover {\r\n    background: var(--bg-hover);\r\n    border-color: var(--accent-color);\r\n}\r\n\r\n/* Remove persistent focus outline on buttons */\r\n.zoom-btn:focus {\r\n    outline: none;\r\n}\r\n\r\n/* Optional: Add a brief focus indication that fades */\r\n.zoom-btn:focus-visible {\r\n    outline: 2px solid var(--accent-color);\r\n    outline-offset: 2px;\r\n    animation: fadeOutline 0.5s ease-out forwards;\r\n}\r\n\r\n@keyframes fadeOutline {\r\n    0% {\r\n        outline-color: var(--accent-color);\r\n        outline-offset: 2px;\r\n    }\r\n    100% {\r\n        outline-color: transparent;\r\n        outline-offset: 4px;\r\n    }\r\n}\r\n\r\n.zoom-level {\r\n    margin-left: auto;\r\n    padding: 4px 8px;\r\n    background: var(--bg-primary);\r\n    border-radius: var(--radius-sm);\r\n    font-size: 11px;\r\n    font-family: monospace;\r\n    color: var(--text-secondary);\r\n}\r\n\r\n.canvas-container {\r\n    flex: 1;\r\n    position: relative;\r\n    overflow: hidden;\r\n    background-image: \r\n        repeating-conic-gradient(#1a1a1a 0% 25%, #242424 0% 50%) \r\n        50% / 20px 20px;\r\n}\r\n\r\n.texture-canvas {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    cursor: grab;\r\n    /* Removed pixelated rendering - now controlled by .pixel-art class */\r\n}\r\n\r\n/* Pixel art rendering mode - only when toggled on */\r\n.texture-canvas.pixel-art {\r\n    image-rendering: pixelated;\r\n    image-rendering: -moz-crisp-edges;\r\n    image-rendering: crisp-edges;\r\n}\r\n\r\n.texture-canvas:active {\r\n    cursor: grabbing;\r\n}\r\n\r\n.texture-placeholder {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    gap: 12px;\r\n    color: var(--text-muted);\r\n    font-size: 12px;\r\n    background: var(--bg-primary);\r\n}\r\n\r\n.texture-placeholder span:first-child {\r\n    font-size: 32px;\r\n    opacity: 0.5;\r\n}\r\n\r\n/* Texture List */\r\n.texture-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    background: var(--bg-secondary);\r\n    border-radius: var(--radius-md);\r\n    overflow: hidden;\r\n    max-height: 200px;\r\n}\r\n\r\n.list-header {\r\n    padding: 8px 12px;\r\n    background: var(--bg-primary);\r\n    border-bottom: 1px solid var(--border-color);\r\n    font-size: 11px;\r\n    font-weight: 600;\r\n    color: var(--text-secondary);\r\n    text-transform: uppercase;\r\n    letter-spacing: 0.5px;\r\n}\r\n\r\n.list-content {\r\n    flex: 1;\r\n    overflow-y: auto;\r\n    padding: 4px;\r\n}\r\n\r\n.texture-item {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 8px;\r\n    padding: 6px 8px;\r\n    margin-bottom: 2px;\r\n    background: var(--bg-primary);\r\n    border-radius: var(--radius-sm);\r\n    cursor: pointer;\r\n    transition: all 0.2s;\r\n}\r\n\r\n.texture-item:hover {\r\n    background: var(--bg-hover);\r\n    transform: translateX(2px);\r\n}\r\n\r\n.texture-item.active {\r\n    background: rgba(76, 175, 80, 0.2);\r\n    border-left: 3px solid var(--accent-color);\r\n}\r\n\r\n.tex-icon {\r\n    font-size: 14px;\r\n    filter: drop-shadow(0 1px 1px rgba(0,0,0,0.3));\r\n}\r\n\r\n.tex-name {\r\n    flex: 1;\r\n    font-size: 11px;\r\n    color: var(--text-primary);\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n}\r\n\r\n.tex-info {\r\n    font-size: 10px;\r\n    color: var(--text-muted);\r\n    font-family: monospace;\r\n}\r\n\r\n.tex-type {\r\n    font-size: 9px;\r\n    padding: 2px 4px;\r\n    background: var(--bg-secondary);\r\n    border-radius: var(--radius-sm);\r\n    color: var(--accent-color);\r\n    text-transform: uppercase;\r\n}\r\n\r\n.empty-state {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 24px;\r\n    color: var(--text-muted);\r\n    font-size: 11px;\r\n    text-align: center;\r\n}\r\n\r\n/* Scrollbar */\r\n.list-content::-webkit-scrollbar {\r\n    width: 4px;\r\n}\r\n\r\n.list-content::-webkit-scrollbar-track {\r\n    background: transparent;\r\n}\r\n\r\n.list-content::-webkit-scrollbar-thumb {\r\n    background: var(--border-color);\r\n    border-radius: 2px;\r\n}\r\n\r\n.list-content::-webkit-scrollbar-thumb:hover {\r\n    background: var(--border-light);\r\n}",
      "topbar": "/* FILE: editor/z3d-object-editor/templates/styles/topbar.css */\r\n/* Scene Topbar Styles with Three Container Layout */\r\n\r\n/* Scene Top Bar Container */\r\n.scene-topbar {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    width: 100%;\r\n    height: 36px;\r\n    background: rgba(37, 37, 37, 0.95);\r\n    backdrop-filter: blur(10px);\r\n    z-index: 1000 !important;\r\n    pointer-events: auto;\r\n    border-bottom: 1px solid var(--border-color);\r\n    box-sizing: border-box;\r\n}\r\n\r\n/* Controls Wrapper - Can be hidden/shown as a group */\r\n.topbar-controls-wrapper {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    height: 100%;\r\n    padding: 0 12px;\r\n    width: 100%;\r\n    box-sizing: border-box;\r\n}\r\n\r\n/* Three Container Layout */\r\n.topbar-left,\r\n.topbar-center,\r\n.topbar-right {\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\n.topbar-left {\r\n    flex: 0 0 auto;\r\n    justify-content: flex-start;\r\n    gap: var(--spacing-xs);\r\n}\r\n\r\n.topbar-center {\r\n    flex: 1 1 auto;\r\n    justify-content: center;\r\n    text-align: center;\r\n    gap: var(--spacing-xs);\r\n}\r\n\r\n.topbar-right {\r\n    flex: 0 0 auto;\r\n    justify-content: flex-end;\r\n    margin-left: auto;\r\n    display: flex;\r\n    gap: 4px;\r\n}\r\n\r\n/* Add spacing between buttons in topbar-right */\r\n.topbar-right > * + * {\r\n    margin-left: 4px;\r\n}\r\n\r\n/* Topbar Buttons */\r\n.topbar-btn {\r\n    display: inline-flex;\r\n    align-items: center;\r\n    gap: 4px;\r\n    padding: 4px 10px;\r\n    background: rgba(255, 255, 255, 0.05);\r\n    border: 1px solid var(--border-color);\r\n    border-radius: var(--radius-sm);\r\n    color: var(--text-secondary);\r\n    font-size: 12px;\r\n    font-weight: 500;\r\n    cursor: pointer;\r\n    transition: all var(--transition-fast);\r\n    white-space: nowrap;\r\n    user-select: none;\r\n}\r\n\r\n.topbar-btn:hover:not(:disabled) {\r\n    background: rgba(255, 255, 255, 0.08);\r\n    border-color: var(--border-light);\r\n    color: var(--text-primary);\r\n}\r\n\r\n/* Remove focus outline and force blur */\r\n.topbar-btn:focus {\r\n    outline: none;\r\n}\r\n\r\n.topbar-btn:focus-visible {\r\n    outline: none;\r\n}\r\n\r\n/* Active state - matches animation control buttons */\r\nbutton.topbar-btn.active,\r\n.topbar-btn.active {\r\n    background: rgba(76, 175, 80, 0.2) !important;\r\n    border: 1px solid #4CAF50 !important;\r\n    color: #4CAF50 !important;\r\n    box-shadow: 0 0 0 1px #4CAF50 !important;\r\n}\r\n\r\nbutton.topbar-btn.active:hover,\r\n.topbar-btn.active:hover {\r\n    background: rgba(76, 175, 80, 0.3) !important;\r\n    border: 1px solid #4CAF50 !important;\r\n    color: #4CAF50 !important;\r\n    box-shadow: 0 0 0 1px #4CAF50 !important;\r\n}\r\n\r\n/* Make icon and text inherit color */\r\nbutton.topbar-btn.active .btn-icon,\r\nbutton.topbar-btn.active .btn-text,\r\n.topbar-btn.active .btn-icon,\r\n.topbar-btn.active .btn-text {\r\n    color: #4CAF50 !important;\r\n}\r\n\r\n.topbar-btn:disabled {\r\n    opacity: 0.3;\r\n    cursor: not-allowed;\r\n}\r\n\r\n.topbar-btn .btn-icon {\r\n    font-size: 14px;\r\n    line-height: 1;\r\n}\r\n\r\n.topbar-btn .btn-text {\r\n    font-size: 11px;\r\n    text-transform: uppercase;\r\n    letter-spacing: 0.5px;\r\n}\r\n\r\n/* Click feedback animation */\r\n.topbar-btn:active {\r\n    transform: scale(0.95);\r\n}\r\n\r\n.topbar-btn.clicked {\r\n    animation: buttonClick 0.3s ease-out;\r\n}\r\n\r\n@keyframes buttonClick {\r\n    0% {\r\n        box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.5);\r\n    }\r\n    100% {\r\n        box-shadow: 0 0 0 4px rgba(76, 175, 80, 0);\r\n    }\r\n}\r\n\r\n/* Stats Overlay Styles */\r\n.stats-overlay {\r\n    position: absolute;\r\n    top: 50px;\r\n    left: 10px;\r\n    background: rgba(30, 30, 30, 0.95);\r\n    backdrop-filter: blur(10px);\r\n    border: 1px solid var(--border-color);\r\n    border-radius: var(--radius-md);\r\n    padding: 0;\r\n    z-index: 110;\r\n    pointer-events: none;\r\n    user-select: none;\r\n    min-width: 180px;\r\n    box-shadow: var(--shadow-medium);\r\n    display: none; /* Hidden by default */\r\n}\r\n\r\n.stats-overlay.visible {\r\n    display: block;\r\n}\r\n\r\n.stats-header {\r\n    padding: 8px 12px;\r\n    background: var(--bg-secondary);\r\n    border-bottom: 1px solid var(--border-color);\r\n    border-radius: var(--radius-md) var(--radius-md) 0 0;\r\n    font-size: 11px;\r\n    font-weight: 600;\r\n    text-transform: uppercase;\r\n    letter-spacing: 0.5px;\r\n    color: var(--text-secondary);\r\n}\r\n\r\n.stats-content {\r\n    padding: 8px;\r\n}\r\n\r\n.stats-section {\r\n    padding: 4px 0;\r\n    border-bottom: 1px solid rgba(255, 255, 255, 0.05);\r\n}\r\n\r\n.stats-section:last-child {\r\n    border-bottom: none;\r\n}\r\n\r\n.stat-row {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 3px 4px;\r\n    font-size: 11px;\r\n    line-height: 1.3;\r\n}\r\n\r\n.stat-row:hover {\r\n    background: rgba(255, 255, 255, 0.03);\r\n    border-radius: 2px;\r\n}\r\n\r\n.stat-label {\r\n    color: var(--text-muted);\r\n    font-weight: 400;\r\n}\r\n\r\n.stat-value {\r\n    color: var(--text-primary);\r\n    font-weight: 500;\r\n    font-family: 'Consolas', 'Monaco', monospace;\r\n    text-align: right;\r\n}\r\n\r\n/* Special stat value colors */\r\n#stat-fps {\r\n    color: #4CAF50;\r\n}\r\n\r\n#stat-frametime {\r\n    color: #2196F3;\r\n}\r\n\r\n#stat-memory {\r\n    color: #FF9800;\r\n}\r\n\r\n/* Center content styles (for future use) */\r\n.topbar-info {\r\n    font-size: 12px;\r\n    color: var(--text-secondary);\r\n    padding: 4px 12px;\r\n    background: rgba(0, 0, 0, 0.2);\r\n    border-radius: var(--radius-sm);\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    max-width: 300px;\r\n}\r\n\r\n/* Responsive adjustments */\r\n@media (max-width: 768px) {\r\n    .topbar-btn .btn-text {\r\n        display: none;\r\n    }\r\n    \r\n    .topbar-btn {\r\n        padding: 4px 8px;\r\n    }\r\n    \r\n    .topbar-controls-wrapper {\r\n        padding: 0 4px;\r\n    }\r\n}"
    },
    "scripts": {
      "core": {
        "eventEmitter": "/* FILE: editor/z3d-object-editor/templates/scripts/core/event-emitter.js */\r\nclass EventEmitter {\r\n    constructor() {\r\n        this.events = {};\r\n    }\r\n    \r\n    on(event, callback) {\r\n        if (!this.events[event]) {\r\n            this.events[event] = [];\r\n        }\r\n        this.events[event].push(callback);\r\n    }\r\n    \r\n    off(event, callback) {\r\n        if (!this.events[event]) return;\r\n        this.events[event] = this.events[event].filter(cb => cb !== callback);\r\n    }\r\n    \r\n    emit(event, data) {\r\n        if (this.events[event]) {\r\n            this.events[event].forEach(callback => {\r\n                try {\r\n                    callback(data);\r\n                } catch (error) {\r\n                    console.error(`Event handler error for '${event}':`, error);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    \r\n    once(event, callback) {\r\n        const wrapper = (data) => {\r\n            callback(data);\r\n            this.off(event, wrapper);\r\n        };\r\n        this.on(event, wrapper);\r\n    }\r\n}",
        "uiManager": "/**\r\n * UI Manager - CLEANED VERSION\r\n * Simplified event handling and message flow\r\n */\r\n\r\nclass UIManager extends EventEmitter {\r\n    constructor(config) {\r\n        super();\r\n        this.config = config;\r\n        this.components = new Map();\r\n        this.isInitialized = false;\r\n        this._sendThrottleMs = 16; // ~60fps\r\n        this._lastSendTime = 0;\r\n    }\r\n    \r\n    async initialize() {\r\n        try {\r\n            await this._initializeComponents();\r\n            this._setupTabSwitching();\r\n            this._setupHelpMenu();\r\n            this._updateUIState();\r\n            \r\n            this.isInitialized = true;\r\n            this.emit('initialized');\r\n            \r\n        } catch (error) {\r\n            console.error('[UIManager] Initialization failed:', error);\r\n            throw error;\r\n        }\r\n    }\r\n    \r\n    async _initializeComponents() {\r\n        const components = [\r\n            { name: 'objectControls', class: ObjectControls, container: 'object-controls' },\r\n            { name: 'viewportControls', class: ViewportControls, container: 'viewport-controls' },\r\n            { name: 'outlinerControls', class: OutlinerControls, container: 'node-tree' },\r\n            { name: 'animationControls', class: AnimationControls, container: 'animation-viewer' },\r\n            { name: 'resizer', class: Resizer, container: null }\r\n        ];\r\n        \r\n        for (const comp of components) {\r\n            try {\r\n                const container = comp.container ? document.getElementById(comp.container) : null;\r\n                if (comp.container && !container) continue;\r\n                \r\n                const instance = new comp.class(this.config);\r\n                await instance.initialize(container);\r\n                this.components.set(comp.name, instance);\r\n                \r\n                // Set on window for global access\r\n                if (comp.name === 'objectControls') {\r\n                    window.objectControls = instance;\r\n                } else if (comp.name === 'viewportControls') {\r\n                    window.viewportControls = instance;\r\n                }\r\n                \r\n                // Setup single event handler per component\r\n                this._setupComponentEvents(comp.name, instance);\r\n                \r\n            } catch (error) {\r\n                console.error(`[UIManager] ${comp.name} failed:`, error);\r\n            }\r\n        }\r\n    }\r\n    \r\n    _setupComponentEvents(name, instance) {\r\n        if (typeof instance.on !== 'function') return;\r\n        \r\n        // Single handler for all transform changes\r\n        instance.on('transforms-changed', (data) => {\r\n            // Only handle if it's from user interaction (source: 'editor')\r\n            if (data.source === 'editor') {\r\n                this._handleTransformsChange(data);\r\n            }\r\n        });\r\n        \r\n        // Settings changes\r\n        instance.on('setting-changed', (data) => {\r\n            if (window.worker) {\r\n                window.worker.postMessage({\r\n                    type: 'UPDATE_VIEWPORT_SETTING',\r\n                    data: data\r\n                });\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * Single handler for all transform changes\r\n     */\r\n    _handleTransformsChange(data) {\r\n        const now = Date.now();\r\n        if (now - this._lastSendTime < this._sendThrottleMs) return;\r\n        this._lastSendTime = now;\r\n        \r\n        // Send to worker for rendering\r\n        if (window.worker) {\r\n            window.worker.postMessage({\r\n                type: 'UPDATE_STATE',\r\n                data: {\r\n                    transform: data.transform,\r\n                    deltaTransform: data.deltaTransform\r\n                }\r\n            });\r\n        }\r\n        \r\n        // Send to parent (C3)\r\n        if (window.sendTransformsToParent) {\r\n            window.sendTransformsToParent(data.transform, data.deltaTransform);\r\n        }\r\n    }\r\n    \r\n    _setupTabSwitching() {\r\n        document.querySelectorAll('.tab-btn').forEach(btn => {\r\n            btn.addEventListener('click', (e) => {\r\n                const tabName = e.currentTarget.getAttribute('data-tab');\r\n                if (!tabName) return;\r\n                \r\n                // Update button states\r\n                document.querySelectorAll('.tab-btn').forEach(b => b.classList.remove('active'));\r\n                e.currentTarget.classList.add('active');\r\n                \r\n                // Update panel visibility\r\n                document.querySelectorAll('.tab-panel').forEach(p => p.classList.remove('active'));\r\n                const panel = document.getElementById(`${tabName}-tab`);\r\n                if (panel) panel.classList.add('active');\r\n            });\r\n        });\r\n    }\r\n    \r\n    _setupHelpMenu() {\r\n        const helpBtn = document.getElementById('help-btn');\r\n        const helpDropdown = document.getElementById('help-dropdown');\r\n        \r\n        if (helpBtn && helpDropdown) {\r\n            helpBtn.addEventListener('click', (e) => {\r\n                e.stopPropagation();\r\n                helpDropdown.classList.toggle('show');\r\n            });\r\n            \r\n            document.addEventListener('click', () => {\r\n                helpDropdown.classList.remove('show');\r\n            });\r\n        }\r\n    }\r\n    \r\n    _updateUIState() {\r\n        const infoEl = document.getElementById('instance-info');\r\n        if (infoEl) {\r\n            const instanceId = this.config.instanceId || 0;\r\n            const modelPath = this.config.modelPath || 'No Model';\r\n            infoEl.textContent = `Instance ${instanceId} | ${modelPath.split('/').pop()}`;\r\n        }\r\n        \r\n        const statusEl = document.getElementById('status-message');\r\n        if (statusEl) {\r\n            statusEl.textContent = 'Ready';\r\n        }\r\n    }\r\n    \r\n    getComponent(name) {\r\n        return this.components.get(name);\r\n    }\r\n    \r\n    dispose() {\r\n        this.components.forEach(component => {\r\n            if (typeof component.dispose === 'function') {\r\n                component.dispose();\r\n            }\r\n        });\r\n        this.components.clear();\r\n        this.emit('disposed');\r\n    }\r\n}"
      },
      "components": {
        "objectControls": `/**\r
 * Object Controls - COMPLETE CLEANED VERSION\r
 * All features preserved, single state object, unified event emission\r
 */\r
\r
class ObjectControls extends EventEmitter {\r
    constructor(config) {\r
        super();\r
        this.config = config;\r
        this.livePreview = true;\r
        this._debug = !!(this.config?.debugMode || (typeof window !== 'undefined' && window.Z3D_DEBUG));\r
        this._dlog = (...args) => { if (this._debug) console.log(...args); };\r
        \r
        // UI update coordination\r
        this._isBatching = false;\r
        this._needsUIUpdate = false;\r
        this._uiScheduled = false;\r
        this._lastEmittedTransform = null;\r
        \r
        // Single unified state\r
        // Get default unitScale from config or use 64 as fallback\r
        const defaultUnitScale = this.config?.unitScale || 64;\r
        \r
        this.state = {\r
            transform: {\r
                position: { x: 0, y: 0, z: 0 },\r
                rotation: { x: 0, y: 0, z: 0 },\r
                scale: { x: 1, y: 1, z: 1 },\r
                uniformScale: 1,\r
                unitScale: defaultUnitScale,\r
                rotationOrder: 'ZXY'\r
            },\r
            deltaTransform: {\r
                position: { x: 0, y: 0, z: 0 },\r
                rotation: { x: 0, y: 0, z: 0 },\r
                scale: { x: 1, y: 1, z: 1 }\r
            },\r
            wireframe: false\r
        };\r
        \r
        this.isInitialized = false;\r
        this.collapsedSections = new Set();\r
    }\r
    \r
    async initialize() {\r
        const container = document.getElementById('object-controls');\r
        if (!container) {\r
            throw new Error('Object controls container not found');\r
        }\r
        \r
        container.innerHTML = this._generateHTML();\r
        this._setupEventListeners();\r
        this._updateUI();\r
        \r
        // Initialize drag inputs after controls are created\r
        this.initializeDragInputs();\r
        \r
        this.isInitialized = true;\r
        this._dlog('[ObjectControls] \u2705 Initialized');\r
    }\r
    \r
    initializeDragInputs() {\r
        // Initialize all drag inputs\r
        if (window.initializeDragInputs) {\r
            window.initializeDragInputs();\r
        }\r
        \r
        // Listen for value changes from drag inputs\r
        const container = document.getElementById('object-controls');\r
        if (container) {\r
            container.addEventListener('drag-value-change', (e) => {\r
                const { value, property, isFinal } = e.detail;\r
                \r
                // Debug log for position X\r
                if (property === 'transform.position.x') {\r
                    if (!this._draggingX) {\r
                        this._draggingX = true;\r
                        this._dlog('[ObjectControls][X] Drag START: value =', value);\r
                    }\r
                    this._dlog('[ObjectControls][X] Drag UPDATE: value =', value);\r
                }\r
                \r
                // Always update on drag/typing\r
                this._handlePropertyChange(property, value);\r
                \r
                // Reset drag flag when done\r
                if (isFinal && property === 'transform.position.x') {\r
                    this._draggingX = false;\r
                    this._dlog('[ObjectControls][X] Drag END: value =', value);\r
                }\r
            });\r
        }\r
        \r
        this._dlog('[ObjectControls] Drag inputs initialized');\r
    }\r
    \r
    _generateHTML() {\r
        return \`\r
        <div class="object-controls compact-layout">\r
            <!-- Transform Section -->\r
            <div class="collapsible-section" data-section="transform">\r
                <div class="section-header" data-toggle="transform">\r
                    <span class="collapse-icon">\u25BE</span>\r
                    <span class="section-title">Transform</span>\r
                </div>\r
                <div class="section-content" id="transform-content">\r
                    <!-- Position Vector -->\r
                    <div class="vector-controls position-group">\r
                        <div class="vector-row">\r
                            <label>Position X</label>\r
                            <input type="number" id="pos-x" step="1" class="drag-input" data-prop="transform.position.x">\r
                            <span class="unit-spacer"></span>\r
                        </div>\r
                        <div class="vector-row">\r
                            <label>Y</label>\r
                            <input type="number" id="pos-y" step="1" class="drag-input" data-prop="transform.position.y">\r
                            <span class="unit-spacer"></span>\r
                        </div>\r
                        <div class="vector-row">\r
                            <label>Z</label>\r
                            <input type="number" id="pos-z" step="1" class="drag-input" data-prop="transform.position.z">\r
                            <span class="unit-spacer"></span>\r
                        </div>\r
                    </div>\r
                    <!-- Rotation Vector -->\r
                    <div class="vector-controls rotation-group">\r
                        <div class="vector-row">\r
                            <label>Rotation X</label>\r
                            <input type="number" id="rot-x" step="1" min="0" max="360" class="drag-input" data-prop="transform.rotation.x">\r
                            <span class="unit">\xB0</span>\r
                        </div>\r
                        <div class="vector-row">\r
                            <label>Y</label>\r
                            <input type="number" id="rot-y" step="1" min="0" max="360" class="drag-input" data-prop="transform.rotation.y">\r
                            <span class="unit">\xB0</span>\r
                        </div>\r
                        <div class="vector-row">\r
                            <label>Z</label>\r
                            <input type="number" id="rot-z" step="1" min="0" max="360" class="drag-input" data-prop="transform.rotation.z">\r
                            <span class="unit">\xB0</span>\r
                        </div>\r
                    </div>\r
                    <!-- Scale Scalar + Vector -->\r
                    <div class="scalar-controls">\r
                        <div class="control-row inline field-row">\r
                            <label>Unit Scale</label>\r
                            <input type="number" id="unit-scale" step="1" min="1" class="drag-input" data-prop="transform.unitScale">\r
                            <span class="unit-spacer"></span>\r
                        </div>\r
                        <div class="control-row inline field-row">\r
                            <label>Scale</label>\r
                            <input type="number" id="master-scale" step="0.1" min="0.01" class="drag-input" data-prop="transform.uniformScale">\r
                            <span class="unit-spacer"></span>\r
                        </div>\r
                    </div>\r
                    <div class="vector-controls scale-vector-group">\r
                        <div class="vector-row">\r
                            <label>Scale X</label>\r
                            <input type="number" id="scale-x" step="0.1" min="0.01" class="drag-input" data-prop="transform.scale.x">\r
                            <span class="unit-spacer"></span>\r
                        </div>\r
                        <div class="vector-row">\r
                            <label>Y</label>\r
                            <input type="number" id="scale-y" step="0.1" min="0.01" class="drag-input" data-prop="transform.scale.y">\r
                            <span class="unit-spacer"></span>\r
                        </div>\r
                        <div class="vector-row">\r
                            <label>Z</label>\r
                            <input type="number" id="scale-z" step="0.1" min="0.01" class="drag-input" data-prop="transform.scale.z">\r
                            <span class="unit-spacer"></span>\r
                        </div>\r
                    </div>\r
                    <div class="control-row inline field-row">\r
                        <label>Rotation Order</label>\r
                        <select id="rotation-order" data-prop="transform.rotationOrder">\r
                            <option value="XYZ">XYZ Euler</option>\r
                            <option value="XZY">XZY Euler</option>\r
                            <option value="YXZ">YXZ Euler</option>\r
                            <option value="YZX">YZX Euler</option>\r
                            <option value="ZXY">ZXY Euler</option>\r
                            <option value="ZYX">ZYX Euler</option>\r
                        </select>\r
                        <span class="unit-spacer"></span>\r
                    </div>\r
                </div>\r
            </div>\r
            <!-- Delta Transform Section -->\r
            <div class="collapsible-section" data-section="delta-transform">\r
                <div class="section-header" data-toggle="delta-transform">\r
                    <span class="collapse-icon">\u25BE</span>\r
                    <span class="section-title">Delta Transform</span>\r
                </div>\r
                <div class="section-content" id="delta-transform-content">\r
                    <!-- Delta Position Vector -->\r
                    <div class="vector-controls delta-position-group">\r
                        <div class="vector-row">\r
                            <label>Position X</label>\r
                            <input type="number" id="delta-pos-x" step="0.1" class="drag-input" data-prop="deltaTransform.position.x">\r
                            <span class="unit-spacer"></span>\r
                        </div>\r
                        <div class="vector-row">\r
                            <label>Y</label>\r
                            <input type="number" id="delta-pos-y" step="0.1" class="drag-input" data-prop="deltaTransform.position.y">\r
                            <span class="unit-spacer"></span>\r
                        </div>\r
                        <div class="vector-row">\r
                            <label>Z</label>\r
                            <input type="number" id="delta-pos-z" step="0.1" class="drag-input" data-prop="deltaTransform.position.z">\r
                            <span class="unit-spacer"></span>\r
                        </div>\r
                    </div>\r
                    <!-- Delta Rotation Vector -->\r
                    <div class="vector-controls delta-rotation-group">\r
                        <div class="vector-row">\r
                            <label>Rotation X</label>\r
                            <input type="number" id="delta-rot-x" step="1" class="drag-input" data-prop="deltaTransform.rotation.x">\r
                            <span class="unit">\xB0</span>\r
                        </div>\r
                        <div class="vector-row">\r
                            <label>Y</label>\r
                            <input type="number" id="delta-rot-y" step="1" class="drag-input" data-prop="deltaTransform.rotation.y">\r
                            <span class="unit">\xB0</span>\r
                        </div>\r
                        <div class="vector-row">\r
                            <label>Z</label>\r
                            <input type="number" id="delta-rot-z" step="1" class="drag-input" data-prop="deltaTransform.rotation.z">\r
                            <span class="unit">\xB0</span>\r
                        </div>\r
                    </div>\r
                    <!-- Delta Scale Vector -->\r
                    <div class="vector-controls delta-scale-vector-group">\r
                        <div class="vector-row">\r
                            <label>Scale X</label>\r
                            <input type="number" id="delta-scale-x" step="0.1" min="0.01" class="drag-input" data-prop="deltaTransform.scale.x">\r
                            <span class="unit-spacer"></span>\r
                        </div>\r
                        <div class="vector-row">\r
                            <label>Y</label>\r
                            <input type="number" id="delta-scale-y" step="0.1" min="0.01" class="drag-input" data-prop="deltaTransform.scale.y">\r
                            <span class="unit-spacer"></span>\r
                        </div>\r
                        <div class="vector-row">\r
                            <label>Z</label>\r
                            <input type="number" id="delta-scale-z" step="0.1" min="0.01" class="drag-input" data-prop="deltaTransform.scale.z">\r
                            <span class="unit-spacer"></span>\r
                        </div>\r
                    </div>\r
                </div>\r
            </div>\r
        </div>\`;\r
    }\r
    \r
    _setupEventListeners() {\r
        // Section collapse/expand toggles\r
        document.querySelectorAll('.section-header[data-toggle]').forEach(header => {\r
            header.addEventListener('click', (e) => {\r
                const section = e.currentTarget.dataset.toggle;\r
                this._toggleSection(section);\r
            });\r
        });\r
        \r
        // Select change handlers\r
        document.querySelectorAll('select[data-prop]').forEach(select => {\r
            select.addEventListener('change', (e) => {\r
                this._handlePropertyChange(e.target.dataset.prop, e.target.value);\r
            });\r
        });\r
        \r
        // Checkbox change handlers\r
        document.querySelectorAll('input[type="checkbox"][data-prop]').forEach(checkbox => {\r
            checkbox.addEventListener('change', (e) => {\r
                this._handlePropertyChange(e.target.dataset.prop, e.target.checked);\r
            });\r
        });\r
    }\r
    \r
    _toggleSection(sectionName) {\r
        const section = document.querySelector(\`[data-section="\${sectionName}"]\`);\r
        const content = document.getElementById(\`\${sectionName}-content\`);\r
        const icon = section.querySelector('.collapse-icon');\r
        \r
        if (this.collapsedSections.has(sectionName)) {\r
            // Expand\r
            this.collapsedSections.delete(sectionName);\r
            content.style.display = 'block';\r
            icon.textContent = '\u25BE';\r
            section.classList.remove('collapsed');\r
        } else {\r
            // Collapse\r
            this.collapsedSections.add(sectionName);\r
            content.style.display = 'none';\r
            icon.textContent = '\u25B6';\r
            section.classList.add('collapsed');\r
        }\r
    }\r
    \r
    _handlePropertyChange(propPath, value) {\r
        // Try to parse as number for known numeric properties\r
        const numericProps = new Set([\r
            'transform.position.x', 'transform.position.y', 'transform.position.z',\r
            'transform.rotation.x', 'transform.rotation.y', 'transform.rotation.z',\r
            'transform.unitScale', 'transform.uniformScale', \r
            'transform.scale.x', 'transform.scale.y', 'transform.scale.z',\r
            'deltaTransform.position.x', 'deltaTransform.position.y', 'deltaTransform.position.z',\r
            'deltaTransform.rotation.x', 'deltaTransform.rotation.y', 'deltaTransform.rotation.z',\r
            'deltaTransform.scale.x', 'deltaTransform.scale.y', 'deltaTransform.scale.z'\r
        ]);\r
        \r
        let parsedValue = value;\r
        if (numericProps.has(propPath)) {\r
            parsedValue = parseFloat(value);\r
            if (isNaN(parsedValue)) parsedValue = 0;\r
        }\r
        \r
        // Debug log for non-position properties\r
        if (!propPath.includes('position')) {\r
            this._dlog(\`[ObjectControls] Property changed: \${propPath} = \${parsedValue}\`);\r
        }\r
        \r
        // Update internal state\r
        this._setNestedProperty(this.state, propPath, parsedValue);\r
        \r
        // Update UI\r
        this._updateUI();\r
        \r
        // Emit unified event with both transforms\r
        this._emitTransformsChange();\r
    }\r
    \r
    _setNestedProperty(obj, path, value) {\r
        const parts = path.split('.');\r
        let current = obj;\r
        \r
        for (let i = 0; i < parts.length - 1; i++) {\r
            if (!current[parts[i]]) {\r
                current[parts[i]] = {};\r
            }\r
            current = current[parts[i]];\r
        }\r
        \r
        current[parts[parts.length - 1]] = value;\r
    }\r
    \r
    _emitTransformsChange() {\r
        // Calculate final transform for debugging\r
        const finalTransform = this._calculateFinalTransform();\r
        \r
        this._dlog('[ObjectControls] \u{1F4CA} Base transform:', this.state.transform);\r
        this._dlog('[ObjectControls] \u{1F4CA} Delta transform:', this.state.deltaTransform);\r
        this._dlog('[ObjectControls] \u{1F4CA} Final transform (with deltas):', finalTransform);\r
        \r
        // Emit single event with both transforms\r
        this.emit('transforms-changed', {\r
            transform: this.state.transform,\r
            deltaTransform: this.state.deltaTransform,\r
            source: 'editor'\r
        });\r
        \r
        // Store last emitted for echo suppression\r
        this._lastEmittedTransform = {\r
            transform: { ...this.state.transform },\r
            deltaTransform: { ...this.state.deltaTransform }\r
        };\r
    }\r
    \r
    // Calculate final transform values (for debugging/preview)\r
    _calculateFinalTransform() {\r
        const t = this.state.transform;\r
        const dt = this.state.deltaTransform;\r
        \r
        // Position: base + delta\r
        const finalPosition = {\r
            x: t.position.x + dt.position.x,\r
            y: t.position.y + dt.position.y,\r
            z: t.position.z + dt.position.z\r
        };\r
        \r
        // Rotation: base + delta\r
        const finalRotation = {\r
            x: t.rotation.x + dt.rotation.x,\r
            y: t.rotation.y + dt.rotation.y,\r
            z: t.rotation.z + dt.rotation.z\r
        };\r
        \r
        // Scale: base * delta\r
        const finalScale = {\r
            x: t.uniformScale * t.scale.x * dt.scale.x,\r
            y: t.uniformScale * t.scale.y * dt.scale.y,\r
            z: t.uniformScale * t.scale.z * dt.scale.z\r
        };\r
        \r
        return {\r
            position: finalPosition,\r
            rotation: finalRotation,\r
            scale: finalScale,\r
            rotationOrder: t.rotationOrder,\r
            unitScale: t.unitScale\r
        };\r
    }\r
    \r
    _updateUI() {\r
        // Coalesce UI work per-frame\r
        if (this._isBatching) {\r
            this._needsUIUpdate = true;\r
            return;\r
        }\r
        this._scheduleUIUpdate();\r
    }\r
    \r
    _scheduleUIUpdate() {\r
        if (this._uiScheduled) return;\r
        \r
        this._uiScheduled = true;\r
        requestAnimationFrame(() => {\r
            this._uiScheduled = false;\r
            this._renderUI();\r
        });\r
    }\r
    \r
    _renderUI() {\r
        // Update all input values from current state\r
        \r
        // Transform inputs\r
        this._updateInputValue('pos-x', this.state.transform.position.x);\r
        this._updateInputValue('pos-y', this.state.transform.position.y);\r
        this._updateInputValue('pos-z', this.state.transform.position.z);\r
        \r
        this._updateInputValue('rot-x', this.state.transform.rotation.x);\r
        this._updateInputValue('rot-y', this.state.transform.rotation.y);\r
        this._updateInputValue('rot-z', this.state.transform.rotation.z);\r
        \r
        this._updateInputValue('unit-scale', this.state.transform.unitScale);\r
        this._updateInputValue('master-scale', this.state.transform.uniformScale);\r
        this._updateInputValue('scale-x', this.state.transform.scale.x);\r
        this._updateInputValue('scale-y', this.state.transform.scale.y);\r
        this._updateInputValue('scale-z', this.state.transform.scale.z);\r
        \r
        this._updateSelectValue('rotation-order', this.state.transform.rotationOrder);\r
        \r
        // Delta transform inputs\r
        this._updateInputValue('delta-pos-x', this.state.deltaTransform.position.x);\r
        this._updateInputValue('delta-pos-y', this.state.deltaTransform.position.y);\r
        this._updateInputValue('delta-pos-z', this.state.deltaTransform.position.z);\r
        \r
        this._updateInputValue('delta-rot-x', this.state.deltaTransform.rotation.x);\r
        this._updateInputValue('delta-rot-y', this.state.deltaTransform.rotation.y);\r
        this._updateInputValue('delta-rot-z', this.state.deltaTransform.rotation.z);\r
        \r
        this._updateInputValue('delta-scale-x', this.state.deltaTransform.scale.x);\r
        this._updateInputValue('delta-scale-y', this.state.deltaTransform.scale.y);\r
        this._updateInputValue('delta-scale-z', this.state.deltaTransform.scale.z);\r
    }\r
    \r
    // _updateInputValue(id, value) {\r
    //     const input = document.getElementById(id);\r
    //     if (input && !input.dragHandler?.isTyping) {\r
    //         const newStr = (typeof value === 'number') ? value.toFixed(2) : String(value);\r
    //         if (input.value !== newStr) {\r
    //             input.value = newStr;\r
    //         }\r
    //     }\r
    // }\r
    _updateInputValue(id, value) {\r
        const input = document.getElementById(id);\r
        if (!input) return;\r
        \r
        // Skip update ONLY if user is actively typing in THIS specific input\r
        if (input.dragHandler?.isTyping) {\r
            // User is typing in this field, don't override\r
            return;\r
        }\r
        \r
        // Otherwise always update the value\r
        const newStr = (typeof value === 'number') ? value.toFixed(2) : String(value);\r
        if (input.value !== newStr) {\r
            input.value = newStr;\r
            this._dlog(\`[ObjectControls] \u{1F4DD} Updated \${id}: \${newStr}\`);\r
        }\r
    }\r
    \r
    _updateSelectValue(id, value) {\r
        const select = document.getElementById(id);\r
        if (select && select.value !== String(value)) {\r
            select.value = value;\r
        }\r
    }\r
    \r
    _updateCheckboxValue(id, value) {\r
        const checkbox = document.getElementById(id);\r
        if (checkbox && checkbox.checked !== !!value) {\r
            checkbox.checked = !!value;\r
        }\r
    }\r
    \r
    /**\r
     * Set complete state from parent - MUST UPDATE UI\r
     */\r
    setState(newState) {\r
        this._dlog('[ObjectControls] \u{1F4C4} setState called with:', newState);\r
        \r
        let changed = false;\r
        \r
        // Update transform if provided\r
        if (newState.transform) {\r
            const transformChanged = this._mergeTransformIfChanged(this.state.transform, newState.transform);\r
            changed = changed || transformChanged;\r
        }\r
        \r
        // Update delta transform if provided\r
        if (newState.deltaTransform) {\r
            const deltaChanged = this._mergeDeltaTransformIfChanged(this.state.deltaTransform, newState.deltaTransform);\r
            changed = changed || deltaChanged;\r
        }\r
        \r
        // Update other properties\r
        if (newState.wireframe !== undefined) {\r
            this.state.wireframe = newState.wireframe;\r
            changed = true;\r
        }\r
        \r
        // Update UI but DON'T emit events (this is from parent)\r
        if (changed) {\r
            this._dlog('[ObjectControls] \u2705 State changed from parent, updating UI only');\r
            this._scheduleUIUpdate();\r
            // DON'T call _emitTransformsChange() here\r
        }\r
    }\r
    \r
    setStateAndSync(newState) {\r
        this.setState(newState);\r
        // This one DOES emit to sync with worker\r
        this._emitTransformsChange();\r
    }\r
\r
    // Legacy compatibility methods\r
    setTransform(transform, opts = {}) {\r
        this._dlog('[ObjectControls] \u{1F527} setTransform called');\r
        if (!transform) return false;\r
        \r
        const changed = this._mergeTransformIfChanged(this.state.transform, transform);\r
        if (changed) {\r
            if (!opts.silent) {\r
                this._updateUI();\r
                this._emitTransformsChange();\r
            } else {\r
                this._needsUIUpdate = true;\r
            }\r
        }\r
        return changed;\r
    }\r
    \r
    setDeltaTransform(deltaTransform, opts = {}) {\r
        if (!deltaTransform) return false;\r
        \r
        const changed = this._mergeDeltaTransformIfChanged(this.state.deltaTransform, deltaTransform);\r
        if (changed) {\r
            if (!opts.silent) {\r
                this._updateUI();\r
                this._emitTransformsChange();\r
            } else {\r
                this._needsUIUpdate = true;\r
            }\r
        }\r
        return changed;\r
    }\r
    \r
    // Reset methods\r
    resetAllTransforms() {\r
        // Preserve current unitScale when resetting\r
        const currentUnitScale = this.state.transform.unitScale || this.config?.unitScale || 100;\r
        \r
        this.state.transform = {\r
            position: { x: 0, y: 0, z: 0 },\r
            rotation: { x: 0, y: 0, z: 0 },\r
            scale: { x: 1, y: 1, z: 1 },\r
            uniformScale: 1,\r
            unitScale: currentUnitScale,\r
            rotationOrder: 'ZXY'\r
        };\r
        \r
        this.state.deltaTransform = {\r
            position: { x: 0, y: 0, z: 0 },\r
            rotation: { x: 0, y: 0, z: 0 },\r
            scale: { x: 1, y: 1, z: 1 }\r
        };\r
        \r
        this._updateUI();\r
        this._emitTransformsChange();\r
        this._dlog('[ObjectControls] All transforms reset');\r
    }\r
    \r
    centerToOrigin() {\r
        this.state.transform.position = { x: 0, y: 0, z: 0 };\r
        this.state.deltaTransform.position = { x: 0, y: 0, z: 0 };\r
        \r
        this._updateUI();\r
        this._emitTransformsChange();\r
        this._dlog('[ObjectControls] Centered to origin');\r
    }\r
    \r
    randomizeAll() {\r
        this.state.transform = {\r
            ...this.state.transform,\r
            position: {\r
                x: (Math.random() - 0.5) * 20,\r
                y: (Math.random() - 0.5) * 20,\r
                z: (Math.random() - 0.5) * 20\r
            },\r
            rotation: {\r
                x: Math.random() * 360,\r
                y: Math.random() * 360,\r
                z: Math.random() * 360\r
            },\r
            uniformScale: 0.5 + Math.random() * 2,\r
            scale: {\r
                x: 0.5 + Math.random() * 2,\r
                y: 0.5 + Math.random() * 2,\r
                z: 0.5 + Math.random() * 2\r
            }\r
        };\r
        \r
        this.state.deltaTransform = {\r
            position: {\r
                x: (Math.random() - 0.5) * 10,\r
                y: (Math.random() - 0.5) * 10,\r
                z: (Math.random() - 0.5) * 10\r
            },\r
            rotation: {\r
                x: (Math.random() - 0.5) * 90,\r
                y: (Math.random() - 0.5) * 90,\r
                z: (Math.random() - 0.5) * 90\r
            },\r
            scale: {\r
                x: 0.8 + Math.random() * 0.4,\r
                y: 0.8 + Math.random() * 0.4,\r
                z: 0.8 + Math.random() * 0.4\r
            }\r
        };\r
        \r
        this._updateUI();\r
        this._emitTransformsChange();\r
        this._dlog('[ObjectControls] Randomized all transforms');\r
    }\r
    \r
    getState() {\r
        return {\r
            state: { ...this.state },\r
            collapsedSections: Array.from(this.collapsedSections)\r
        };\r
    }\r
    \r
    // Backward compatibility - keep for now\r
    updateFromParent(data) {\r
        this._dlog('[ObjectControls] \u{1F4C4} updateFromParent called');\r
        this.setState(data);\r
    }\r
    \r
    // Diff/merge utilities\r
    _approxEqual(a, b, eps = 1e-4) {\r
        if (typeof a === 'number' && typeof b === 'number') {\r
            return Math.abs(a - b) <= eps;\r
        }\r
        return a === b;\r
    }\r
    \r
    _mergeTransformIfChanged(target, patch) {\r
        let changed = false;\r
        \r
        if (patch.position) {\r
            const p = patch.position;\r
            if (typeof p.x === 'number' && !this._approxEqual(target.position.x, p.x)) {\r
                target.position.x = p.x;\r
                changed = true;\r
            }\r
            if (typeof p.y === 'number' && !this._approxEqual(target.position.y, p.y)) {\r
                target.position.y = p.y;\r
                changed = true;\r
            }\r
            if (typeof p.z === 'number' && !this._approxEqual(target.position.z, p.z)) {\r
                target.position.z = p.z;\r
                changed = true;\r
            }\r
        }\r
        \r
        if (patch.rotation) {\r
            const r = patch.rotation;\r
            if (typeof r.x === 'number' && !this._approxEqual(target.rotation.x, r.x)) {\r
                target.rotation.x = r.x;\r
                changed = true;\r
            }\r
            if (typeof r.y === 'number' && !this._approxEqual(target.rotation.y, r.y)) {\r
                target.rotation.y = r.y;\r
                changed = true;\r
            }\r
            if (typeof r.z === 'number' && !this._approxEqual(target.rotation.z, r.z)) {\r
                target.rotation.z = r.z;\r
                changed = true;\r
            }\r
        }\r
        \r
        if (patch.scale) {\r
            const s = patch.scale;\r
            if (typeof s.x === 'number' && !this._approxEqual(target.scale.x, s.x)) {\r
                target.scale.x = s.x;\r
                changed = true;\r
            }\r
            if (typeof s.y === 'number' && !this._approxEqual(target.scale.y, s.y)) {\r
                target.scale.y = s.y;\r
                changed = true;\r
            }\r
            if (typeof s.z === 'number' && !this._approxEqual(target.scale.z, s.z)) {\r
                target.scale.z = s.z;\r
                changed = true;\r
            }\r
        }\r
        \r
        if (patch.unitScale !== undefined && !this._approxEqual(target.unitScale, patch.unitScale)) {\r
            target.unitScale = patch.unitScale;\r
            changed = true;\r
        }\r
        \r
        if (patch.uniformScale !== undefined && !this._approxEqual(target.uniformScale, patch.uniformScale)) {\r
            target.uniformScale = patch.uniformScale;\r
            changed = true;\r
        }\r
        \r
        // Handle legacy scaleX/Y/Z format\r
        if (patch.scaleX !== undefined && !this._approxEqual(target.scale.x, patch.scaleX)) {\r
            target.scale.x = patch.scaleX;\r
            changed = true;\r
        }\r
        if (patch.scaleY !== undefined && !this._approxEqual(target.scale.y, patch.scaleY)) {\r
            target.scale.y = patch.scaleY;\r
            changed = true;\r
        }\r
        if (patch.scaleZ !== undefined && !this._approxEqual(target.scale.z, patch.scaleZ)) {\r
            target.scale.z = patch.scaleZ;\r
            changed = true;\r
        }\r
        \r
        if (patch.rotationOrder !== undefined && target.rotationOrder !== patch.rotationOrder) {\r
            target.rotationOrder = patch.rotationOrder;\r
            changed = true;\r
        }\r
        \r
        return changed;\r
    }\r
    \r
    _mergeDeltaTransformIfChanged(target, patch) {\r
        let changed = false;\r
        \r
        if (patch.position) {\r
            const p = patch.position;\r
            if (typeof p.x === 'number' && !this._approxEqual(target.position.x, p.x)) {\r
                target.position.x = p.x;\r
                changed = true;\r
            }\r
            if (typeof p.y === 'number' && !this._approxEqual(target.position.y, p.y)) {\r
                target.position.y = p.y;\r
                changed = true;\r
            }\r
            if (typeof p.z === 'number' && !this._approxEqual(target.position.z, p.z)) {\r
                target.position.z = p.z;\r
                changed = true;\r
            }\r
        }\r
        \r
        if (patch.rotation) {\r
            const r = patch.rotation;\r
            if (typeof r.x === 'number' && !this._approxEqual(target.rotation.x, r.x)) {\r
                target.rotation.x = r.x;\r
                changed = true;\r
            }\r
            if (typeof r.y === 'number' && !this._approxEqual(target.rotation.y, r.y)) {\r
                target.rotation.y = r.y;\r
                changed = true;\r
            }\r
            if (typeof r.z === 'number' && !this._approxEqual(target.rotation.z, r.z)) {\r
                target.rotation.z = r.z;\r
                changed = true;\r
            }\r
        }\r
        \r
        if (patch.scale) {\r
            const s = patch.scale;\r
            if (typeof s.x === 'number' && !this._approxEqual(target.scale.x, s.x)) {\r
                target.scale.x = s.x;\r
                changed = true;\r
            }\r
            if (typeof s.y === 'number' && !this._approxEqual(target.scale.y, s.y)) {\r
                target.scale.y = s.y;\r
                changed = true;\r
            }\r
            if (typeof s.z === 'number' && !this._approxEqual(target.scale.z, s.z)) {\r
                target.scale.z = s.z;\r
                changed = true;\r
            }\r
        }\r
        \r
        // Handle legacy scaleX/Y/Z format\r
        if (patch.scaleX !== undefined && !this._approxEqual(target.scale.x, patch.scaleX)) {\r
            target.scale.x = patch.scaleX;\r
            changed = true;\r
        }\r
        if (patch.scaleY !== undefined && !this._approxEqual(target.scale.y, patch.scaleY)) {\r
            target.scale.y = patch.scaleY;\r
            changed = true;\r
        }\r
        if (patch.scaleZ !== undefined && !this._approxEqual(target.scale.z, patch.scaleZ)) {\r
            target.scale.z = patch.scaleZ;\r
            changed = true;\r
        }\r
        \r
        return changed;\r
    }\r
    \r
    _beginBatch() {\r
        this._isBatching = true;\r
        this._needsUIUpdate = false;\r
    }\r
    \r
    _endBatch() {\r
        this._isBatching = false;\r
        if (this._needsUIUpdate) {\r
            this._needsUIUpdate = false;\r
            this._updateUI();\r
        }\r
    }\r
    \r
    dispose() {\r
        // Clean up drag handlers\r
        const dragInputs = document.querySelectorAll('.drag-input');\r
        dragInputs.forEach(input => {\r
            if (input.dragHandler) {\r
                input.dragHandler.dispose();\r
                delete input.dragHandler;\r
            }\r
        });\r
        \r
        this._dlog('[ObjectControls] Disposed');\r
    }\r
}\r
\r
// DragInputHandler class - KEEP EXACTLY AS IS\r
class DragInputHandler {\r
    constructor(input) {\r
        this.input = input;\r
        this.isDragging = false;\r
        this.startY = 0;\r
        this.startValue = 0;\r
        this.currentValue = 0;\r
        this.hasDraggedOutside = false;\r
        this.pendingValue = null;\r
        this.isTyping = false;\r
        this.hasMovedEnough = false;\r
        this.wasAlreadyFocused = false;\r
        \r
        // Get step value from input or default\r
        this.step = parseFloat(input.getAttribute('step')) || 0.1;\r
        \r
        // Drag sensitivity\r
        this.dragSensitivity = 0.5; // pixels per unit change\r
        \r
        // Bind methods\r
        this.handleMouseDown = this.handleMouseDown.bind(this);\r
        this.handleMouseMove = this.handleMouseMove.bind(this);\r
        this.handleMouseUp = this.handleMouseUp.bind(this);\r
        this.handleKeyDown = this.handleKeyDown.bind(this);\r
        this.handleInput = this.handleInput.bind(this);\r
        this.handleBlur = this.handleBlur.bind(this);\r
        this.handleFocus = this.handleFocus.bind(this);\r
        \r
        this.attachListeners();\r
    }\r
    \r
    attachListeners() {\r
        // Mouse events for dragging\r
        this.input.addEventListener('mousedown', this.handleMouseDown);\r
        \r
        // Keyboard events\r
        this.input.addEventListener('keydown', this.handleKeyDown);\r
        this.input.addEventListener('input', this.handleInput);\r
        this.input.addEventListener('blur', this.handleBlur);\r
        this.input.addEventListener('focus', this.handleFocus);\r
    }\r
    \r
    handleMouseDown(e) {\r
        // Store initial mouse position\r
        this.isDragging = false;\r
        this.hasDraggedOutside = false;\r
        this.startY = e.clientY;\r
        this.startValue = parseFloat(this.input.value) || 0;\r
        this.currentValue = this.startValue;\r
        this.hasMovedEnough = false;\r
        \r
        // If input is already focused, we might be starting a drag\r
        this.wasAlreadyFocused = (this.input === document.activeElement);\r
        \r
        // Add global listeners\r
        document.addEventListener('mousemove', this.handleMouseMove);\r
        document.addEventListener('mouseup', this.handleMouseUp);\r
        \r
        // Prevent text selection drag but allow focus\r
        if (this.wasAlreadyFocused) {\r
            e.preventDefault();\r
        }\r
        \r
        // Notify drag started\r
        window.dispatchEvent(new CustomEvent('z3d-drag-state', { \r
            detail: { dragging: true }, \r
            bubbles: true \r
        }));\r
    }\r
    \r
    handleMouseMove(e) {\r
        const deltaY = this.startY - e.clientY; // Inverted so up increases value\r
        const inputRect = this.input.getBoundingClientRect();\r
        const mouseY = e.clientY;\r
        \r
        // Check if mouse is outside input bounds\r
        const isOutside = mouseY < inputRect.top || mouseY > inputRect.bottom;\r
        \r
        // Only start dragging if we've moved enough\r
        if (!this.isDragging && (isOutside || Math.abs(deltaY) > 5)) {\r
            this.isDragging = true;\r
            this.hasMovedEnough = true;\r
            \r
            // Add dragging class and change cursor\r
            this.input.classList.add('dragging');\r
            document.body.style.cursor = 'ns-resize';\r
            \r
            // Prevent text selection\r
            e.preventDefault();\r
            \r
            // Keep the input focused during drag\r
            if (!this.wasAlreadyFocused) {\r
                this.input.focus();\r
            }\r
            this.input.select();\r
        }\r
        \r
        if (this.isDragging) {\r
            e.preventDefault();\r
            \r
            // Calculate value change based on drag distance\r
            let valueChange = deltaY * this.step * this.dragSensitivity;\r
            \r
            // Add acceleration for larger movements\r
            if (Math.abs(deltaY) > 50) {\r
                valueChange *= Math.abs(deltaY) / 50;\r
            }\r
            \r
            // Hold shift for fine control\r
            if (e.shiftKey) {\r
                valueChange *= 0.1;\r
            }\r
            \r
            // Hold ctrl/cmd for larger steps\r
            if (e.ctrlKey || e.metaKey) {\r
                valueChange *= 10;\r
            }\r
            \r
            // Calculate new value\r
            this.currentValue = this.startValue + valueChange;\r
            \r
            // Round to step precision\r
            const stepPrecision = this.getDecimalPlaces(this.step);\r
            this.currentValue = parseFloat(this.currentValue.toFixed(stepPrecision));\r
            \r
            // Update input display\r
            this.input.value = this.currentValue;\r
            \r
            // Keep selection during drag\r
            this.input.select();\r
            \r
            // Add visual feedback\r
            if (deltaY > 0) {\r
                this.input.classList.remove('drag-down');\r
                this.input.classList.add('drag-up');\r
            } else {\r
                this.input.classList.remove('drag-up');\r
                this.input.classList.add('drag-down');\r
            }\r
            \r
            // Keep pendingValue in sync\r
            this.pendingValue = this.input.value;\r
            \r
            // Trigger change event for live preview\r
            this.triggerChange();\r
        }\r
    }\r
    \r
    handleMouseUp(e) {\r
        if (this.isDragging) {\r
            this.isDragging = false;\r
            this.input.classList.remove('dragging', 'drag-up', 'drag-down');\r
            document.body.style.cursor = '';\r
            \r
            // Keep the input focused and selected after drag\r
            this.input.focus();\r
            this.input.select();\r
            \r
            // Final value update\r
            this.triggerChange(true);\r
            \r
            // Drag ended\r
            window.dispatchEvent(new CustomEvent('z3d-drag-state', { \r
                detail: { dragging: false }, \r
                bubbles: true \r
            }));\r
            \r
            // Ensure typing state is reset\r
            this.isTyping = false;\r
        } else if (!this.hasMovedEnough && !this.wasAlreadyFocused) {\r
            // It was just a click, not a drag - focus for typing\r
            this.input.focus();\r
            this.input.select();\r
        }\r
        \r
        // Reset flags\r
        this.wasAlreadyFocused = false;\r
        \r
        // Remove global listeners\r
        document.removeEventListener('mousemove', this.handleMouseMove);\r
        document.removeEventListener('mouseup', this.handleMouseUp);\r
    }\r
    \r
    handleFocus(e) {\r
        this.isTyping = true;\r
        this.pendingValue = this.input.value;\r
        this.currentValue = parseFloat(this.input.value) || 0;\r
    }\r
    \r
    handleInput(e) {\r
        // Store the pending value but don't apply it yet\r
        this.pendingValue = this.input.value;\r
    }\r
    \r
    handleKeyDown(e) {\r
        if (e.key === 'Enter') {\r
            e.preventDefault();\r
            this.applyPendingValue();\r
            this.input.blur();\r
            \r
            // Notify commit\r
            window.dispatchEvent(new CustomEvent('z3d-drag-state', { \r
                detail: { dragging: false }, \r
                bubbles: true \r
            }));\r
        } else if (e.key === 'Escape') {\r
            // Cancel editing and restore original value\r
            this.input.value = this.currentValue;\r
            this.pendingValue = null;\r
            this.input.blur();\r
        } else if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {\r
            e.preventDefault();\r
            const direction = e.key === 'ArrowUp' ? 1 : -1;\r
            const step = e.shiftKey ? this.step * 0.1 : this.step;\r
            const newValue = (parseFloat(this.input.value) || 0) + (direction * step);\r
            this.input.value = newValue.toFixed(this.getDecimalPlaces(this.step));\r
            this.pendingValue = this.input.value;\r
            this.applyPendingValue();\r
        }\r
    }\r
    \r
    handleBlur(e) {\r
        if (this.pendingValue !== null && this.pendingValue !== this.currentValue.toString()) {\r
            this.applyPendingValue();\r
        }\r
        // Always reset typing state on blur\r
        this.isTyping = false;\r
    }\r
    \r
    applyPendingValue() {\r
        const value = parseFloat(this.input.value);\r
        if (!isNaN(value)) {\r
            this.currentValue = value;\r
            this.input.value = value.toFixed(this.getDecimalPlaces(this.step));\r
            this.triggerChange(true);\r
        }\r
        this.pendingValue = null;\r
    }\r
    \r
    triggerChange(isFinal = false) {\r
        // Dispatch custom event with value\r
        const event = new CustomEvent('drag-value-change', {\r
            detail: {\r
                value: this.currentValue,\r
                property: this.input.dataset.prop,\r
                isFinal: isFinal\r
            },\r
            bubbles: true\r
        });\r
        this.input.dispatchEvent(event);\r
        \r
        // Also trigger standard change event for compatibility\r
        if (isFinal) {\r
            const changeEvent = new Event('change', { bubbles: true });\r
            this.input.dispatchEvent(changeEvent);\r
        }\r
    }\r
    \r
    getDecimalPlaces(num) {\r
        const str = num.toString();\r
        const decimal = str.indexOf('.');\r
        return decimal === -1 ? 0 : str.length - decimal - 1;\r
    }\r
    \r
    dispose() {\r
        this.input.removeEventListener('mousedown', this.handleMouseDown);\r
        this.input.removeEventListener('keydown', this.handleKeyDown);\r
        this.input.removeEventListener('input', this.handleInput);\r
        this.input.removeEventListener('blur', this.handleBlur);\r
        this.input.removeEventListener('focus', this.handleFocus);\r
        document.removeEventListener('mousemove', this.handleMouseMove);\r
        document.removeEventListener('mouseup', this.handleMouseUp);\r
    }\r
}\r
\r
// Initialize drag inputs helper\r
function initializeDragInputs() {\r
    const dragInputs = document.querySelectorAll('.drag-input');\r
    dragInputs.forEach(input => {\r
        // Skip if already initialized\r
        if (!input.dragHandler) {\r
            input.dragHandler = new DragInputHandler(input);\r
        }\r
    });\r
}\r
\r
// Make it globally available\r
if (typeof window.initializeDragInputs === 'undefined') {\r
    window.initializeDragInputs = initializeDragInputs;\r
}`,
        "viewportControls": `/* FILE: editor/z3d-object-editor/templates/scripts/components/viewport-controls.js */\r
class ViewportControls extends EventEmitter {\r
    async initialize() {\r
        const container = document.getElementById('viewport-controls');\r
        if (!container) {\r
            throw new Error('Viewport controls container not found');\r
        }\r
        container.innerHTML = this._generateHTML();\r
        this._setupEventListeners();\r
        this.isInitialized = true;\r
        // Ensure camera follow state is synced on init\r
        if (this.state.cameraFollow) {\r
            this.emit('camera-follow-changed', { enabled: true });\r
            if (window.worker) {\r
                window.worker.postMessage({\r
                    type: 'SET_CAMERA_FOLLOW_EDITOR',\r
                    data: { enabled: true }\r
                });\r
            }\r
        }\r
        console.log('[ViewportControls] \u2705 Initialized');\r
    }\r
    constructor(config) {\r
        super();\r
        this.config = config;\r
        this.isInitialized = false;\r
        this.state = {\r
            wireframe: false,\r
            worldGridCellPx: 64,\r
            localGridCellPx: 32,\r
            localGridPaddingPct: 25, // percent\r
            worldGridPaddingPct: 50, // percent\r
            snapAngleDeg: 15,\r
            snapScale: 0.1,\r
            cameraFollow: true,\r
            cameraPosition: { x: 0, y: 0, z: 0 }\r
        };\r
    // ...existing code...\r
        this.isInitialized = true;\r
        console.log('[ViewportControls] \u2705 Initialized');\r
    }\r
    \r
    _generateHTML() {\r
        return \`\r
            <div class="viewport-controls-panel">\r
                <div class="controls-row" style="max-width:380px; display:flex; gap:8px; align-items:center;">\r
                    <div class="vc-field"><label for="world-grid-cell">World(px)</label><input type="number" id="world-grid-cell" min="1" step="1" value="\${this.state.worldGridCellPx}"></div>\r
                    <div class="vc-field"><label for="world-grid-padding">Pad(%)</label><input type="number" id="world-grid-padding" min="0" step="1" value="\${this.state.worldGridPaddingPct}"></div>\r
                    <div class="vc-field"><label for="local-grid-cell">Local(px)</label><input type="number" id="local-grid-cell" min="1" step="1" value="\${this.state.localGridCellPx}"></div>\r
                    <div class="vc-field"><label for="local-grid-padding">Pad(%)</label><input type="number" id="local-grid-padding" min="0" step="1" value="\${this.state.localGridPaddingPct}"></div>\r
                    <div class="vc-field"><label for="snap-angle">Snap Angle (\xB0)</label><input type="number" id="snap-angle" min="1" step="1" value="\${this.state.snapAngleDeg}"></div>\r
                    <div class="vc-field"><label for="snap-scale">Snap Scale</label><input type="number" id="snap-scale" min="0.001" step="0.01" value="\${this.state.snapScale}"></div>\r
                    <div class="vc-field checkbox"><label for="camera-follow-checkbox">Follow</label><input type="checkbox" id="camera-follow-checkbox" \${this.state.cameraFollow ? 'checked' : ''}></div>\r
                </div>\r
            </div>\`;\r
    }\r
    \r
    _setupEventListeners() {\r
        // Camera follow checkbox\r
        const cameraFollowCheckbox = document.getElementById('camera-follow-checkbox');\r
        if (cameraFollowCheckbox) {\r
            cameraFollowCheckbox.addEventListener('change', (e) => {\r
                this.state.cameraFollow = !!e.target.checked;\r
                this.emit('camera-follow-changed', { enabled: this.state.cameraFollow });\r
                // Send message to worker to enable/disable camera follow for editor changes\r
                if (window.worker) {\r
                    window.worker.postMessage({\r
                        type: 'SET_CAMERA_FOLLOW_EDITOR',\r
                        data: { enabled: this.state.cameraFollow }\r
                    });\r
                }\r
            });\r
        }\r
        \r
        // World/local grid cell inputs\r
        const worldCell = document.getElementById('world-grid-cell');\r
        const localCell = document.getElementById('local-grid-cell');\r
    const worldPad = document.getElementById('world-grid-padding');\r
    const localPad = document.getElementById('local-grid-padding');\r
        if (worldCell) {\r
            worldCell.addEventListener('change', (e) => {\r
                const v = Math.max(1, parseInt(e.target.value, 10) || 1);\r
                this.state.worldGridCellPx = v;\r
                if (window.worker) window.worker.postMessage({ type: 'UPDATE_VIEWPORT_SETTING', data: { key: 'worldGridCellPx', value: v } });\r
            });\r
        }\r
        if (localCell) {\r
            localCell.addEventListener('change', (e) => {\r
                const v = Math.max(1, parseInt(e.target.value, 10) || 1);\r
                this.state.localGridCellPx = v;\r
                if (window.worker) window.worker.postMessage({ type: 'UPDATE_VIEWPORT_SETTING', data: { key: 'localGridCellPx', value: v } });\r
            });\r
        }\r
        if (worldPad) {\r
            worldPad.addEventListener('change', (e) => {\r
                const v = Math.max(0, parseFloat(e.target.value) || 0);\r
                this.state.worldGridPaddingPct = v;\r
                if (window.worker) window.worker.postMessage({ type: 'UPDATE_VIEWPORT_SETTING', data: { key: 'worldGridPaddingPct', value: v } });\r
            });\r
        }\r
        if (localPad) {\r
            localPad.addEventListener('change', (e) => {\r
                const v = Math.max(0, parseFloat(e.target.value) || 0);\r
                this.state.localGridPaddingPct = v;\r
                if (window.worker) window.worker.postMessage({ type: 'UPDATE_VIEWPORT_SETTING', data: { key: 'localGridPaddingPct', value: v } });\r
            });\r
        }\r
\r
        // Snap angle\r
        const snapAngle = document.getElementById('snap-angle');\r
        const snapScale = document.getElementById('snap-scale');\r
        if (snapAngle) {\r
            snapAngle.addEventListener('change', (e) => {\r
                const v = Math.max(1, parseInt(e.target.value, 10) || 1);\r
                this.state.snapAngleDeg = v;\r
                if (window.worker) window.worker.postMessage({ type: 'UPDATE_VIEWPORT_SETTING', data: { key: 'snapAngleDeg', value: v } });\r
            });\r
        }\r
        if (snapScale) {\r
            snapScale.addEventListener('change', (e) => {\r
                const v = Math.max(0.001, parseFloat(e.target.value) || 0.001);\r
                this.state.snapScale = v;\r
                if (window.worker) window.worker.postMessage({ type: 'UPDATE_VIEWPORT_SETTING', data: { key: 'snapScale', value: v } });\r
            });\r
        }\r
    /**\r
     * Integration note: In your main editor code, listen for 'camera-follow' events from object-controls\r
     * and call viewportControls.followCameraTo(position) to move the camera if camera follow is enabled.\r
     * Example:\r
     *   objectControls.on('camera-follow', ({ position }) => viewportControls.followCameraTo(position));\r
     */\r
        // Grid inputs -> emit viewport settings\r
    }\r
\r
    /**\r
     * Call this to move the camera if camera follow is enabled.\r
     * @param {object} position {x, y, z}\r
     */\r
    followCameraTo(position) {\r
        if (!this.state.cameraFollow) return;\r
        // Store last camera position (optional, for UI sync)\r
        this.state.cameraPosition = { ...position };\r
        \r
        // Emit event for the editor or 3D view to handle actual camera movement\r
        this.emit('camera-move-to', { position });\r
    }\r
    \r
    dispose() {\r
        console.log('[ViewportControls] Disposed');\r
    }\r
}`,
        "outlinerControls": `/* FILE: editor/z3d-object-editor/templates/scripts/components/outliner-controls.js */\r
/* Advanced Scene Explorer with Fixed Event Handling and Text Selection */\r
\r
class OutlinerControls extends EventEmitter {\r
    constructor(config) {\r
        super();\r
        this.config = config;\r
        this.isInitialized = false;\r
        \r
        // Complete scene data\r
        this.sceneData = {\r
            nodes: null,\r
            materials: [],\r
            textures: [],\r
            animations: [],\r
            skeletons: [],\r
            lights: [],\r
            cameras: [],\r
            geometries: []\r
        };\r
        \r
        // UI state\r
        this.expandedNodes = new Set();\r
        this.expandedCategories = new Set(['nodes']); // Start with nodes expanded\r
        this.expandedMetadata = new Set(); // NEW: Track which nodes have metadata expanded\r
        this.selectedItem = null;\r
        this.searchTerm = '';\r
        this.activeCategory = 'all'; // all, nodes, materials, textures, animations, etc.\r
        \r
        this._hoveredItem = null;\r
        this._debug = !!(this.config?.debugMode || (typeof window !== 'undefined' && window.Z3D_DEBUG));\r
    }\r
    \r
    async initialize() {\r
        const container = document.getElementById('node-tree');\r
        if (!container) {\r
            throw new Error('Node tree container not found');\r
        }\r
        \r
        // Set initial loading state\r
        container.innerHTML = this._generateLoadingHTML();\r
        \r
        // Listen for scene data from worker\r
        this._setupWorkerListener();\r
        \r
        // Listen for model loaded events\r
        this._setupModelLoadedListener();\r
        \r
        this.isInitialized = true;\r
        console.log('[OutlinerControls] \u2705 Initialized');\r
    }\r
    \r
    _generateLoadingHTML() {\r
        return \`\r
            <div class="outliner-container">\r
                <div class="outliner-toolbar">\r
                    <select id="outliner-category" class="outliner-category-select">\r
                        <option value="all">All Categories</option>\r
                        <option value="nodes">Scene Nodes</option>\r
                        <option value="materials">Materials</option>\r
                        <option value="textures">Textures</option>\r
                        <option value="animations">Animations</option>\r
                        <option value="skeletons">Skeletons</option>\r
                        <option value="lights">Lights</option>\r
                        <option value="cameras">Cameras</option>\r
                        <option value="geometries">Geometries</option>\r
                    </select>\r
                    <input type="text" \r
                           id="outliner-search" \r
                           class="outliner-search" \r
                           placeholder="Search..."\r
                           disabled>\r
                    <button id="outliner-expand-all" \r
                            class="btn btn-sm" \r
                            title="Expand All"\r
                            disabled>\u2795</button>\r
                    <button id="outliner-collapse-all" \r
                            class="btn btn-sm" \r
                            title="Collapse All"\r
                            disabled>\u2796</button>\r
                </div>\r
                <div class="outliner-tree" id="outliner-tree">\r
                    <div class="outliner-loading">\r
                        <div class="loading-spinner small"></div>\r
                        <span>Waiting for model...</span>\r
                    </div>\r
                </div>\r
                <div class="outliner-stats" id="outliner-stats">\r
                    <!-- Stats will be displayed here -->\r
                </div>\r
            </div>\`;\r
    }\r
    \r
    _setupWorkerListener() {\r
        if (window.worker) {\r
            window.worker.addEventListener('message', (event) => {\r
                // Listen for complete scene data\r
                if (event.data.type === 'SCENE_DATA') {\r
                    console.log('[OutlinerControls] Received scene data from worker:', event.data.data);\r
                    this._handleSceneData(event.data.data);\r
                }\r
                // Fallback to old node tree message\r
                else if (event.data.type === 'MODEL_NODE_TREE') {\r
                    console.log('[OutlinerControls] Received legacy node tree from worker');\r
                    this._handleLegacyNodeTree(event.data.data);\r
                }\r
            });\r
        }\r
    }\r
    \r
    _setupModelLoadedListener() {\r
        if (window.worker) {\r
            window.worker.addEventListener('message', (event) => {\r
                if (event.data.type === 'MODEL_LOADED' && event.data.data?.success) {\r
                    console.log('[OutlinerControls] Model loaded, waiting for scene data...');\r
                    // Request scene data if not received after a delay\r
                    setTimeout(() => {\r
                        if (!this.sceneData.nodes) {\r
                            console.log('[OutlinerControls] No scene data received, showing placeholder');\r
                            this._showNoModelState();\r
                        }\r
                    }, 2000);\r
                }\r
            });\r
        }\r
    }\r
    \r
    _handleSceneData(data) {\r
        if (!data || !data.sceneData) {\r
            console.warn('[OutlinerControls] Invalid scene data received');\r
            this._showNoModelState();\r
            return;\r
        }\r
        \r
        this.sceneData = data.sceneData;\r
        console.log('[OutlinerControls] Scene data structure:', this.sceneData);\r
        \r
        // Clear previous state\r
        this.expandedNodes.clear();\r
        this.expandedCategories.clear();\r
        this.expandedMetadata.clear();\r
        \r
        // Start with only nodes category expanded\r
        this.expandedCategories.add('nodes');\r
        \r
        // Auto-expand to show model structure\r
        if (this.sceneData.nodes) {\r
            // Expand root (Scene)\r
            this._expandNode(this.sceneData.nodes.id);\r
            \r
            // Find and expand ModelWrapper and LoadedModel\r
            if (this.sceneData.nodes.children) {\r
                this.sceneData.nodes.children.forEach(child => {\r
                    if (child.name === 'ModelWrapper') {\r
                        // Expand ModelWrapper\r
                        this._expandNode(child.id);\r
                        \r
                        // Find and expand LoadedModel within ModelWrapper\r
                        if (child.children) {\r
                            child.children.forEach(grandchild => {\r
                                if (grandchild.name === 'LoadedModel') {\r
                                    // Expand LoadedModel to show first level (e.g., Rig)\r
                                    this._expandNode(grandchild.id);\r
                                    // Don't expand further - we just want to see the first level\r
                                }\r
                            });\r
                        }\r
                    }\r
                });\r
            }\r
        }\r
        \r
        console.log('[OutlinerControls] Initial expanded categories:', Array.from(this.expandedCategories));\r
        console.log('[OutlinerControls] Initial expanded nodes:', Array.from(this.expandedNodes));\r
        \r
        // Apply initial node visibility if provided\r
        if (window.initialNodeVisibility) {\r
            console.log('[OutlinerControls] Applying initial node visibility:', window.initialNodeVisibility);\r
            this._applyInitialNodeVisibility(this.sceneData.nodes, window.initialNodeVisibility);\r
        }\r
        \r
        // Send initial node visibility state to parent\r
        this._sendAllNodeVisibilityToParent();\r
        \r
        // Enable controls and render\r
        this._enableToolbar();\r
        this._renderSceneExplorer();\r
        this._setupEventListeners();\r
        this._updateStats();\r
    }\r
    \r
    _handleLegacyNodeTree(data) {\r
        // Convert legacy node tree to scene data format\r
        if (!data || !data.nodeTree) {\r
            this._showNoModelState();\r
            return;\r
        }\r
        \r
        this.sceneData = {\r
            nodes: this._convertLegacyNode(data.nodeTree),\r
            materials: [],\r
            textures: [],\r
            animations: [],\r
            skeletons: [],\r
            lights: [],\r
            cameras: [],\r
            geometries: []\r
        };\r
        \r
        this._expandNode(this.sceneData.nodes.id);\r
        this._enableToolbar();\r
        this._renderSceneExplorer();\r
        this._setupEventListeners();\r
        this._updateStats();\r
    }\r
    \r
    _convertLegacyNode(node) {\r
        return {\r
            id: node.id,\r
            name: node.name,\r
            type: node.type,\r
            className: node.type,\r
            visible: true,\r
            userData: node.userData || {},\r
            children: node.children ? node.children.map(c => this._convertLegacyNode(c)) : []\r
        };\r
    }\r
    \r
    _showNoModelState() {\r
        const container = document.getElementById('outliner-tree');\r
        if (container) {\r
            container.innerHTML = \`\r
                <div class="outliner-empty">\r
                    <span class="empty-icon">\u{1F4E6}</span>\r
                    <span class="empty-text">No model loaded</span>\r
                </div>\`;\r
        }\r
    }\r
    \r
    _renderSceneExplorer() {\r
        const container = document.getElementById('outliner-tree');\r
        if (!container) return;\r
        \r
        let html = '<div class="scene-explorer">';\r
        \r
        // Filter categories based on active selection\r
        const categoriesToShow = this.activeCategory === 'all' \r
            ? ['nodes', 'skeletons', 'materials', 'textures', 'animations', 'lights', 'cameras', 'geometries']\r
            : [this.activeCategory];\r
        \r
        categoriesToShow.forEach(category => {\r
            html += this._renderCategory(category);\r
        });\r
        \r
        html += '</div>';\r
        container.innerHTML = html;\r
        \r
        // Apply search filter if any\r
        if (this.searchTerm) {\r
            this._applySearchFilter();\r
        }\r
    }\r
    \r
    _renderCategory(categoryName) {\r
        const categoryData = this.sceneData[categoryName];\r
        const isExpanded = this.expandedCategories.has(categoryName);\r
        const hasData = this._categoryHasData(categoryName, categoryData);\r
        \r
        console.log(\`[OutlinerControls] Rendering category: \${categoryName}, expanded: \${isExpanded}, hasData: \${hasData}\`);\r
        \r
        if (!hasData && this.activeCategory === 'all') {\r
            return ''; // Don't show empty categories in "all" view\r
        }\r
        \r
        const count = this._getCategoryCount(categoryName, categoryData);\r
        const icon = this._getCategoryIcon(categoryName);\r
        const displayName = this._getCategoryDisplayName(categoryName);\r
        \r
        let html = \`\r
            <div class="category-section" data-category="\${categoryName}">\r
                <div class="category-header \${!hasData ? 'empty' : ''}" data-category-toggle="\${categoryName}">\r
                    <span class="category-toggle \${isExpanded ? 'expanded' : ''}">\r
                        \${hasData ? (isExpanded ? '\u25BC' : '\u25B6') : '\u25CB'}\r
                    </span>\r
                    <span class="category-icon">\${icon}</span>\r
                    <span class="category-name">\${displayName}</span>\r
                    <span class="category-count">(\${count})</span>\r
                </div>\`;\r
        \r
        // ONLY render content if category is expanded\r
        if (hasData && isExpanded) {\r
            html += '<div class="category-content">';       \r
            \r
            switch (categoryName) {\r
                case 'nodes':\r
                    html += this._renderNode(categoryData, 0);\r
                    break;\r
                case 'materials':\r
                    html += this._renderMaterials(categoryData);\r
                    break;\r
                case 'textures':\r
                    html += this._renderTextures(categoryData);\r
                    break;\r
                case 'animations':\r
                    html += this._renderAnimations(categoryData);\r
                    break;\r
                case 'skeletons':\r
                    html += this._renderSkeletons(categoryData);\r
                    break;\r
                case 'lights':\r
                    html += this._renderLights(categoryData);\r
                    break;\r
                case 'cameras':\r
                    html += this._renderCameras(categoryData);\r
                    break;\r
                case 'geometries':\r
                    html += this._renderGeometries(categoryData);\r
                    break;\r
            }\r
            \r
            html += '</div>';\r
        }\r
        \r
        html += '</div>';\r
        return html;\r
    }\r
    \r
    _renderNode(node, depth = 0) {\r
        if (!node) return '';\r
        \r
        const hasChildren = node.children && node.children.length > 0;\r
        const isExpanded = this.expandedNodes.has(node.id);\r
        const isSelected = this.selectedItem === node.id;\r
        const isHovered = this._hoveredItem === node.id;\r
        const matchesSearch = this._itemMatchesSearch(node);\r
        const hasMetadata = this._hasMetadata(node);\r
        const isMetadataExpanded = this.expandedMetadata.has(node.id);\r
        \r
        const isVisible = !this.searchTerm || matchesSearch || this._hasMatchingDescendant(node);\r
        const displayStyle = isVisible ? '' : 'style="display: none;"';\r
        \r
        const icon = this._getNodeIcon(node);\r
        const classLabel = node.className !== node.type ? \` (\${node.className})\` : '';\r
        \r
        let html = \`\r
            <div class="outliner-node \${isSelected ? 'selected' : ''} \${isHovered ? 'hovered' : ''}" \r
                 data-node-id="\${node.id}" \r
                 data-item-type="node"\r
                 data-depth="\${depth}"\r
                 \${displayStyle}>\r
                <div class="node-row \${hasMetadata ? 'has-metadata' : ''}" style="padding-left: \${depth * 20}px;">\r
                    \${hasChildren ? \`\r
                        <span class="node-toggle \${isExpanded ? 'expanded' : ''}" data-toggle-for="\${node.id}">\r
                            \${isExpanded ? '\u25BC' : '\u25B6'}\r
                        </span>\` : \r
                        '<span class="node-toggle-spacer"></span>'\r
                    }\r
                    <span class="node-icon">\${icon}</span>\r
                    <span class="node-name \${matchesSearch ? 'search-match' : ''}">\${this._escapeHtml(node.name || 'Unnamed')}</span>\r
                    <span class="node-type">\${node.type}\${classLabel}</span>\r
                    <span class="visibility-toggle \${!node.visible ? 'hidden' : ''}" \r
                          data-visibility-toggle="\${node.id}"\r
                          title="\${node.visible ? 'Hide' : 'Show'}">\r
                        \u{1F441}\uFE0F\r
                    </span>\r
                    \${hasMetadata ? \`\r
                        <span class="metadata-toggle \${isMetadataExpanded ? 'expanded' : ''}" \r
                              data-metadata-toggle="\${node.id}"\r
                              title="Toggle metadata">\r
                            \${isMetadataExpanded ? '\u25BC' : '\u25B6'}\r
                        </span>\` : ''\r
                    }\r
                </div>\`;\r
        \r
        // Add metadata section only if expanded\r
        if (hasMetadata && isMetadataExpanded) {\r
            html += this._renderNodeMetadata(node, depth);\r
        }\r
        \r
        // Add children if expanded\r
        if (hasChildren && isExpanded) {\r
            html += '<div class="node-children">';\r
            node.children.forEach(child => {\r
                html += this._renderNode(child, depth + 1);\r
            });\r
            html += '</div>';\r
        }\r
        \r
        html += '</div>';\r
        return html;\r
    }\r
    \r
    _renderNodeMetadata(node, depth) {\r
        let html = '<div class="node-metadata" style="padding-left: ' + ((depth + 1) * 20 + 20) + 'px;">';\r
        \r
        // Transform data\r
        if (node.position || node.rotation || node.scale) {\r
            html += '<div class="metadata-group">';\r
            if (node.position) {\r
                html += \`<div class="metadata-item">\r
                    <span class="metadata-key">Position:</span>\r
                    <span class="metadata-value">(\${node.position.x.toFixed(2)}, \${node.position.y.toFixed(2)}, \${node.position.z.toFixed(2)})</span>\r
                </div>\`;\r
            }\r
            if (node.rotation) {\r
                html += \`<div class="metadata-item">\r
                    <span class="metadata-key">Rotation:</span>\r
                    <span class="metadata-value">(\${node.rotation.x.toFixed(1)}\xB0, \${node.rotation.y.toFixed(1)}\xB0, \${node.rotation.z.toFixed(1)}\xB0)</span>\r
                </div>\`;\r
            }\r
            if (node.scale) {\r
                html += \`<div class="metadata-item">\r
                    <span class="metadata-key">Scale:</span>\r
                    <span class="metadata-value">(\${node.scale.x.toFixed(2)}, \${node.scale.y.toFixed(2)}, \${node.scale.z.toFixed(2)})</span>\r
                </div>\`;\r
            }\r
            html += '</div>';\r
        }\r
        \r
        // Material/Geometry references\r
        if (node.materialId || node.geometryId || node.skeletonId) {\r
            html += '<div class="metadata-group">';\r
            if (node.materialId) {\r
                const matIds = Array.isArray(node.materialId) ? node.materialId : [node.materialId];\r
                matIds.forEach(id => {\r
                    const material = this.sceneData.materials.find(m => m.id === id);\r
                    if (material) {\r
                        html += \`<div class="metadata-item">\r
                            <span class="metadata-key">Material:</span>\r
                            <span class="metadata-value clickable" data-ref-id="\${id}" data-ref-type="material">\${material.name}</span>\r
                        </div>\`;\r
                    }\r
                });\r
            }\r
            if (node.geometryId) {\r
                const geometry = this.sceneData.geometries.find(g => g.id === node.geometryId);\r
                if (geometry) {\r
                    html += \`<div class="metadata-item">\r
                        <span class="metadata-key">Geometry:</span>\r
                        <span class="metadata-value clickable" data-ref-id="\${node.geometryId}" data-ref-type="geometry">\${geometry.name}</span>\r
                    </div>\`;\r
                }\r
            }\r
            if (node.skeletonId) {\r
                const skeleton = this.sceneData.skeletons.find(s => s.id === node.skeletonId);\r
                if (skeleton) {\r
                    html += \`<div class="metadata-item">\r
                        <span class="metadata-key">Skeleton:</span>\r
                        <span class="metadata-value clickable" data-ref-id="\${node.skeletonId}" data-ref-type="skeleton">\${skeleton.name}</span>\r
                    </div>\`;\r
                }\r
            }\r
            html += '</div>';\r
        }\r
        \r
        // User data\r
        if (node.userData && Object.keys(node.userData).length > 0) {\r
            html += '<div class="metadata-group">';\r
            for (const [key, value] of Object.entries(node.userData)) {\r
                html += \`<div class="metadata-item">\r
                    <span class="metadata-key">\${this._escapeHtml(key)}:</span>\r
                    <span class="metadata-value">\${this._escapeHtml(this._formatValue(value))}</span>\r
                </div>\`;\r
            }\r
            html += '</div>';\r
        }\r
        \r
        html += '</div>';\r
        return html;\r
    }\r
    \r
    _renderMaterials(materials) {\r
        let html = '<div class="items-list">';\r
        materials.forEach(material => {\r
            const isSelected = this.selectedItem === material.id;\r
            const icon = '\u{1F3A8}';\r
            \r
            html += \`\r
                <div class="list-item \${isSelected ? 'selected' : ''}" \r
                     data-item-id="\${material.id}" \r
                     data-item-type="material">\r
                    <span class="item-icon">\${icon}</span>\r
                    <span class="item-name">\${this._escapeHtml(material.name)}</span>\r
                    <span class="item-type">\${material.type}</span>\r
                </div>\`;\r
        });\r
        html += '</div>';\r
        return html;\r
    }\r
    \r
    _renderTextures(textures) {\r
        let html = '<div class="items-list">';\r
        textures.forEach(texture => {\r
            const isSelected = this.selectedItem === texture.id;\r
            const icon = '\u{1F5BC}\uFE0F';\r
            const dimensions = texture.image ? \`\${texture.image.width}\xD7\${texture.image.height}\` : 'Unknown';\r
            \r
            html += \`\r
                <div class="list-item \${isSelected ? 'selected' : ''}" \r
                     data-item-id="\${texture.id}" \r
                     data-item-type="texture">\r
                    <span class="item-icon">\${icon}</span>\r
                    <span class="item-name">\${this._escapeHtml(texture.name)}</span>\r
                    <span class="item-info">\${dimensions}</span>\r
                </div>\`;\r
        });\r
        html += '</div>';\r
        return html;\r
    }\r
    \r
    _renderAnimations(animations) {\r
        let html = '<div class="items-list expandable">';\r
        animations.forEach(animation => {\r
            const isExpanded = this.expandedNodes.has(animation.id);\r
            const isSelected = this.selectedItem === animation.id;\r
            const icon = '\u{1F3AC}';\r
            \r
            html += \`\r
                <div class="list-item \${isSelected ? 'selected' : ''}" \r
                     data-item-id="\${animation.id}" \r
                     data-item-type="animation">\r
                    \${animation.tracks && animation.tracks.length > 0 ? \`\r
                        <span class="item-toggle \${isExpanded ? 'expanded' : ''}" data-toggle-for="\${animation.id}">\r
                            \${isExpanded ? '\u25BC' : '\u25B6'}\r
                        </span>\` : \r
                        '<span class="node-toggle-spacer"></span>'\r
                    }\r
                    <span class="item-icon">\${icon}</span>\r
                    <span class="item-name">\${this._escapeHtml(animation.name)}</span>\r
                    <span class="item-info">\${animation.duration ? animation.duration.toFixed(2) : '0.00'}s</span>\r
                </div>\`;\r
            \r
            // Show tracks if expanded\r
            if (isExpanded && animation.tracks && animation.tracks.length > 0) {\r
                html += '<div class="sub-items">';\r
                animation.tracks.forEach(track => {\r
                    html += \`\r
                        <div class="sub-item">\r
                            <span class="sub-item-icon">\u{1F4C8}</span>\r
                            <span class="sub-item-name">\${this._escapeHtml(track.name)}</span>\r
                            <span class="sub-item-type">\${track.type}</span>\r
                        </div>\`;\r
                });\r
                html += '</div>';\r
            }\r
        });\r
        html += '</div>';\r
        return html;\r
    }\r
    \r
    _renderSkeletons(skeletons) {\r
        let html = '<div class="items-list expandable">';\r
        skeletons.forEach(skeleton => {\r
            const isExpanded = this.expandedNodes.has(skeleton.id);\r
            const isSelected = this.selectedItem === skeleton.id;\r
            const icon = '\u{1F9B4}';\r
            \r
            html += \`\r
                <div class="list-item \${isSelected ? 'selected' : ''}" \r
                     data-item-id="\${skeleton.id}" \r
                     data-item-type="skeleton">\r
                    \${skeleton.bones && skeleton.bones.length > 0 ? \`\r
                        <span class="item-toggle \${isExpanded ? 'expanded' : ''}" data-toggle-for="\${skeleton.id}">\r
                            \${isExpanded ? '\u25BC' : '\u25B6'}\r
                        </span>\` : \r
                        '<span class="node-toggle-spacer"></span>'\r
                    }\r
                    <span class="item-icon">\${icon}</span>\r
                    <span class="item-name">\${this._escapeHtml(skeleton.name)}</span>\r
                    <span class="item-info">\${skeleton.bones ? skeleton.bones.length : 0} bones</span>\r
                </div>\`;\r
            \r
            // Show bones if expanded\r
            if (isExpanded && skeleton.bones && skeleton.bones.length > 0) {\r
                html += '<div class="sub-items">';\r
                skeleton.bones.forEach(bone => {\r
                    html += \`\r
                        <div class="sub-item">\r
                            <span class="sub-item-icon">\u{1F9B4}</span>\r
                            <span class="sub-item-name">\${this._escapeHtml(bone.name)}</span>\r
                            \${bone.parent ? \`<span class="sub-item-info">\u2192 \${bone.parent}</span>\` : ''}\r
                        </div>\`;\r
                });\r
                html += '</div>';\r
            }\r
        });\r
        html += '</div>';\r
        return html;\r
    }\r
    \r
    _renderLights(lights) {\r
        let html = '<div class="items-list">';\r
        lights.forEach(light => {\r
            const isSelected = this.selectedItem === light.id;\r
            const icon = this._getLightIcon(light.type);\r
            \r
            html += \`\r
                <div class="list-item \${isSelected ? 'selected' : ''}" \r
                     data-item-id="\${light.id}" \r
                     data-item-type="light">\r
                    <span class="item-icon">\${icon}</span>\r
                    <span class="item-name">\${this._escapeHtml(light.name)}</span>\r
                    <span class="item-type">\${light.type}</span>\r
                    \${light.castShadow ? '<span class="item-badge" title="Casts Shadow">\u{1F311}</span>' : ''}\r
                </div>\`;\r
        });\r
        html += '</div>';\r
        return html;\r
    }\r
    \r
    _renderCameras(cameras) {\r
        let html = '<div class="items-list">';\r
        cameras.forEach(camera => {\r
            const isSelected = this.selectedItem === camera.id;\r
            const icon = camera.type === 'OrthographicCamera' ? '\u{1F4F9}' : '\u{1F4F7}';\r
            \r
            html += \`\r
                <div class="list-item \${isSelected ? 'selected' : ''}" \r
                     data-item-id="\${camera.id}" \r
                     data-item-type="camera">\r
                    <span class="item-icon">\${icon}</span>\r
                    <span class="item-name">\${this._escapeHtml(camera.name)}</span>\r
                    <span class="item-type">\${camera.type}</span>\r
                </div>\`;\r
        });\r
        html += '</div>';\r
        return html;\r
    }\r
    \r
    _renderGeometries(geometries) {\r
        let html = '<div class="items-list">';\r
        geometries.forEach(geometry => {\r
            const isSelected = this.selectedItem === geometry.id;\r
            const icon = '\u2B21';\r
            const vertCount = geometry.attributes.position ? geometry.attributes.position.count : 0;\r
            \r
            html += \`\r
                <div class="list-item \${isSelected ? 'selected' : ''}" \r
                     data-item-id="\${geometry.id}" \r
                     data-item-type="geometry">\r
                    <span class="item-icon">\${icon}</span>\r
                    <span class="item-name">\${this._escapeHtml(geometry.name)}</span>\r
                    <span class="item-info">\${vertCount} verts</span>\r
                </div>\`;\r
        });\r
        html += '</div>';\r
        return html;\r
    }\r
    \r
    // ... (Keep all the helper methods like _getNodeIcon, _getLightIcon, etc.)\r
    \r
    _enableToolbar() {\r
        const searchInput = document.getElementById('outliner-search');\r
        const expandBtn = document.getElementById('outliner-expand-all');\r
        const collapseBtn = document.getElementById('outliner-collapse-all');\r
        const categorySelect = document.getElementById('outliner-category');\r
        \r
        if (searchInput) {\r
            searchInput.disabled = false;\r
            searchInput.value = this.searchTerm;\r
        }\r
        if (expandBtn) expandBtn.disabled = false;\r
        if (collapseBtn) collapseBtn.disabled = false;\r
        if (categorySelect) categorySelect.disabled = false;\r
    }\r
    \r
    _setupEventListeners() {\r
        const container = document.getElementById('outliner-tree');\r
        if (!container) return;\r
        \r
        // Remove any existing listeners first\r
        if (this._clickHandler) {\r
            container.removeEventListener('click', this._clickHandler);\r
        }\r
        if (this._mousedownHandler) {\r
            container.removeEventListener('mousedown', this._mousedownHandler);\r
        }\r
        if (this._dblclickHandler) {\r
            container.removeEventListener('dblclick', this._dblclickHandler);\r
        }\r
        \r
        // Create bound handlers\r
        this._clickHandler = (e) => {\r
            console.log('[OutlinerControls] Click event on:', e.target.className);\r
            \r
            // Check for visibility toggle FIRST (highest priority)\r
            const visibilityToggle = e.target.closest('.visibility-toggle');\r
            if (visibilityToggle) {\r
                const nodeId = visibilityToggle.dataset.visibilityToggle;\r
                if (nodeId) {\r
                    console.log('[OutlinerControls] Visibility toggle clicked for:', nodeId);\r
                    this._toggleVisibility(nodeId);\r
                    e.preventDefault();\r
                    e.stopPropagation();\r
                    return;\r
                }\r
            }\r
            \r
            // Check for metadata toggle\r
            const metadataToggle = e.target.closest('.metadata-toggle');\r
            if (metadataToggle) {\r
                const nodeId = metadataToggle.dataset.metadataToggle;\r
                if (nodeId) {\r
                    console.log('[OutlinerControls] Metadata toggle clicked for:', nodeId);\r
                    this._toggleMetadata(nodeId);\r
                    e.preventDefault();\r
                    e.stopPropagation();\r
                    return;\r
                }\r
            }\r
            \r
            // Check if clicking directly on toggle text or its parent span\r
            let toggleEl = null;\r
            let toggleId = null;\r
            \r
            // First check if we clicked directly on a toggle or its child\r
            if (e.target.classList.contains('node-toggle') || e.target.classList.contains('item-toggle')) {\r
                toggleEl = e.target;\r
                toggleId = toggleEl.dataset.toggleFor;\r
            } else if (e.target.parentElement && \r
                      (e.target.parentElement.classList.contains('node-toggle') || \r
                       e.target.parentElement.classList.contains('item-toggle'))) {\r
                toggleEl = e.target.parentElement;\r
                toggleId = toggleEl.dataset.toggleFor;\r
            }\r
            \r
            // Handle toggle click\r
            if (toggleEl && toggleId && !toggleEl.classList.contains('node-toggle-spacer')) {\r
                console.log('[OutlinerControls] Toggle clicked for ID:', toggleId);\r
                this._toggleNode(toggleId);\r
                e.preventDefault();\r
                e.stopPropagation();\r
                return;\r
            }\r
            \r
            // Category header toggle\r
            const categoryToggle = e.target.closest('[data-category-toggle]');\r
            if (categoryToggle) {\r
                const category = categoryToggle.dataset.categoryToggle;\r
                console.log('[OutlinerControls] Category toggle clicked:', category);\r
                this._toggleCategory(category);\r
                e.preventDefault();\r
                return;\r
            }\r
            \r
            // Check if clicking on the node name specifically (for text selection)\r
            const nodeName = e.target.closest('.node-name, .item-name, .sub-item-name');\r
            if (nodeName) {\r
                // Allow text selection by not preventing default\r
                // But still handle row selection if not selecting text\r
                const selection = window.getSelection();\r
                if (!selection.toString()) {\r
                    // No text selected, handle row click\r
                    this._handleRowClick(e);\r
                }\r
                return;\r
            }\r
            \r
            // Handle row selection for other clicks\r
            this._handleRowClick(e);\r
        };\r
        \r
        // Add the click handler\r
        container.addEventListener('click', this._clickHandler);\r
        \r
        // Prevent text selection from being lost on row hover\r
        container.addEventListener('mousedown', (e) => {\r
            const nodeName = e.target.closest('.node-name, .item-name, .sub-item-name, .metadata-value');\r
            if (nodeName && !nodeName.classList.contains('clickable')) {\r
                // Allow text selection\r
                e.stopPropagation();\r
            }\r
        });\r
        \r
        // Double-click to expand/collapse\r
        container.addEventListener('dblclick', (e) => {\r
            const nodeRow = e.target.closest('.node-row');\r
            if (nodeRow) {\r
                const nodeEl = nodeRow.closest('.outliner-node');\r
                const nodeId = nodeEl?.dataset.nodeId;\r
                if (nodeId) {\r
                    const node = this._findNodeById(this.sceneData.nodes, nodeId);\r
                    if (node && node.children && node.children.length > 0) {\r
                        this._toggleNode(nodeId);\r
                        e.preventDefault();\r
                    }\r
                }\r
            }\r
        });\r
        \r
        // Category filter\r
        const categorySelect = document.getElementById('outliner-category');\r
        if (categorySelect) {\r
            categorySelect.addEventListener('change', (e) => {\r
                this.activeCategory = e.target.value;\r
                this._renderSceneExplorer();\r
            });\r
        }\r
        \r
        // Search functionality\r
        const searchInput = document.getElementById('outliner-search');\r
        if (searchInput) {\r
            let searchTimeout;\r
            searchInput.addEventListener('input', (e) => {\r
                clearTimeout(searchTimeout);\r
                searchTimeout = setTimeout(() => {\r
                    this.searchTerm = e.target.value.toLowerCase();\r
                    this._applySearchFilter();\r
                }, 300);\r
            });\r
        }\r
        \r
        // Expand/Collapse all buttons\r
        const expandBtn = document.getElementById('outliner-expand-all');\r
        if (expandBtn) {\r
            expandBtn.addEventListener('click', () => this._expandAll());\r
        }\r
        \r
        const collapseBtn = document.getElementById('outliner-collapse-all');\r
        if (collapseBtn) {\r
            collapseBtn.addEventListener('click', () => this._collapseAll());\r
        }\r
    }\r
    \r
    _handleRowClick(e) {\r
        // Node row click\r
        const nodeRow = e.target.closest('.node-row');\r
        if (nodeRow) {\r
            const nodeEl = nodeRow.closest('.outliner-node');\r
            const nodeId = nodeEl?.dataset.nodeId;\r
            if (nodeId) {\r
                this._selectItem(nodeId, 'node');\r
            }\r
        }\r
        \r
        // List item click\r
        const listItem = e.target.closest('.list-item');\r
        if (listItem) {\r
            const itemId = listItem.dataset.itemId;\r
            const itemType = listItem.dataset.itemType;\r
            if (itemId) {\r
                this._selectItem(itemId, itemType);\r
            }\r
        }\r
        \r
        // Reference click (material, geometry, skeleton links)\r
        const refEl = e.target.closest('[data-ref-id]');\r
        if (refEl && refEl.classList.contains('clickable')) {\r
            this._selectItemByReference(refEl.dataset.refId, refEl.dataset.refType);\r
            e.preventDefault();\r
        }\r
    }\r
    \r
    // ... (Keep all other methods unchanged)\r
    \r
    _getNodeIcon(node) {\r
        const iconMap = {\r
            'Scene': '\u{1F3AC}',\r
            'Group': '\u{1F4C1}',\r
            'TransformNode': '\u{1F504}',\r
            'Object3D': '\u{1F4E6}',\r
            'Mesh': '\u{1F537}',\r
            'SkinnedMesh': '\u{1F9B4}',\r
            'Bone': '\u{1F9B4}',\r
            'Light': '\u{1F4A1}',\r
            'DirectionalLight': '\u2600\uFE0F',\r
            'PointLight': '\u{1F4A1}',\r
            'SpotLight': '\u{1F526}',\r
            'AmbientLight': '\u{1F310}',\r
            'HemisphereLight': '\u{1F313}',\r
            'Camera': '\u{1F4F7}',\r
            'PerspectiveCamera': '\u{1F4F7}',\r
            'OrthographicCamera': '\u{1F4F9}',\r
            'Line': '\u{1F4CF}',\r
            'Points': '\u26AB',\r
            'Sprite': '\u{1F5BC}\uFE0F'\r
        };\r
        \r
        return iconMap[node.type] || iconMap[node.className] || '\u{1F4E6}';\r
    }\r
    \r
    _getLightIcon(type) {\r
        const iconMap = {\r
            'DirectionalLight': '\u2600\uFE0F',\r
            'PointLight': '\u{1F4A1}',\r
            'SpotLight': '\u{1F526}',\r
            'AmbientLight': '\u{1F310}',\r
            'HemisphereLight': '\u{1F313}'\r
        };\r
        return iconMap[type] || '\u{1F4A1}';\r
    }\r
    \r
    _getCategoryIcon(category) {\r
        const iconMap = {\r
            'nodes': '\u{1F333}',\r
            'materials': '\u{1F3A8}',\r
            'textures': '\u{1F5BC}\uFE0F',\r
            'animations': '\u{1F3AC}',\r
            'skeletons': '\u{1F9B4}',\r
            'lights': '\u{1F4A1}',\r
            'cameras': '\u{1F4F7}',\r
            'geometries': '\u2B21'\r
        };\r
        return iconMap[category] || '\u{1F4C1}';\r
    }\r
    \r
    _getCategoryDisplayName(category) {\r
        const nameMap = {\r
            'nodes': 'Scene',\r
            'materials': 'Materials',\r
            'textures': 'Textures',\r
            'animations': 'Animation Groups',\r
            'skeletons': 'Skeletons',\r
            'lights': 'Lights',\r
            'cameras': 'Cameras',\r
            'geometries': 'Geometries'\r
        };\r
        return nameMap[category] || category;\r
    }\r
    \r
    _categoryHasData(category, data) {\r
        if (!data) return false;\r
        if (category === 'nodes') return !!data;\r
        return Array.isArray(data) ? data.length > 0 : false;\r
    }\r
    \r
    _getCategoryCount(category, data) {\r
        if (!data) return 0;\r
        if (category === 'nodes') return this._countNodes(data);\r
        return Array.isArray(data) ? data.length : 0;\r
    }\r
    \r
    _countNodes(node) {\r
        if (!node) return 0;\r
        let count = 1;\r
        if (node.children) {\r
            node.children.forEach(child => {\r
                count += this._countNodes(child);\r
            });\r
        }\r
        return count;\r
    }\r
    \r
    _hasMetadata(node) {\r
        return !!(\r
            node.position || node.rotation || node.scale ||\r
            node.userData && Object.keys(node.userData).length > 0 ||\r
            node.materialId || node.geometryId || node.skeletonId ||\r
            node.meshInfo || node.lightInfo || node.cameraInfo\r
        );\r
    }\r
    \r
    _formatValue(value) {\r
        if (typeof value === 'object' && value !== null) {\r
            return JSON.stringify(value, null, 2);\r
        }\r
        if (typeof value === 'boolean') {\r
            return value ? '\u2713' : '\u2717';\r
        }\r
        if (typeof value === 'number') {\r
            return value.toFixed(3);\r
        }\r
        return String(value);\r
    }\r
    \r
    _toggleCategory(category) {\r
        console.log(\`[OutlinerControls] Toggling category: \${category}\`);\r
        console.log(\`[OutlinerControls] Currently expanded categories:\`, Array.from(this.expandedCategories));\r
        \r
        if (this.expandedCategories.has(category)) {\r
            this.expandedCategories.delete(category);\r
            console.log(\`[OutlinerControls] Category collapsed: \${category}\`);\r
        } else {\r
            this.expandedCategories.add(category);\r
            console.log(\`[OutlinerControls] Category expanded: \${category}\`);\r
        }\r
        \r
        console.log(\`[OutlinerControls] After toggle, expanded categories:\`, Array.from(this.expandedCategories));\r
        this._renderSceneExplorer();\r
    }\r
    \r
    _toggleNode(nodeId) {\r
        console.log('[OutlinerControls] Toggling node:', nodeId);\r
        console.log('[OutlinerControls] Currently expanded:', this.expandedNodes.has(nodeId));\r
        \r
        if (this.expandedNodes.has(nodeId)) {\r
            this.expandedNodes.delete(nodeId);\r
            console.log('[OutlinerControls] Node collapsed:', nodeId);\r
        } else {\r
            this.expandedNodes.add(nodeId);\r
            console.log('[OutlinerControls] Node expanded:', nodeId);\r
        }\r
        \r
        this._renderSceneExplorer();\r
    }\r
    \r
    _toggleMetadata(nodeId) {\r
        console.log('[OutlinerControls] Toggling metadata for node:', nodeId);\r
        \r
        if (this.expandedMetadata.has(nodeId)) {\r
            this.expandedMetadata.delete(nodeId);\r
            console.log('[OutlinerControls] Metadata collapsed:', nodeId);\r
        } else {\r
            this.expandedMetadata.add(nodeId);\r
            console.log('[OutlinerControls] Metadata expanded:', nodeId);\r
        }\r
        \r
        this._renderSceneExplorer();\r
    }\r
    \r
    _toggleVisibility(nodeId) {\r
        console.log('[OutlinerControls] Toggling visibility for node:', nodeId);\r
        \r
        // Find the node in the scene data\r
        const node = this._findNodeById(this.sceneData.nodes, nodeId);\r
        if (!node) {\r
            console.warn('[OutlinerControls] Node not found:', nodeId);\r
            return;\r
        }\r
        \r
        // Toggle the visibility in our data\r
        node.visible = !node.visible;\r
        console.log('[OutlinerControls] Node visibility set to:', node.visible);\r
        \r
        // Send message to worker to update Three.js scene\r
        if (window.worker) {\r
            window.worker.postMessage({\r
                type: 'TOGGLE_NODE_VISIBILITY',\r
                data: {\r
                    nodeId: nodeId,\r
                    visible: node.visible\r
                }\r
            });\r
        }\r
        \r
        // Notify parent of node visibility change\r
        if (window.opener && !window.opener.closed) {\r
            console.log('[OutlinerControls] Sending node visibility change to parent:', node.name, node.visible);\r
            window.opener.postMessage({\r
                type: 'NODE_VISIBILITY_CHANGE',\r
                data: {\r
                    nodeName: node.name,\r
                    visible: node.visible\r
                }\r
            }, '*');\r
        }\r
        \r
        // Update just the visibility toggle icon without re-rendering everything\r
        const visToggle = document.querySelector(\`[data-visibility-toggle="\${nodeId}"]\`);\r
        if (visToggle) {\r
            visToggle.classList.toggle('hidden', !node.visible);\r
            visToggle.title = node.visible ? 'Hide' : 'Show';\r
        }\r
    }\r
    \r
    _expandNode(nodeId) {\r
        this.expandedNodes.add(nodeId);\r
    }\r
    \r
    _applyInitialNodeVisibility(node, visibilityMap) {\r
        if (!node) return;\r
        \r
        // Apply visibility if this node is in the map\r
        if (visibilityMap[node.name] !== undefined) {\r
            node.visible = visibilityMap[node.name];\r
            console.log(\`[OutlinerControls] Set node \${node.name} visibility to \${node.visible}\`);\r
            \r
            // Send visibility update to worker to update Three.js scene\r
            if (window.worker) {\r
                window.worker.postMessage({\r
                    type: 'TOGGLE_NODE_VISIBILITY',\r
                    data: {\r
                        nodeId: node.id,\r
                        visible: node.visible\r
                    }\r
                });\r
            }\r
        }\r
        \r
        // Recursively apply to children\r
        if (node.children && node.children.length > 0) {\r
            node.children.forEach(child => {\r
                this._applyInitialNodeVisibility(child, visibilityMap);\r
            });\r
        }\r
    }\r
    \r
    _sendAllNodeVisibilityToParent() {\r
        if (!window.opener || window.opener.closed) return;\r
        \r
        const visibilityMap = {};\r
        this._collectNodeVisibility(this.sceneData.nodes, visibilityMap);\r
        \r
        // Only send if we have any nodes with non-default visibility\r
        const hasHiddenNodes = Object.values(visibilityMap).some(v => !v);\r
        if (hasHiddenNodes || Object.keys(visibilityMap).length === 0) {\r
            console.log('[OutlinerControls] Sending initial node visibility to parent:', visibilityMap);\r
            window.opener.postMessage({\r
                type: 'NODE_VISIBILITY_CHANGE',\r
                data: {\r
                    nodeVisibility: visibilityMap\r
                }\r
            }, '*');\r
        }\r
    }\r
    \r
    _collectNodeVisibility(node, visibilityMap) {\r
        if (!node) return;\r
        \r
        // Only track nodes that are explicitly hidden\r
        if (node.name && node.visible === false) {\r
            visibilityMap[node.name] = false;\r
        }\r
        \r
        // Recursively collect from children\r
        if (node.children && node.children.length > 0) {\r
            node.children.forEach(child => {\r
                this._collectNodeVisibility(child, visibilityMap);\r
            });\r
        }\r
    }\r
    \r
    _expandAll() {\r
        // Expand all categories\r
        ['nodes', 'materials', 'textures', 'animations', 'skeletons', 'lights', 'cameras', 'geometries']\r
            .forEach(cat => this.expandedCategories.add(cat));\r
        \r
        // Expand all nodes\r
        this._walkAllNodes((item) => {\r
            if (item.children && item.children.length > 0) {\r
                this.expandedNodes.add(item.id);\r
            }\r
            // Also expand metadata for nodes that have it\r
            if (this._hasMetadata(item)) {\r
                this.expandedMetadata.add(item.id);\r
            }\r
        });\r
        \r
        // Expand all animations and skeletons\r
        [...this.sceneData.animations, ...this.sceneData.skeletons].forEach(item => {\r
            if ((item.tracks && item.tracks.length > 0) || (item.bones && item.bones.length > 0)) {\r
                this.expandedNodes.add(item.id);\r
            }\r
        });\r
        \r
        this._renderSceneExplorer();\r
    }\r
    \r
    _collapseAll() {\r
        this.expandedCategories.clear();\r
        this.expandedCategories.add('nodes'); // Keep nodes category expanded\r
        this.expandedNodes.clear();\r
        this.expandedMetadata.clear(); // Also clear metadata\r
        this._renderSceneExplorer();\r
    }\r
    \r
    _selectItem(itemId, itemType) {\r
        this.selectedItem = itemId;\r
        \r
        // Update visual selection\r
        document.querySelectorAll('.outliner-node, .list-item').forEach(el => {\r
            el.classList.remove('selected');\r
        });\r
        \r
        const selector = itemType === 'node' \r
            ? \`[data-node-id="\${itemId}"]\`\r
            : \`[data-item-id="\${itemId}"]\`;\r
        \r
        const selectedEl = document.querySelector(selector);\r
        if (selectedEl) {\r
            selectedEl.classList.add('selected');\r
        }\r
        \r
        // Find the actual item data\r
        let item = null;\r
        switch (itemType) {\r
            case 'node':\r
                item = this._findNodeById(this.sceneData.nodes, itemId);\r
                break;\r
            case 'material':\r
                item = this.sceneData.materials.find(m => m.id === itemId);\r
                break;\r
            case 'texture':\r
                item = this.sceneData.textures.find(t => t.id === itemId);\r
                break;\r
            case 'animation':\r
                item = this.sceneData.animations.find(a => a.id === itemId);\r
                break;\r
            case 'skeleton':\r
                item = this.sceneData.skeletons.find(s => s.id === itemId);\r
                break;\r
            case 'light':\r
                item = this.sceneData.lights.find(l => l.id === itemId);\r
                break;\r
            case 'camera':\r
                item = this.sceneData.cameras.find(c => c.id === itemId);\r
                break;\r
            case 'geometry':\r
                item = this.sceneData.geometries.find(g => g.id === itemId);\r
                break;\r
        }\r
        \r
        if (item) {\r
            console.log(\`[OutlinerControls] \${itemType} selected:\`, item);\r
            \r
            // Emit selection event\r
            this.emit('item-selected', {\r
                itemId: itemId,\r
                itemType: itemType,\r
                item: item\r
            });\r
            \r
            // Send to worker for potential highlighting\r
            if (window.worker && itemType === 'node') {\r
                window.worker.postMessage({\r
                    type: 'HIGHLIGHT_NODE',\r
                    data: { nodeId: itemId }\r
                });\r
            }\r
        }\r
    }\r
    \r
    _selectItemByReference(refId, refType) {\r
        // Find the category and expand it\r
        const categoryMap = {\r
            'material': 'materials',\r
            'texture': 'textures',\r
            'skeleton': 'skeletons',\r
            'geometry': 'geometries'\r
        };\r
        \r
        const category = categoryMap[refType];\r
        if (category) {\r
            this.expandedCategories.add(category);\r
            this.activeCategory = category;\r
            this._renderSceneExplorer();\r
            \r
            // Select the item after render\r
            setTimeout(() => {\r
                this._selectItem(refId, refType);\r
            }, 10);\r
        }\r
    }\r
    \r
    _applySearchFilter() {\r
        if (!this.searchTerm) {\r
            // Show all items\r
            document.querySelectorAll('.outliner-node, .list-item, .category-section').forEach(el => {\r
                el.style.display = '';\r
            });\r
            document.querySelectorAll('.search-match').forEach(el => {\r
                el.classList.remove('search-match');\r
            });\r
            return;\r
        }\r
        \r
        // Hide non-matching items and highlight matches\r
        this._applySearchToNodes();\r
        this._applySearchToLists();\r
    }\r
    \r
    _applySearchToNodes() {\r
        if (!this.sceneData.nodes) return;\r
        \r
        this._walkAllNodes((node) => {\r
            const nodeEl = document.querySelector(\`[data-node-id="\${node.id}"]\`);\r
            if (!nodeEl) return;\r
            \r
            const matches = this._itemMatchesSearch(node);\r
            const hasMatchingDescendant = this._hasMatchingDescendant(node);\r
            \r
            nodeEl.style.display = (matches || hasMatchingDescendant) ? '' : 'none';\r
            \r
            const nameEl = nodeEl.querySelector('.node-name');\r
            if (nameEl) {\r
                nameEl.classList.toggle('search-match', matches);\r
            }\r
            \r
            // Auto-expand parents of matching nodes\r
            if (matches && !hasMatchingDescendant) {\r
                this._expandParentsOf(node.id);\r
            }\r
        });\r
    }\r
    \r
    _applySearchToLists() {\r
        const categories = ['materials', 'textures', 'animations', 'skeletons', 'lights', 'cameras', 'geometries'];\r
        \r
        categories.forEach(category => {\r
            const items = this.sceneData[category];\r
            if (!Array.isArray(items)) return;\r
            \r
            let hasMatch = false;\r
            items.forEach(item => {\r
                const itemEl = document.querySelector(\`[data-item-id="\${item.id}"]\`);\r
                if (!itemEl) return;\r
                \r
                const matches = this._itemMatchesSearch(item);\r
                itemEl.style.display = matches ? '' : 'none';\r
                \r
                const nameEl = itemEl.querySelector('.item-name');\r
                if (nameEl) {\r
                    nameEl.classList.toggle('search-match', matches);\r
                }\r
                \r
                if (matches) hasMatch = true;\r
            });\r
            \r
            // Hide/show category if no matches\r
            const categoryEl = document.querySelector(\`[data-category="\${category}"]\`);\r
            if (categoryEl) {\r
                categoryEl.style.display = hasMatch ? '' : 'none';\r
            }\r
        });\r
    }\r
    \r
    _itemMatchesSearch(item) {\r
        if (!this.searchTerm) return true;\r
        \r
        const searchLower = this.searchTerm.toLowerCase();\r
        \r
        // Check name\r
        if (item.name && item.name.toLowerCase().includes(searchLower)) {\r
            return true;\r
        }\r
        \r
        // Check type/className\r
        if (item.type && item.type.toLowerCase().includes(searchLower)) {\r
            return true;\r
        }\r
        if (item.className && item.className.toLowerCase().includes(searchLower)) {\r
            return true;\r
        }\r
        \r
        // Check user data\r
        if (item.userData) {\r
            for (const [key, value] of Object.entries(item.userData)) {\r
                if (key.toLowerCase().includes(searchLower) ||\r
                    String(value).toLowerCase().includes(searchLower)) {\r
                    return true;\r
                }\r
            }\r
        }\r
        \r
        return false;\r
    }\r
    \r
    _hasMatchingDescendant(node) {\r
        if (!node.children) return false;\r
        \r
        for (const child of node.children) {\r
            if (this._itemMatchesSearch(child) || this._hasMatchingDescendant(child)) {\r
                return true;\r
            }\r
        }\r
        return false;\r
    }\r
    \r
    _expandParentsOf(nodeId) {\r
        const path = this._findNodePath(this.sceneData.nodes, nodeId);\r
        if (path) {\r
            path.forEach(node => {\r
                if (node.children && node.children.length > 0) {\r
                    this.expandedNodes.add(node.id);\r
                }\r
            });\r
        }\r
    }\r
    \r
    _findNodeById(tree, nodeId) {\r
        if (!tree) return null;\r
        if (tree.id === nodeId) return tree;\r
        \r
        if (tree.children) {\r
            for (const child of tree.children) {\r
                const found = this._findNodeById(child, nodeId);\r
                if (found) return found;\r
            }\r
        }\r
        \r
        return null;\r
    }\r
    \r
    _findNodePath(tree, nodeId, path = []) {\r
        if (!tree) return null;\r
        \r
        path.push(tree);\r
        \r
        if (tree.id === nodeId) return path;\r
        \r
        if (tree.children) {\r
            for (const child of tree.children) {\r
                const foundPath = this._findNodePath(child, nodeId, [...path]);\r
                if (foundPath) return foundPath;\r
            }\r
        }\r
        \r
        return null;\r
    }\r
    \r
    _walkAllNodes(callback) {\r
        if (this.sceneData.nodes) {\r
            this._walkTree(this.sceneData.nodes, callback);\r
        }\r
    }\r
    \r
    _walkTree(tree, callback) {\r
        callback(tree);\r
        if (tree.children) {\r
            tree.children.forEach(child => this._walkTree(child, callback));\r
        }\r
    }\r
    \r
    _updateStats() {\r
        const statsEl = document.getElementById('outliner-stats');\r
        if (!statsEl || !this.sceneData.stats) return;\r
        \r
        const stats = this.sceneData.stats;\r
        statsEl.innerHTML = \`\r
            <div class="stats-row">\r
                <span class="stat-item">Nodes: \${stats.totalNodes || 0}</span>\r
                <span class="stat-item">Materials: \${stats.totalMaterials || 0}</span>\r
                <span class="stat-item">Textures: \${stats.totalTextures || 0}</span>\r
                <span class="stat-item">Animations: \${stats.totalAnimations || 0}</span>\r
            </div>\`;\r
    }\r
    \r
    _escapeHtml(text) {\r
        const div = document.createElement('div');\r
        div.textContent = text;\r
        return div.innerHTML;\r
    }\r
    \r
    dispose() {\r
        this.sceneData = {\r
            nodes: null,\r
            materials: [],\r
            textures: [],\r
            animations: [],\r
            skeletons: [],\r
            lights: [],\r
            cameras: [],\r
            geometries: []\r
        };\r
        this.expandedNodes.clear();\r
        this.expandedCategories.clear();\r
        this.selectedItem = null;\r
        console.log('[OutlinerControls] Disposed');\r
    }\r
}`,
        "animationControls": `/* FILE: editor/z3d-object-editor/templates/scripts/components/animation-controls.js */\r
/* Animation Viewer and Playback Controls */\r
\r
class AnimationControls extends EventEmitter {\r
    constructor(config) {\r
        super();\r
        this.config = config;\r
\r
        this.ANIMATION_DEBUG = !!(this.config?.debugAnimation || (typeof window !== 'undefined' && window.ANIMATION_DEBUG));\r
        console.log = (...args) => { if (this.ANIMATION_DEBUG) this._originalConsoleLog(...args); };\r
\r
        this.isInitialized = false;\r
        this.isDisposed = false;\r
\r
        // Animation state\r
        this.animations = [];\r
        this.currentAnimation = null;\r
        this.currentAnimationIndex = 0;\r
        this.isPlaying = false;\r
        this.isLooping = true;\r
        this.playbackSpeed = 1.0;\r
        this.currentTime = 0;\r
        this.duration = 0;\r
        \r
        // Scrubbing state\r
        this.isScrubbing = false;\r
        this.wasPlayingBeforeScrub = false;\r
        \r
        // Skinned mesh sync state\r
        this.skinnedMeshSync = {\r
            enabled: false,\r
            lastUpdateTime: 0,\r
            updateFrequency: 30, // Hz\r
            minUpdateInterval: 1000 / 30 // milliseconds\r
        };\r
        \r
        // UI elements\r
        this.container = null;\r
        this.animationSelect = null;\r
        this.playBtn = null;\r
        this.loopBtn = null;\r
        this.timeSlider = null;\r
        this.currentTimeDisplay = null;\r
        this.durationDisplay = null;\r
        this.speedControl = null;\r
        \r
        // Update interval\r
        this.updateInterval = null;\r
    }\r
    \r
    async initialize(container) {\r
        if (!container) {\r
            console.error('[AnimationControls] No container provided');\r
            return;\r
        }\r
        \r
        this.container = container;\r
        this._render();\r
        this._setupEventListeners();\r
        this._listenForAnimationData();\r
        \r
        this.isInitialized = true;\r
        console.log('[AnimationControls] \u2705 Initialized');\r
    }\r
    \r
    _render() {\r
        this.container.innerHTML = \`\r
            <div class="animation-controls">\r
                <!-- Animation Selection - Compact Layout -->\r
                <div class="animation-header-compact">\r
                    <div class="animation-select-row">\r
                        <select id="animation-select" class="animation-select" disabled>\r
                            <option value="">No animations</option>\r
                        </select>\r
                        <div class="animation-info-inline">\r
                            <span class="animation-name">No animation selected</span>\r
                            <span class="animation-duration">0:00</span>\r
                        </div>\r
                    </div>\r
                </div>\r
                \r
                <!-- Playback Controls -->\r
                <div class="playback-controls">\r
                    <div class="control-buttons">\r
                        <button id="anim-play-btn" class="control-btn play-btn" disabled title="Play/Pause">\r
                            \u25B6\uFE0F\r
                        </button>\r
                        <button id="anim-loop-btn" class="control-btn loop-btn active" disabled title="Toggle Loop">\r
                            \u{1F501}\r
                        </button>\r
                        <div class="speed-control">\r
                            <label>Speed:</label>\r
                            <select id="anim-speed-select" class="speed-select" disabled>\r
                                <option value="0.25">0.25x</option>\r
                                <option value="0.5">0.5x</option>\r
                                <option value="1" selected>1x</option>\r
                                <option value="1.5">1.5x</option>\r
                                <option value="2">2x</option>\r
                            </select>\r
                        </div>\r
                    </div>\r
                    \r
                    <!-- Timeline -->\r
                    <div class="timeline-container">\r
                        <div class="time-display">\r
                            <span id="current-time">0:00</span> / <span id="total-duration">0:00</span>\r
                        </div>\r
                        <div class="timeline">\r
                            <input type="range" \r
                                   id="time-slider" \r
                                   class="time-slider" \r
                                   min="0" \r
                                   max="100" \r
                                   value="0" \r
                                   step="0.1"\r
                                   disabled>\r
                            <div class="timeline-progress" id="timeline-progress"></div>\r
                        </div>\r
                    </div>\r
                </div>\r
                \r
                <!-- Animation List with Scrolling -->\r
                <div class="animation-list" id="animation-list">\r
                    <div class="list-header">Available Animations (\${this.animations.length})</div>\r
                    <div class="list-content scrollable" id="animation-list-content">\r
                        <div class="empty-state">No animations loaded</div>\r
                    </div>\r
                </div>\r
            </div>\`;\r
        \r
        // Cache UI elements\r
        this.animationSelect = document.getElementById('animation-select');\r
        this.playBtn = document.getElementById('anim-play-btn');\r
        this.loopBtn = document.getElementById('anim-loop-btn');\r
        this.timeSlider = document.getElementById('time-slider');\r
        this.currentTimeDisplay = document.getElementById('current-time');\r
        this.durationDisplay = document.getElementById('total-duration');\r
        this.speedControl = document.getElementById('anim-speed-select');\r
    }\r
    \r
    _setupEventListeners() {\r
        // Animation selection - ADD BLUR\r
        if (this.animationSelect) {\r
            this.animationSelect.addEventListener('change', (e) => {\r
                const index = parseInt(e.target.value);\r
                if (!isNaN(index)) {\r
                    this._selectAnimation(index, true);\r
                }\r
                e.target.blur(); // ADD THIS - remove focus after selection\r
            });\r
        }\r
        \r
        // Play/Pause button with focus management\r
        if (this.playBtn) {\r
            let isMouseDown = false;\r
            \r
            this.playBtn.addEventListener('mousedown', (e) => {\r
                isMouseDown = true;\r
            });\r
            \r
            this.playBtn.addEventListener('mouseup', (e) => {\r
                if (isMouseDown) {\r
                    this._togglePlayPause();\r
                    e.target.blur();\r
                }\r
                isMouseDown = false;\r
            });\r
            \r
            this.playBtn.addEventListener('mouseleave', (e) => {\r
                if (isMouseDown) {\r
                    e.target.blur(); // Remove focus if dragged outside\r
                }\r
                isMouseDown = false;\r
            });\r
            \r
            // Keep click handler as fallback\r
            this.playBtn.addEventListener('click', (e) => {\r
                e.target.blur();\r
            });\r
        }\r
        \r
        // Loop button with focus management\r
        if (this.loopBtn) {\r
            let isMouseDown = false;\r
            \r
            this.loopBtn.addEventListener('mousedown', (e) => {\r
                isMouseDown = true;\r
            });\r
            \r
            this.loopBtn.addEventListener('mouseup', (e) => {\r
                if (isMouseDown) {\r
                    this._toggleLoop();\r
                    e.target.blur();\r
                }\r
                isMouseDown = false;\r
            });\r
            \r
            this.loopBtn.addEventListener('mouseleave', (e) => {\r
                if (isMouseDown) {\r
                    e.target.blur(); // Remove focus if dragged outside\r
                }\r
                isMouseDown = false;\r
            });\r
            \r
            // Keep click handler as fallback\r
            this.loopBtn.addEventListener('click', (e) => {\r
                e.target.blur();\r
            });\r
        }\r
        \r
        // Timeline slider with FIXED alignment\r
        if (this.timeSlider) {\r
            let isDragging = false;\r
            \r
            // Calculate position from mouse event with thumb offset compensation\r
            const getSliderValueFromMouse = (e) => {\r
                const rect = this.timeSlider.getBoundingClientRect();\r
                const thumbWidth = 16; // Width of the slider thumb in pixels\r
                const trackWidth = rect.width - thumbWidth; // Usable track width\r
                const thumbOffset = thumbWidth / 2; // Half thumb width for centering\r
                \r
                // Adjust mouse position relative to the usable track\r
                const adjustedMouseX = e.clientX - rect.left - thumbOffset;\r
                const pos = adjustedMouseX / trackWidth;\r
                const clampedPos = Math.max(0, Math.min(1, pos));\r
                \r
                return clampedPos * 100;\r
            };\r
            \r
            // Mouse down - start scrubbing\r
            this.timeSlider.addEventListener('mousedown', (e) => {\r
                console.log('[AnimationControls] Scrubbing started');\r
                isDragging = true;\r
                this.isScrubbing = true;\r
                this.wasPlayingBeforeScrub = this.isPlaying;\r
                \r
                // Pause animation while scrubbing\r
                if (this.isPlaying) {\r
                    this._pauseForScrubbing();\r
                }\r
                \r
                // Calculate position from mouse click\r
                const sliderValue = getSliderValueFromMouse(e);\r
                this.timeSlider.value = sliderValue;\r
                \r
                console.log('[AnimationControls] Click position:', sliderValue);\r
                \r
                // Immediately seek to clicked position\r
                this._seekToPosition(sliderValue);\r
                \r
                e.preventDefault();\r
                e.stopPropagation();\r
            });\r
            \r
            // Mouse move - continue scrubbing\r
            const handleMouseMove = (e) => {\r
                if (this.isScrubbing && isDragging) {\r
                    const sliderValue = getSliderValueFromMouse(e);\r
                    this.timeSlider.value = sliderValue;\r
                    \r
                    console.log('[AnimationControls] Dragging to position:', sliderValue);\r
                    this._seekToPosition(sliderValue);\r
                    \r
                    e.preventDefault();\r
                }\r
            };\r
            \r
            document.addEventListener('mousemove', handleMouseMove);\r
            \r
            // Handle input event as fallback\r
            this.timeSlider.addEventListener('input', (e) => {\r
                if (this.isScrubbing) {\r
                    console.log('[AnimationControls] Input event scrubbing to:', e.target.value);\r
                    this._seekToPosition(parseFloat(e.target.value));\r
                }\r
            });\r
            \r
            // Global mouse up - end scrubbing\r
            const endScrubbing = (e) => {\r
                if (this.isScrubbing) {\r
                    console.log('[AnimationControls] Scrubbing ended, was playing:', this.wasPlayingBeforeScrub);\r
                    isDragging = false;\r
                    this.isScrubbing = false;\r
                    \r
                    // IMPORTANT: Clear any pending animation updates before resuming\r
                    // This prevents old updates from overriding the seek position\r
                    if (window.worker) {\r
                        // Send one final seek to ensure position is correct\r
                        const finalTime = (this.timeSlider.value / 100) * this.duration;\r
                        window.worker.postMessage({\r
                            type: 'SEEK_ANIMATION',\r
                            data: { time: finalTime }\r
                        });\r
                    }\r
                    \r
                    if (this.wasPlayingBeforeScrub) {\r
                        setTimeout(() => {\r
                            this._resumeFromScrubbing();\r
                        }, 50);\r
                    }\r
                }\r
            };\r
            \r
            document.addEventListener('mouseup', endScrubbing);\r
            \r
            this._cleanupFunctions = this._cleanupFunctions || [];\r
            this._cleanupFunctions.push(() => {\r
                document.removeEventListener('mousemove', handleMouseMove);\r
                document.removeEventListener('mouseup', endScrubbing);\r
            });\r
        }\r
        \r
        // Speed control\r
        if (this.speedControl) {\r
            this.speedControl.addEventListener('change', (e) => {\r
                this.playbackSpeed = parseFloat(e.target.value);\r
                this._updatePlaybackSpeed();\r
                e.target.blur(); // ADD THIS - remove focus after selection\r
            });\r
        }\r
    }\r
\r
    _togglePlayPause() {\r
        console.log('[AnimationControls] Toggle play/pause, currently playing:', this.isPlaying);\r
        \r
        if (this.isPlaying) {\r
            this._pause();\r
        } else {\r
            // If animation ended and not looping, restart from beginning\r
            if (this.currentTime >= this.duration && !this.isLooping) {\r
                console.log('[AnimationControls] Restarting animation from beginning');\r
                this.currentTime = 0; // Update local state immediately\r
                this._seekToPosition(0); // Seek to start\r
                \r
                // Wait for seek to complete, then play\r
                setTimeout(() => {\r
                    // Make sure we're not at the end anymore\r
                    if (this.currentTime < this.duration) {\r
                        this._play();\r
                    }\r
                }, 100); // Longer delay to ensure seek completes\r
            } else {\r
                this._play();\r
            }\r
        }\r
    }\r
\r
    _handleAnimationUpdate(data) {\r
        if (data.currentTime !== undefined && !this.isScrubbing) {\r
            const oldTime = this.currentTime;\r
            this.currentTime = data.currentTime;\r
            \r
            // Detect large time jumps\r
            if (Math.abs(this.currentTime - oldTime) > 0.5 && oldTime > 0) {\r
                console.log('[AnimationControls] WARNING: Large time jump detected!');\r
                console.log('[AnimationControls] Old time:', oldTime.toFixed(3), 'New time:', this.currentTime.toFixed(3));\r
            }\r
            \r
            // Calculate percentage correctly (0-100)\r
            const progress = (this.currentTime / this.duration) * 100;\r
            this.timeSlider.value = progress;\r
            \r
            console.log('[AnimationControls] Animation update - time:', this.currentTime.toFixed(3), 'progress:', progress.toFixed(1), 'ended:', data.ended);\r
            \r
            // Update progress bar\r
            const progressBar = document.getElementById('timeline-progress');\r
            if (progressBar) {\r
                progressBar.style.width = \`\${progress}%\`;\r
            }\r
            \r
            // Update time display\r
            this._updateTimeDisplay();\r
            \r
            // Check if animation ended\r
            if (data.ended && !this.isLooping) {\r
                console.log('[AnimationControls] ===== ANIMATION ENDED =====');\r
                console.log('[AnimationControls] Ending at time:', this.currentTime, 'duration:', this.duration);\r
                \r
                // IMMEDIATELY stop all UI updates\r
                this.isPlaying = false;\r
                this._updatePlayButton();\r
                this._stopUpdateLoop();\r
                \r
                // Wait before reset to ensure worker has stopped\r
                setTimeout(() => {\r
                    if (!this.isPlaying) { // Double-check we're still stopped\r
                        this._resetAnimationToStart();\r
                    }\r
                }, 200);\r
            }\r
        }\r
    }\r
    \r
    _listenForAnimationData() {\r
        if (window.worker) {\r
            window.worker.addEventListener('message', (event) => {\r
                if (event.data.type === 'SCENE_DATA') {\r
                    const sceneData = event.data.data?.sceneData;\r
                    if (sceneData && sceneData.animations) {\r
                        console.log('[AnimationControls] Received scene data with animations:', sceneData.animations);\r
                        this._handleAnimationData(sceneData.animations);\r
                    }\r
                }\r
                \r
                if (event.data.type === 'ANIMATION_UPDATE') {\r
                    this._handleAnimationUpdate(event.data.data);\r
                }\r
                \r
                if (event.data.type === 'ANIMATIONS_READY') {\r
                    console.log('[AnimationControls] Animations ready:', event.data.data);\r
                }\r
                \r
                if (event.data.type === 'ANIMATION_SELECTED') {\r
                    console.log('[AnimationControls] Animation selected in worker:', event.data.data);\r
                }\r
                \r
                if (event.data.type === 'ANIMATION_PLAYING') {\r
                    console.log('[AnimationControls] Animation playing:', event.data.data);\r
                    this.isPlaying = event.data.data.isPlaying;\r
                    this._updatePlayButton();\r
                }\r
                \r
                if (event.data.type === 'ANIMATION_PAUSED') {\r
                    console.log('[AnimationControls] Animation paused:', event.data.data);\r
                    this.isPlaying = event.data.data.isPlaying;\r
                    this._updatePlayButton();\r
                }\r
                \r
                if (event.data.type === 'SKINNED_MESH_UPDATE') {\r
                    // Forward skinned mesh data to parent window\r
                    console.log('[AnimationControls] Received skinned mesh update, vertices:', event.data.data?.vertexCount);\r
                    if (window.sendSkinnedMeshToParent && event.data.data) {\r
                        window.sendSkinnedMeshToParent(event.data.data);\r
                    }\r
                }\r
            });\r
        }\r
    }\r
\r
    _updatePlayButton() {\r
        if (this.playBtn) {\r
            if (this.isPlaying) {\r
                this.playBtn.textContent = '\u23F8\uFE0F';\r
                this.playBtn.title = 'Pause';\r
            } else {\r
                this.playBtn.textContent = '\u25B6\uFE0F';\r
                this.playBtn.title = 'Play';\r
            }\r
        }\r
    }\r
    \r
    _handleAnimationData(animations) {\r
        console.log('[AnimationControls] Received animations:', animations);\r
        \r
        let animationsArray = animations;\r
        if (animations && !Array.isArray(animations)) {\r
            console.log('[AnimationControls] Extracting animations from scene data');\r
            animationsArray = animations.animations || [];\r
        }\r
        \r
        if (!Array.isArray(animationsArray)) {\r
            console.warn('[AnimationControls] Invalid animations data format:', typeof animationsArray);\r
            this._showNoAnimations();\r
            return;\r
        }\r
        \r
        this.animations = animationsArray;\r
        \r
        if (this.animations.length === 0) {\r
            console.log('[AnimationControls] No animations found in data');\r
            this._showNoAnimations();\r
            return;\r
        }\r
        \r
        console.log('[AnimationControls] Processing ' + this.animations.length + ' animations');\r
        \r
        // Populate animation select\r
        this.animationSelect.innerHTML = '';\r
        this.animations.forEach((anim, index) => {\r
            const option = document.createElement('option');\r
            option.value = index;\r
            option.textContent = anim.name || \`Animation \${index + 1}\`;\r
            this.animationSelect.appendChild(option);\r
        });\r
        \r
        // Update list header with count\r
        const listHeader = this.container.querySelector('.list-header');\r
        if (listHeader) {\r
            listHeader.textContent = \`Available Animations (\${this.animations.length})\`;\r
        }\r
        \r
        // Populate animation list\r
        this._renderAnimationList();\r
        \r
        // Enable controls\r
        this._enableControls();\r
        \r
        // Load initial animation state from z3d-json or use defaults\r
        this._loadInitialAnimationState();\r
    }\r
    \r
    _loadInitialAnimationState() {\r
        // Check if we have initial state from parent (z3d-json)\r
        console.log('[AnimationControls] Checking for initial animation state...');\r
        console.log('[AnimationControls] window.initialAnimationState:', window.initialAnimationState);\r
        \r
        // Check if we have a valid initial state with actual animation data\r
        const hasValidState = window.initialAnimationState && \r
                            window.initialAnimationState.currentAnimation !== null &&\r
                            window.initialAnimationState.currentAnimation !== undefined;\r
        \r
        if (hasValidState) {\r
            const state = window.initialAnimationState;\r
            console.log('[AnimationControls] Loading initial animation state from z3d-json:', state);\r
            \r
            // Find animation by name\r
            let animIndex = 0;\r
            if (state.currentAnimation) {\r
                const foundIndex = this.animations.findIndex(a => a.name === state.currentAnimation);\r
                if (foundIndex >= 0) {\r
                    animIndex = foundIndex;\r
                }\r
            }\r
            \r
            // Select the animation (without auto-play and without resetting time)\r
            this._selectAnimation(animIndex, false, true);  // Third param = preserveTime\r
            \r
            // Apply the saved state\r
            if (state.currentTime !== undefined) {\r
                // Convert time to percentage for the seek position\r
                const percentage = (state.currentTime / (this.duration || 1)) * 100;\r
                this._seekToPosition(percentage);\r
            }\r
            \r
            if (state.isLooping !== undefined) {\r
                this.isLooping = state.isLooping;\r
                if (this.loopBtn) {\r
                    this.loopBtn.classList.toggle('active', this.isLooping);\r
                }\r
            }\r
            \r
            if (state.playbackSpeed !== undefined) {\r
                this.playbackSpeed = state.playbackSpeed;\r
                if (this.speedInput) {\r
                    this.speedInput.value = this.playbackSpeed;\r
                }\r
            }\r
            \r
            // Start playing if it was playing\r
            if (state.isPlaying) {\r
                this._play();\r
            }\r
            \r
            // Also check for node visibility\r
            if (window.initialNodeVisibility) {\r
                console.log('[AnimationControls] Applying initial node visibility:', window.initialNodeVisibility);\r
                Object.entries(window.initialNodeVisibility).forEach(([nodeName, visible]) => {\r
                    if (window.worker) {\r
                        window.worker.postMessage({\r
                            type: 'TOGGLE_NODE_VISIBILITY',\r
                            data: { nodeName, visible }\r
                        });\r
                    }\r
                });\r
            }\r
        } else {\r
            // Default: play first animation with all nodes visible\r
            console.log('[AnimationControls] No valid initial state found, using defaults (auto-play first animation)');\r
            this._selectAnimation(0, true); // Auto-play first animation\r
            \r
            // Note: _selectAnimation with autoPlay=true will call _play() which sends the state to parent\r
        }\r
    }\r
    \r
    _sendAnimationStateToParent() {\r
        if (window.opener && !window.opener.closed) {\r
            console.log('[AnimationControls] Sending animation state to parent');\r
            window.opener.postMessage({\r
                type: 'ANIMATION_STATE_CHANGE',\r
                data: {\r
                    currentAnimation: this.currentAnimation?.name,\r
                    currentTime: this.currentTime || 0,\r
                    isPlaying: this.isPlaying,\r
                    isLooping: this.isLooping,\r
                    playbackSpeed: this.playbackSpeed\r
                }\r
            }, '*');\r
        } else {\r
            console.warn('[AnimationControls] No opener window available to send state');\r
        }\r
    }\r
    \r
    _renderAnimationList() {\r
        const listContent = document.getElementById('animation-list-content');\r
        if (!listContent) return;\r
        \r
        if (this.animations.length === 0) {\r
            listContent.innerHTML = '<div class="empty-state">No animations loaded</div>';\r
            return;\r
        }\r
        \r
        let html = '';\r
        this.animations.forEach((anim, index) => {\r
            const isActive = index === this.currentAnimationIndex;\r
            html += \`\r
                <div class="animation-item \${isActive ? 'active' : ''}" data-index="\${index}">\r
                    <span class="anim-icon">\u{1F3AC}</span>\r
                    <span class="anim-name">\${this._escapeHtml(anim.name || \`Animation \${index + 1}\`)}</span>\r
                    <span class="anim-duration">\${this._formatTime(anim.duration)}</span>\r
                </div>\`;\r
        });\r
        \r
        listContent.innerHTML = html;\r
        \r
        // Add click handlers to list items\r
        listContent.querySelectorAll('.animation-item').forEach(item => {\r
            item.addEventListener('click', () => {\r
                const index = parseInt(item.dataset.index);\r
                if (!isNaN(index)) {\r
                    this._selectAnimation(index, true);\r
                }\r
            });\r
        });\r
    }\r
    \r
    _selectAnimation(index, autoPlay = false, preserveTime = false) {\r
        if (index < 0 || index >= this.animations.length) {\r
            console.log('[AnimationControls] Invalid animation index:', index, 'total:', this.animations.length);\r
            return;\r
        }\r
        \r
        console.log('[AnimationControls] Selecting animation:', index, 'autoPlay:', autoPlay, 'preserveTime:', preserveTime);\r
        \r
        this.currentAnimationIndex = index;\r
        this.currentAnimation = this.animations[index];\r
        this.duration = this.currentAnimation.duration || 0;\r
        \r
        // Only reset time if not preserving it\r
        if (!preserveTime) {\r
            this.currentTime = 0;\r
        }\r
        \r
        // Update UI\r
        this.animationSelect.value = index;\r
        \r
        // Update info display\r
        const nameEl = this.container.querySelector('.animation-name');\r
        const durationEl = this.container.querySelector('.animation-duration');\r
        if (nameEl) nameEl.textContent = this.currentAnimation.name || \`Animation \${index + 1}\`;\r
        if (durationEl) durationEl.textContent = this._formatTime(this.duration);\r
        \r
        // FIX: Set slider max to 100 (percentage), not duration * 100\r
        this.timeSlider.max = 100;\r
        this.timeSlider.value = 0;\r
        this._updateTimeDisplay();\r
        \r
        console.log('[AnimationControls] Slider setup - max:', this.timeSlider.max, 'duration:', this.duration);\r
        \r
        // Update list highlighting\r
        this.container.querySelectorAll('.animation-item').forEach(item => {\r
            item.classList.toggle('active', parseInt(item.dataset.index) === index);\r
        });\r
        \r
        // Send to worker\r
        if (window.worker) {\r
            window.worker.postMessage({\r
                type: 'SELECT_ANIMATION',\r
                data: {\r
                    animationId: this.currentAnimation.id,\r
                    animationIndex: index\r
                }\r
            });\r
        }\r
        \r
        console.log('[AnimationControls] Selected animation:', this.currentAnimation.name);\r
        \r
        // Auto-play if requested\r
        if (autoPlay) {\r
            setTimeout(() => {\r
                this._play();\r
            }, 50);\r
        } else {\r
            // If not auto-playing, still notify parent of selection\r
            if (window.opener && !window.opener.closed) {\r
                window.opener.postMessage({\r
                    type: 'ANIMATION_STATE_CHANGE',\r
                data: {\r
                    currentAnimation: this.currentAnimation?.name,\r
                    currentTime: 0,\r
                    isPlaying: false,\r
                    isLooping: this.isLooping,\r
                    playbackSpeed: this.playbackSpeed\r
                }\r
                }, '*');\r
            }\r
        }\r
    }\r
    \r
    _play() {\r
        if (!this.currentAnimation) return;\r
        \r
        console.log('[AnimationControls] ===== STARTING PLAY =====');\r
        console.log('[AnimationControls] Current time:', this.currentTime.toFixed(3));\r
        console.log('[AnimationControls] Duration:', this.duration);\r
        console.log('[AnimationControls] Loop:', this.isLooping);\r
        console.log('[AnimationControls] Worker available:', !!window.worker);\r
        \r
        // Set state immediately\r
        this.isPlaying = true;\r
        this._updatePlayButton();\r
        \r
        // Send play command to worker\r
        if (window.worker) {\r
            console.log('[AnimationControls] Sending PLAY_ANIMATION message to worker');\r
            const message = {\r
                type: 'PLAY_ANIMATION',\r
                data: {\r
                    animationId: this.currentAnimation.id,\r
                    loop: this.isLooping,\r
                    speed: this.playbackSpeed\r
                }\r
            };\r
            console.log('[AnimationControls] Message data:', message);\r
            window.worker.postMessage(message);\r
            console.log('[AnimationControls] PLAY_ANIMATION message sent');\r
        } else {\r
            console.error('[AnimationControls] No worker available for playing!');\r
        }\r
        \r
        // Start update loop\r
        this._startUpdateLoop();\r
        \r
        // Notify parent of state change\r
        if (window.opener && !window.opener.closed) {\r
            window.opener.postMessage({\r
            type: 'ANIMATION_STATE_CHANGE',\r
            data: {\r
                currentAnimation: this.currentAnimation?.name,\r
                currentTime: this.currentTime,\r
                isPlaying: true,\r
                isLooping: this.isLooping,\r
                playbackSpeed: this.playbackSpeed\r
            }\r
            }, '*');\r
        }\r
    }\r
    \r
    _pause() {\r
        console.log('[AnimationControls] Pausing at time:', this.currentTime.toFixed(3));\r
        \r
        this.isPlaying = false;\r
        this._updatePlayButton();\r
        \r
        // Send pause command to worker\r
        if (window.worker) {\r
            window.worker.postMessage({\r
                type: 'PAUSE_ANIMATION',\r
                data: {}\r
            });\r
        }\r
        \r
        this._stopUpdateLoop();\r
        \r
        // Notify parent of state change\r
        if (window.opener && !window.opener.closed) {\r
            window.opener.postMessage({\r
            type: 'ANIMATION_STATE_CHANGE',\r
            data: {\r
                currentAnimation: this.currentAnimation?.name,\r
                currentTime: this.currentTime,\r
                isPlaying: false,\r
                isLooping: this.isLooping,\r
                playbackSpeed: this.playbackSpeed\r
            }\r
            }, '*');\r
        }\r
    }\r
    \r
    _pauseForScrubbing() {\r
        // Pause without updating UI state (we'll resume automatically)\r
        if (window.worker) {\r
            window.worker.postMessage({\r
                type: 'PAUSE_ANIMATION',\r
                data: {}\r
            });\r
        }\r
    }\r
    \r
    _resumeFromScrubbing() {\r
        // Resume from current scrubbed position\r
        this.isPlaying = true;\r
        this._updatePlayButton();\r
        \r
        if (window.worker) {\r
            window.worker.postMessage({\r
                type: 'PLAY_ANIMATION',\r
                data: {\r
                    animationId: this.currentAnimation.id,\r
                    loop: this.isLooping,\r
                    speed: this.playbackSpeed\r
                }\r
            });\r
        }\r
        \r
        this._startUpdateLoop();\r
    }\r
    \r
    _togglePlayPause() {\r
        console.log('[AnimationControls] Toggle play/pause, currently playing:', this.isPlaying);\r
        \r
        if (this.isPlaying) {\r
            this._pause();\r
        } else {\r
            // Just play from current position (auto-reset handles going to start)\r
            this._play();\r
        }\r
    }\r
    \r
    _toggleLoop() {\r
        this.isLooping = !this.isLooping;\r
        this.loopBtn.classList.toggle('active', this.isLooping);\r
        \r
        console.log('[AnimationControls] Loop toggled to:', this.isLooping);\r
        \r
        // Send loop setting to worker\r
        if (window.worker) {\r
            window.worker.postMessage({\r
                type: 'SET_ANIMATION_LOOP',\r
                data: { loop: this.isLooping }\r
            });\r
        }\r
        \r
        // Notify parent of state change\r
        if (window.opener && !window.opener.closed) {\r
            window.opener.postMessage({\r
            type: 'ANIMATION_STATE_CHANGE',\r
            data: {\r
                currentAnimation: this.currentAnimation?.name,\r
                currentTime: this.currentTime,\r
                isPlaying: this.isPlaying,\r
                isLooping: this.isLooping,\r
                playbackSpeed: this.playbackSpeed\r
            }\r
            }, '*');\r
        }\r
    }\r
    \r
    _seekToPosition(value) {\r
        // Value is 0-100 percentage, convert to time\r
        const time = (value / 100) * this.duration;\r
        this.currentTime = time;\r
        \r
        console.log('[AnimationControls] ===== SEEKING =====');\r
        console.log('[AnimationControls] Percentage:', value.toFixed(1), 'Time:', time.toFixed(3), 'Duration:', this.duration);\r
        console.log('[AnimationControls] Worker available:', !!window.worker);\r
        \r
        // Update display immediately\r
        this._updateTimeDisplay();\r
        \r
        // Update progress bar immediately\r
        const progressBar = document.getElementById('timeline-progress');\r
        if (progressBar) {\r
            progressBar.style.width = \`\${value}%\`;\r
        }\r
        \r
        // Send seek command to worker\r
        if (window.worker) {\r
            console.log('[AnimationControls] Sending SEEK_ANIMATION message to worker');\r
            window.worker.postMessage({\r
                type: 'SEEK_ANIMATION',\r
                data: { time: time }\r
            });\r
            console.log('[AnimationControls] SEEK_ANIMATION message sent');\r
        } else {\r
            console.error('[AnimationControls] No worker available for seeking!');\r
        }\r
        \r
        // Notify parent of state change\r
        if (window.opener && !window.opener.closed) {\r
            window.opener.postMessage({\r
            type: 'ANIMATION_STATE_CHANGE',\r
            data: {\r
                currentAnimation: this.currentAnimation?.name,\r
                currentTime: time,\r
                isPlaying: this.isPlaying,\r
                isLooping: this.isLooping,\r
                playbackSpeed: this.playbackSpeed\r
            }\r
            }, '*');\r
        }\r
    }\r
    \r
    _updatePlaybackSpeed() {\r
        // Send speed update to worker\r
        if (window.worker) {\r
            window.worker.postMessage({\r
                type: 'SET_ANIMATION_SPEED',\r
                data: { speed: this.playbackSpeed }\r
            });\r
        }\r
    }\r
    \r
    _startUpdateLoop() {\r
        this._stopUpdateLoop();\r
        \r
        this.updateInterval = setInterval(() => {\r
            // CRITICAL: Don't request updates while scrubbing!\r
            if (!this.isScrubbing && this.isPlaying) {\r
                // Request current time from worker\r
                if (window.worker) {\r
                    window.worker.postMessage({\r
                        type: 'GET_ANIMATION_TIME',\r
                        data: {}\r
                    });\r
                }\r
            }\r
        }, 50);\r
    }\r
    \r
    _stopUpdateLoop() {\r
        if (this.updateInterval) {\r
            clearInterval(this.updateInterval);\r
            this.updateInterval = null;\r
        }\r
    }\r
    \r
    _handleAnimationUpdate(data) {\r
        // CRITICAL: Ignore updates while scrubbing\r
        if (this.isScrubbing) {\r
            console.log('[AnimationControls] Ignoring animation update while scrubbing');\r
            return;\r
        }\r
        \r
        if (data.currentTime !== undefined) {\r
            const oldTime = this.currentTime;\r
            this.currentTime = data.currentTime;\r
            \r
            // Detect large time jumps\r
            if (Math.abs(this.currentTime - oldTime) > 0.5 && oldTime > 0) {\r
                console.warn('[AnimationControls] WARNING: Large time jump detected!');\r
                console.log('[AnimationControls] Old time:', oldTime.toFixed(3), 'New time:', this.currentTime.toFixed(3));\r
            }\r
            \r
            // Calculate percentage correctly (0-100)\r
            const progress = (this.currentTime / this.duration) * 100;\r
            this.timeSlider.value = progress;\r
            \r
            console.log('[AnimationControls] Animation update - time:', this.currentTime.toFixed(3), 'duration:', this.duration, 'progress:', progress.toFixed(1));\r
            \r
            // Update progress bar\r
            const progressBar = document.getElementById('timeline-progress');\r
            if (progressBar) {\r
                progressBar.style.width = \`\${progress}%\`;\r
            }\r
            \r
            // Update time display\r
            this._updateTimeDisplay();\r
            \r
            // Check if animation ended\r
            if (data.ended && !this.isLooping) {\r
                console.log('[AnimationControls] Animation ended (no loop), stopping and resetting');\r
                \r
                // IMMEDIATELY stop playing state to prevent extra updates\r
                this.isPlaying = false;\r
                this._updatePlayButton();\r
                this._stopUpdateLoop();\r
                \r
                // Reset to start after a short delay to avoid timing conflicts\r
                setTimeout(() => {\r
                    this._resetAnimationToStart();\r
                }, 100);\r
            }\r
        }\r
    }\r
\r
    _resetAnimationToStart() {\r
        console.log('[AnimationControls] ===== RESETTING TO START =====');\r
        console.log('[AnimationControls] Current state - playing:', this.isPlaying, 'time:', this.currentTime);\r
        \r
        // Ensure we're definitely stopped\r
        this.isPlaying = false;\r
        this._updatePlayButton();\r
        this._stopUpdateLoop();\r
        \r
        // Update UI to show start position\r
        this.currentTime = 0;\r
        this.timeSlider.value = 0;\r
        \r
        // Update progress bar to start\r
        const progressBar = document.getElementById('timeline-progress');\r
        if (progressBar) {\r
            progressBar.style.width = '0%';\r
        }\r
        \r
        // Update time display\r
        this._updateTimeDisplay();\r
        \r
        // Tell worker to seek to beginning\r
        if (window.worker) {\r
            console.log('[AnimationControls] Sending reset SEEK_ANIMATION to worker');\r
            window.worker.postMessage({\r
                type: 'SEEK_ANIMATION',\r
                data: { time: 0 }\r
            });\r
            console.log('[AnimationControls] Reset SEEK_ANIMATION sent');\r
        } else {\r
            console.error('[AnimationControls] No worker available for reset!');\r
        }\r
        \r
        console.log('[AnimationControls] Reset complete - ready for next play');\r
    }\r
    \r
    _updateTimeDisplay() {\r
        if (this.currentTimeDisplay) {\r
            this.currentTimeDisplay.textContent = this._formatTime(this.currentTime);\r
        }\r
        if (this.durationDisplay) {\r
            this.durationDisplay.textContent = this._formatTime(this.duration);\r
        }\r
    }\r
    \r
    _formatTime(seconds) {\r
        if (!seconds || isNaN(seconds)) return '0:00';\r
        \r
        const mins = Math.floor(seconds / 60);\r
        const secs = Math.floor(seconds % 60);\r
        const ms = Math.floor((seconds % 1) * 100);\r
        \r
        return \`\${mins}:\${secs.toString().padStart(2, '0')}.\${ms.toString().padStart(2, '0')}\`;\r
    }\r
    \r
    _enableControls() {\r
        this.animationSelect.disabled = false;\r
        this.playBtn.disabled = false;\r
        this.loopBtn.disabled = false;\r
        this.timeSlider.disabled = false;\r
        this.speedControl.disabled = false;\r
    }\r
    \r
    _showNoAnimations() {\r
        this.animationSelect.innerHTML = '<option value="">No animations</option>';\r
        this.animationSelect.disabled = true;\r
        this.playBtn.disabled = true;\r
        this.loopBtn.disabled = true;\r
        this.timeSlider.disabled = true;\r
        this.speedControl.disabled = true;\r
        \r
        const nameEl = this.container.querySelector('.animation-name');\r
        const durationEl = this.container.querySelector('.animation-duration');\r
        if (nameEl) nameEl.textContent = 'No animations';\r
        if (durationEl) durationEl.textContent = '0:00';\r
    }\r
    \r
    _escapeHtml(text) {\r
        const div = document.createElement('div');\r
        div.textContent = text;\r
        return div.innerHTML;\r
    }\r
    \r
    dispose() {\r
        this._stopUpdateLoop();\r
        \r
        // Clean up global event listeners\r
        if (this._cleanupFunctions) {\r
            this._cleanupFunctions.forEach(cleanup => cleanup());\r
            this._cleanupFunctions = [];\r
        }\r
        \r
        if (this.container) {\r
            this.container.innerHTML = '';\r
        }\r
        this.isInitialized = false;\r
        this.isDisposed = true;\r
        console.log('[AnimationControls] Disposed');\r
    }\r
}`,
        "textureControls": `/* FILE: editor/z3d-object-editor/templates/scripts/components/texture-controls.js */\r
/* Texture Viewer and Controls */\r
\r
class TextureControls extends EventEmitter {\r
    constructor(config) {\r
        super();\r
        this.config = config;\r
        this.isInitialized = false;\r
        \r
        // Texture state\r
        this.textures = [];\r
        this.currentTexture = null;\r
        this.currentTextureIndex = 0;\r
        \r
        // Zoom state\r
        this.zoomLevel = 1;\r
        this.minZoom = 0.1;\r
        this.maxZoom = 10;\r
        this.panX = 0;\r
        this.panY = 0;\r
        this.isPanning = false;\r
        \r
        // UI elements\r
        this.container = null;\r
        this.textureSelect = null;\r
        this.canvas = null;\r
        this.ctx = null;\r
        this.imageElement = null;\r
    }\r
    \r
    async initialize(container) {\r
        if (!container) {\r
            console.error('[TextureControls] No container provided');\r
            return;\r
        }\r
        \r
        this.container = container;\r
        this._render();\r
        this._setupEventListeners();\r
        this._listenForTextureData();\r
        this._setupResizeObserver(); // Add this\r
        \r
        this.isInitialized = true;\r
        console.log('[TextureControls] \u2705 Initialized');\r
    }\r
    \r
    _render() {\r
        this.container.innerHTML = \`\r
            <div class="texture-controls">\r
                <!-- Texture Selection -->\r
                <div class="texture-header">\r
                    <select id="texture-select" class="texture-select" disabled>\r
                        <option value="">No textures</option>\r
                    </select>\r
                    <div class="texture-info">\r
                        <span class="texture-name">No texture selected</span>\r
                        <div class="texture-stats">\r
                            <span class="texture-format">-</span>\r
                            <span class="texture-dimensions">-</span>\r
                            <span class="texture-size">-</span>\r
                        </div>\r
                    </div>\r
                </div>\r
                \r
                <!-- Texture Viewer -->\r
                <div class="texture-viewer">\r
                    <div class="viewer-controls">\r
                        <button id="zoom-in-btn" class="zoom-btn" title="Zoom In">\u{1F50D}</button>\r
                        <button id="zoom-out-btn" class="zoom-btn" title="Zoom Out">\u{1F50D}</button>\r
                        <button id="zoom-reset-btn" class="zoom-btn" title="Reset View">\u{1F504}</button>\r
                        <button id="pixel-mode-btn" class="zoom-btn" title="Toggle Pixel Art Mode">\u26A1</button>\r
                        <span class="zoom-level">100%</span>\r
                    </div>\r
                    <div class="canvas-container" id="texture-canvas-container">\r
                        <canvas id="texture-canvas" class="texture-canvas"></canvas>\r
                        <div class="texture-placeholder">\r
                            <span>\u{1F5BC}\uFE0F</span>\r
                            <span>No texture loaded</span>\r
                        </div>\r
                    </div>\r
                </div>\r
                \r
                <!-- Texture List -->\r
                <div class="texture-list" id="texture-list">\r
                    <div class="list-header">Available Textures</div>\r
                    <div class="list-content" id="texture-list-content">\r
                        <div class="empty-state">No textures loaded</div>\r
                    </div>\r
                </div>\r
            </div>\`;\r
        \r
        // Cache UI elements\r
        this.textureSelect = document.getElementById('texture-select');\r
        this.canvas = document.getElementById('texture-canvas');\r
        this.ctx = this.canvas.getContext('2d');\r
        \r
        // Hide canvas initially\r
        this.canvas.style.display = 'none';\r
        \r
        // Initialize pixel mode state\r
        this.pixelMode = false;\r
    }\r
    \r
    _setupEventListeners() {\r
        // Texture selection\r
        if (this.textureSelect) {\r
            this.textureSelect.addEventListener('change', (e) => {\r
                const index = parseInt(e.target.value);\r
                if (!isNaN(index)) {\r
                    this._selectTexture(index);\r
                }\r
            });\r
        }\r
        \r
        // Zoom buttons\r
        const zoomInBtn = document.getElementById('zoom-in-btn');\r
        const zoomOutBtn = document.getElementById('zoom-out-btn');\r
        const zoomResetBtn = document.getElementById('zoom-reset-btn');\r
        const pixelModeBtn = document.getElementById('pixel-mode-btn');\r
        \r
        if (zoomInBtn) {\r
            zoomInBtn.addEventListener('click', () => this._zoomIn());\r
        }\r
        if (zoomOutBtn) {\r
            zoomOutBtn.addEventListener('click', () => this._zoomOut());\r
        }\r
        if (zoomResetBtn) {\r
            zoomResetBtn.addEventListener('click', () => this._resetView());\r
        }\r
        \r
        // ADD: Pixel mode toggle\r
        if (pixelModeBtn) {\r
            pixelModeBtn.addEventListener('click', () => this._togglePixelMode());\r
        }\r
        \r
        // Canvas mouse events for pan and zoom\r
        if (this.canvas) {\r
            this.canvas.addEventListener('wheel', (e) => {\r
                e.preventDefault();\r
                \r
                // Get mouse position relative to canvas\r
                const rect = this.canvas.getBoundingClientRect();\r
                const mouseX = e.clientX - rect.left;\r
                const mouseY = e.clientY - rect.top;\r
                \r
                // Convert mouse position to canvas coordinates\r
                const canvasX = mouseX - this.canvas.width / 2;\r
                const canvasY = mouseY - this.canvas.height / 2;\r
                \r
                // Calculate world position before zoom\r
                const worldX = (canvasX - this.panX) / this.zoomLevel;\r
                const worldY = (canvasY - this.panY) / this.zoomLevel;\r
                \r
                // Apply zoom\r
                const delta = e.deltaY > 0 ? 0.9 : 1.1;\r
                const newZoom = Math.max(0.1, Math.min(10, this.zoomLevel * delta));\r
                \r
                // Calculate new pan to keep the same world point under the cursor\r
                this.panX = canvasX - worldX * newZoom;\r
                this.panY = canvasY - worldY * newZoom;\r
                \r
                this.zoomLevel = newZoom;\r
                this._redrawCanvas();\r
            });\r
            \r
            // Pan with mouse drag\r
            let lastX = 0;\r
            let lastY = 0;\r
            \r
            this.canvas.addEventListener('mousedown', (e) => {\r
                this.isPanning = true;\r
                lastX = e.clientX;\r
                lastY = e.clientY;\r
                this.canvas.style.cursor = 'grabbing';\r
            });\r
            \r
            window.addEventListener('mousemove', (e) => {\r
                if (!this.isPanning) return;\r
                \r
                const deltaX = e.clientX - lastX;\r
                const deltaY = e.clientY - lastY;\r
                \r
                this.panX += deltaX;\r
                this.panY += deltaY;\r
                \r
                lastX = e.clientX;\r
                lastY = e.clientY;\r
                \r
                this._redrawCanvas();\r
            });\r
            \r
            window.addEventListener('mouseup', () => {\r
                this.isPanning = false;\r
                this.canvas.style.cursor = 'grab';\r
            });\r
            \r
            // Double-click to reset\r
            this.canvas.addEventListener('dblclick', () => {\r
                this._resetView();\r
            });\r
        }\r
    }\r
    \r
    _listenForTextureData() {\r
        // Listen for scene data from worker\r
        if (window.worker) {\r
            window.worker.addEventListener('message', (event) => {\r
                if (event.data.type === 'SCENE_DATA') {\r
                    const sceneData = event.data.data?.sceneData;\r
                    if (sceneData && sceneData.textures) {\r
                        this._handleTextureData(sceneData.textures);\r
                    }\r
                }\r
                \r
                // Listen for texture image data\r
                if (event.data.type === 'TEXTURE_IMAGE_DATA') {\r
                    this._handleTextureImageData(event.data.data);\r
                }\r
            });\r
        }\r
    }\r
    // Public method for external use\r
    setTextureData(textures) {\r
        this._handleTextureData(textures);\r
    }\r
    \r
    _handleTextureData(textures) {\r
        console.log('[TextureControls] Received textures:', textures);\r
        this.textures = textures;\r
        \r
        if (textures.length === 0) {\r
            this._showNoTextures();\r
            return;\r
        }\r
        \r
        // Populate texture select\r
        this.textureSelect.innerHTML = '';\r
        textures.forEach((texture, index) => {\r
            const option = document.createElement('option');\r
            option.value = index;\r
            option.textContent = texture.name || \`Texture \${index + 1}\`;\r
            this.textureSelect.appendChild(option);\r
        });\r
        \r
        // Populate texture list\r
        this._renderTextureList();\r
        \r
        // Enable controls\r
        this._enableControls();\r
        \r
        // Auto-select first texture with a small delay to ensure worker is ready\r
        if (textures.length > 0) {\r
            console.log('[TextureControls] Auto-selecting first texture');\r
            this.textureSelect.value = 0;\r
            \r
            // Add a small delay to ensure worker is available\r
            setTimeout(() => {\r
                console.log('[TextureControls] Delayed auto-select executing');\r
                this._selectTexture(0);\r
            }, 100);\r
        }\r
    }\r
    \r
    _renderTextureList() {\r
        const listContent = document.getElementById('texture-list-content');\r
        if (!listContent) return;\r
        \r
        if (this.textures.length === 0) {\r
            listContent.innerHTML = '<div class="empty-state">No textures loaded</div>';\r
            return;\r
        }\r
        \r
        let html = '';\r
        this.textures.forEach((texture, index) => {\r
            const isActive = index === this.currentTextureIndex;\r
            const dimensions = texture.image ? \`\${texture.image.width}\xD7\${texture.image.height}\` : 'Unknown';\r
            \r
            html += \`\r
                <div class="texture-item \${isActive ? 'active' : ''}" data-index="\${index}">\r
                    <span class="tex-icon">\u{1F5BC}\uFE0F</span>\r
                    <span class="tex-name">\${this._escapeHtml(texture.name || \`Texture \${index + 1}\`)}</span>\r
                    <span class="tex-info">\${dimensions}</span>\r
                    <span class="tex-type">\${texture.type || 'map'}</span>\r
                </div>\`;\r
        });\r
        \r
        listContent.innerHTML = html;\r
        \r
        // Add click handlers to list items\r
        listContent.querySelectorAll('.texture-item').forEach(item => {\r
            item.addEventListener('click', () => {\r
                const index = parseInt(item.dataset.index);\r
                if (!isNaN(index)) {\r
                    this._selectTexture(index);\r
                }\r
            });\r
        });\r
    }\r
    \r
    _selectTexture(index) {\r
        if (index < 0 || index >= this.textures.length) return;\r
        \r
        this.currentTextureIndex = index;\r
        this.currentTexture = this.textures[index];\r
        \r
        // Update UI\r
        this.textureSelect.value = index;\r
        \r
        // Update info display\r
        const nameEl = this.container.querySelector('.texture-name');\r
        const formatEl = this.container.querySelector('.texture-format');\r
        const dimensionsEl = this.container.querySelector('.texture-dimensions');\r
        const sizeEl = this.container.querySelector('.texture-size');\r
        \r
        if (nameEl) nameEl.textContent = this.currentTexture.name || \`Texture \${index + 1}\`;\r
        if (formatEl) formatEl.textContent = this._getTextureFormat(this.currentTexture);\r
        if (dimensionsEl) {\r
            const dims = this.currentTexture.image \r
                ? \`\${this.currentTexture.image.width}\xD7\${this.currentTexture.image.height}px\`\r
                : 'Unknown';\r
            dimensionsEl.textContent = dims;\r
        }\r
        if (sizeEl) {\r
            sizeEl.textContent = this._estimateTextureSize(this.currentTexture);\r
        }\r
        \r
        // Update list highlighting\r
        this.container.querySelectorAll('.texture-item').forEach(item => {\r
            item.classList.toggle('active', parseInt(item.dataset.index) === index);\r
        });\r
        \r
        // Request texture image from worker - FIXED\r
        if (window.worker && this.currentTexture) {\r
            const textureId = this.currentTexture.id || this.currentTexture.uuid;\r
            \r
            console.log('[TextureControls] Requesting texture image:', {\r
                textureId: textureId,\r
                textureName: this.currentTexture.name,\r
                textureType: this.currentTexture.type\r
            });\r
            \r
            window.worker.postMessage({\r
                type: 'GET_TEXTURE_IMAGE',\r
                data: {\r
                    textureId: textureId  // Use the UUID as the ID\r
                }\r
            });\r
        }\r
        \r
        // Show loading state\r
        this._showTextureLoading();\r
        \r
        console.log('[TextureControls] Selected texture:', this.currentTexture.name);\r
    }\r
    \r
    _handleTextureImageData(data) {\r
        console.log('[TextureControls] Received texture image data:', {\r
            hasData: !!data,\r
            hasImageData: !!(data && data.imageData),\r
            hasError: !!(data && data.error)\r
        });\r
        \r
        if (!data) {\r
            console.warn('[TextureControls] No data received');\r
            this._showTextureError('No data received');\r
            return;\r
        }\r
        \r
        if (data.error) {\r
            console.error('[TextureControls] Error loading texture:', data.error);\r
            this._showTextureError(data.error);\r
            return;\r
        }\r
        \r
        if (!data.imageData) {\r
            console.warn('[TextureControls] No image data in response');\r
            this._showTextureError('No image data available');\r
            return;\r
        }\r
        \r
        // Create image from data URL\r
        this.imageElement = new Image();\r
        this.imageElement.onload = () => {\r
            console.log('[TextureControls] Image loaded successfully:', \r
                this.imageElement.width, 'x', this.imageElement.height);\r
            this._displayTexture();\r
        };\r
        this.imageElement.onerror = (error) => {\r
            console.error('[TextureControls] Failed to load image:', error);\r
            this._showTextureError('Failed to load image');\r
        };\r
        \r
        // Set the image source\r
        this.imageElement.src = data.imageData;\r
    }\r
    \r
    _displayTexture() {\r
        console.log('[TextureControls] _displayTexture called');\r
        \r
        if (!this.imageElement || !this.canvas) {\r
            console.error('[TextureControls] Missing imageElement or canvas:', {\r
                hasImageElement: !!this.imageElement,\r
                hasCanvas: !!this.canvas\r
            });\r
            return;\r
        }\r
        \r
        // Show canvas, hide placeholder\r
        console.log('[TextureControls] Showing canvas, hiding placeholder');\r
        this.canvas.style.display = 'block';\r
        \r
        const placeholder = this.container.querySelector('.texture-placeholder');\r
        if (placeholder) {\r
            console.log('[TextureControls] Hiding placeholder');\r
            placeholder.style.display = 'none';\r
        }\r
        \r
        // Update canvas size when displaying\r
        this._updateCanvasSize();\r
        \r
        console.log('[TextureControls] Canvas display complete');\r
    }\r
\r
    _updateCanvasSize() {\r
        const container = document.getElementById('texture-canvas-container');\r
        if (!container) return;\r
        \r
        let width = container.clientWidth;\r
        let height = container.clientHeight;\r
        \r
        // If height is 0, try again after a delay\r
        if (height === 0) {\r
            console.warn('[TextureControls] Container has 0 height, retrying...');\r
            setTimeout(() => {\r
                this._updateCanvasSize();\r
            }, 100);\r
            return;\r
        }\r
        \r
        // Only update if size actually changed\r
        if (this.canvas.width !== width || this.canvas.height !== height) {\r
            this.canvas.width = width;\r
            this.canvas.height = height;\r
            console.log('[TextureControls] Canvas sized to:', width, 'x', height);\r
            \r
            // Recalculate zoom to maintain aspect ratio\r
            this._resetView();\r
        }\r
    }\r
\r
    _togglePixelMode() {\r
        this.pixelMode = !this.pixelMode;\r
        \r
        const pixelModeBtn = document.getElementById('pixel-mode-btn');\r
        \r
        if (this.pixelMode) {\r
            this.canvas.classList.add('pixel-art');\r
            pixelModeBtn.classList.add('active');\r
            pixelModeBtn.title = 'Disable Pixel Art Mode';\r
            console.log('[TextureControls] Pixel art mode enabled');\r
        } else {\r
            this.canvas.classList.remove('pixel-art');\r
            pixelModeBtn.classList.remove('active');\r
            pixelModeBtn.title = 'Enable Pixel Art Mode';\r
            console.log('[TextureControls] Pixel art mode disabled');\r
        }\r
        \r
        // Update the canvas rendering context\r
        if (this.ctx) {\r
            this.ctx.imageSmoothingEnabled = !this.pixelMode;\r
            this.ctx.mozImageSmoothingEnabled = !this.pixelMode;\r
            this.ctx.webkitImageSmoothingEnabled = !this.pixelMode;\r
            this.ctx.msImageSmoothingEnabled = !this.pixelMode;\r
        }\r
        \r
        // Redraw the canvas with new settings\r
        if (this.imageElement) {\r
            this._redrawCanvas();\r
        }\r
    }\r
\r
    // Add a resize observer to handle container size changes\r
    _setupResizeObserver() {\r
        const container = document.getElementById('texture-canvas-container');\r
        if (!container) return;\r
        \r
        // Use ResizeObserver if available\r
        if (window.ResizeObserver) {\r
            this.resizeObserver = new ResizeObserver(() => {\r
                if (this.canvas && this.imageElement) {\r
                    this._updateCanvasSize();\r
                }\r
            });\r
            this.resizeObserver.observe(container);\r
        } else {\r
            // Fallback to window resize event\r
            this._handleResize = () => {\r
                if (this.canvas && this.imageElement) {\r
                    this._updateCanvasSize();\r
                }\r
            };\r
            window.addEventListener('resize', this._handleResize);\r
        }\r
    }\r
\r
    _resetView() {\r
        console.log('[TextureControls] _resetView called');\r
        \r
        this.zoomLevel = 1;\r
        this.panX = 0;\r
        this.panY = 0;\r
        \r
        // Fit image to canvas while preserving aspect ratio\r
        if (this.imageElement && this.canvas) {\r
            const canvasWidth = this.canvas.width;\r
            const canvasHeight = this.canvas.height;\r
            const imageWidth = this.imageElement.width;\r
            const imageHeight = this.imageElement.height;\r
            \r
            // Calculate scale to fit image within canvas\r
            const scaleX = canvasWidth / imageWidth;\r
            const scaleY = canvasHeight / imageHeight;\r
            \r
            // Use the smaller scale to ensure entire image fits\r
            this.zoomLevel = Math.min(scaleX, scaleY) * 0.9; // 90% to add padding\r
            \r
            console.log('[TextureControls] Calculated zoom level:', this.zoomLevel, {\r
                canvasSize: \`\${canvasWidth}x\${canvasHeight}\`,\r
                imageSize: \`\${imageWidth}x\${imageHeight}\`,\r
                scaleX,\r
                scaleY\r
            });\r
        }\r
        \r
        this._redrawCanvas();\r
    }\r
\r
    _redrawCanvas() {\r
        console.log('[TextureControls] _redrawCanvas called');\r
        \r
        if (!this.ctx || !this.imageElement) {\r
            console.error('[TextureControls] Missing ctx or imageElement:', {\r
                hasCtx: !!this.ctx,\r
                hasImageElement: !!this.imageElement\r
            });\r
            return;\r
        }\r
        \r
        // Set image smoothing based on pixel mode\r
        this.ctx.imageSmoothingEnabled = !this.pixelMode;\r
        this.ctx.mozImageSmoothingEnabled = !this.pixelMode;\r
        this.ctx.webkitImageSmoothingEnabled = !this.pixelMode;\r
        this.ctx.msImageSmoothingEnabled = !this.pixelMode;\r
        \r
        // Clear entire canvas with background\r
        this.ctx.fillStyle = '#1a1a1a';\r
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r
        \r
        // Draw checkerboard pattern for transparency visualization\r
        this._drawCheckerboard();\r
        \r
        // Save context state\r
        this.ctx.save();\r
        \r
        // Center the image in the canvas\r
        this.ctx.translate(this.canvas.width / 2 + this.panX, this.canvas.height / 2 + this.panY);\r
        this.ctx.scale(this.zoomLevel, this.zoomLevel);\r
        \r
        // Draw image centered at origin\r
        this.ctx.drawImage(\r
            this.imageElement,\r
            -this.imageElement.width / 2,\r
            -this.imageElement.height / 2\r
        );\r
        \r
        console.log('[TextureControls] Drew image at zoom:', this.zoomLevel, 'pixelMode:', this.pixelMode);\r
        \r
        // Restore context state\r
        this.ctx.restore();\r
        \r
        // Update zoom level display\r
        const zoomDisplay = this.container.querySelector('.zoom-level');\r
        if (zoomDisplay) {\r
            zoomDisplay.textContent = \`\${Math.round(this.zoomLevel * 100)}%\`;\r
        }\r
    }\r
\r
    _drawCheckerboard() {\r
        // Draw a subtle checkerboard pattern for transparency\r
        const size = 20;\r
        const cols = Math.ceil(this.canvas.width / size);\r
        const rows = Math.ceil(this.canvas.height / size);\r
        \r
        this.ctx.fillStyle = '#242424';\r
        for (let row = 0; row < rows; row++) {\r
            for (let col = 0; col < cols; col++) {\r
                if ((row + col) % 2 === 0) {\r
                    this.ctx.fillRect(col * size, row * size, size, size);\r
                }\r
            }\r
        }\r
    }\r
    \r
    _zoom(factor, centerX, centerY) {\r
        const newZoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.zoomLevel * factor));\r
        \r
        if (centerX !== undefined && centerY !== undefined) {\r
            // Zoom toward mouse position\r
            const scale = newZoom / this.zoomLevel;\r
            this.panX = centerX - (centerX - this.panX) * scale;\r
            this.panY = centerY - (centerY - this.panY) * scale;\r
        }\r
        \r
        this.zoomLevel = newZoom;\r
        this._redrawCanvas();\r
    }\r
    \r
    _zoomIn() {\r
        const centerX = this.canvas.width / 2;\r
        const centerY = this.canvas.height / 2;\r
        this._zoomToPoint(centerX, centerY, 1.2);\r
    }\r
\r
    _zoomOut() {\r
        const centerX = this.canvas.width / 2;\r
        const centerY = this.canvas.height / 2;\r
        this._zoomToPoint(centerX, centerY, 0.8);\r
    }\r
\r
    // Add a helper method for zooming to a specific point:\r
    _zoomToPoint(screenX, screenY, multiplier) {\r
        // Convert screen position to canvas coordinates\r
        const canvasX = screenX - this.canvas.width / 2;\r
        const canvasY = screenY - this.canvas.height / 2;\r
        \r
        // Calculate world position before zoom\r
        const worldX = (canvasX - this.panX) / this.zoomLevel;\r
        const worldY = (canvasY - this.panY) / this.zoomLevel;\r
        \r
        // Apply zoom\r
        const newZoom = Math.max(0.1, Math.min(10, this.zoomLevel * multiplier));\r
        \r
        // Calculate new pan to keep the same world point at the screen position\r
        this.panX = canvasX - worldX * newZoom;\r
        this.panY = canvasY - worldY * newZoom;\r
        \r
        this.zoomLevel = newZoom;\r
        this._redrawCanvas();\r
    }\r
    \r
    _getTextureFormat(texture) {\r
        // Try to determine format from various properties\r
        if (texture.format) {\r
            const formatMap = {\r
                1023: 'RGBA',           // RGBAFormat - 4 channels (most common)\r
                1022: 'RGB',            // RGBFormat - 3 channels (no transparency)\r
                1024: 'Alpha',          // AlphaFormat - 1 channel (grayscale for transparency)\r
                1025: 'Luminance',      // LuminanceFormat - 1 channel (grayscale)\r
                1026: 'LuminanceAlpha', // LuminanceAlphaFormat - 2 channels\r
                1020: 'Depth',          // DepthFormat\r
                1021: 'DepthStencil',   // DepthStencilFormat\r
                1027: 'Red',            // RedFormat - 1 channel\r
                1028: 'RG',             // RGFormat - 2 channels\r
                1030: 'RedInteger',     // RedIntegerFormat\r
                1031: 'RGInteger',      // RGIntegerFormat\r
                1032: 'RGBAInteger'     // RGBAIntegerFormat\r
            };\r
            return formatMap[texture.format] || 'Unknown';\r
        }\r
        \r
        if (texture.image && texture.image.src) {\r
            const ext = texture.image.src.split('.').pop().toLowerCase();\r
            return ext.toUpperCase();\r
        }\r
        \r
        return 'Unknown';\r
    }\r
    \r
    _estimateTextureSize(texture) {\r
        if (!texture.image || !texture.image.width || !texture.image.height) {\r
            return 'Unknown';\r
        }\r
        \r
        // Estimate uncompressed size (4 bytes per pixel for RGBA)\r
        const pixels = texture.image.width * texture.image.height;\r
        const bytes = pixels * 4;\r
        \r
        if (bytes < 1024) {\r
            return \`\${bytes} B\`;\r
        } else if (bytes < 1024 * 1024) {\r
            return \`\${(bytes / 1024).toFixed(1)} KB\`;\r
        } else {\r
            return \`\${(bytes / (1024 * 1024)).toFixed(1)} MB\`;\r
        }\r
    }\r
    \r
    _showTextureLoading() {\r
        if (this.canvas) {\r
            this.canvas.style.display = 'none';\r
        }\r
        const placeholder = this.container.querySelector('.texture-placeholder');\r
        if (placeholder) {\r
            placeholder.style.display = 'flex';\r
            placeholder.innerHTML = '<span>\u23F3</span><span>Loading texture...</span>';\r
        }\r
    }\r
    \r
    _showNoTextures() {\r
        this.textureSelect.innerHTML = '<option value="">No textures</option>';\r
        this.textureSelect.disabled = true;\r
        \r
        const nameEl = this.container.querySelector('.texture-name');\r
        const formatEl = this.container.querySelector('.texture-format');\r
        const dimensionsEl = this.container.querySelector('.texture-dimensions');\r
        const sizeEl = this.container.querySelector('.texture-size');\r
        \r
        if (nameEl) nameEl.textContent = 'No textures';\r
        if (formatEl) formatEl.textContent = '-';\r
        if (dimensionsEl) dimensionsEl.textContent = '-';\r
        if (sizeEl) sizeEl.textContent = '-';\r
        \r
        if (this.canvas) {\r
            this.canvas.style.display = 'none';\r
        }\r
        const placeholder = this.container.querySelector('.texture-placeholder');\r
        if (placeholder) {\r
            placeholder.style.display = 'flex';\r
            placeholder.innerHTML = '<span>\u{1F5BC}\uFE0F</span><span>No textures loaded</span>';\r
        }\r
    }\r
    \r
    _enableControls() {\r
        this.textureSelect.disabled = false;\r
    }\r
    \r
    _escapeHtml(text) {\r
        const div = document.createElement('div');\r
        div.textContent = text;\r
        return div.innerHTML;\r
    }\r
    \r
    dispose() {\r
        if (this.resizeObserver) {\r
            this.resizeObserver.disconnect();\r
            this.resizeObserver = null;\r
        }\r
        if (this._handleResize) {\r
            window.removeEventListener('resize', this._handleResize);\r
            this._handleResize = null;\r
        }\r
        if (this.container) {\r
            this.container.innerHTML = '';\r
        }\r
        this.isInitialized = false;\r
        console.log('[TextureControls] Disposed');\r
    }\r
}`,
        "viewerManager": "/* FILE: editor/z3d-object-editor/templates/scripts/components/viewer-manager.js */\r\n/* Manages switching between Animation and Texture viewers */\r\n\r\nclass ViewerManager {\r\n    constructor() {\r\n        this.currentViewer = null;\r\n        this.animationControls = null;\r\n        this.textureControls = null;\r\n        this.hasAnimations = false;\r\n        this.hasTextures = false;\r\n        this.isInitialized = false;\r\n        this.workerReady = false;\r\n        this.cachedAnimationData = null;\r\n        this.cachedTextureData = null;\r\n    }\r\n    \r\n    async initialize() {\r\n        console.log('[ViewerManager] Initializing...');\r\n        \r\n        // Get viewer elements\r\n        this.viewerSelect = document.getElementById('viewer-type');\r\n        this.viewerContent = document.getElementById('viewer-content');\r\n        \r\n        if (!this.viewerSelect || !this.viewerContent) {\r\n            console.error('[ViewerManager] Required elements not found');\r\n            return;\r\n        }\r\n        \r\n        // Setup event listeners\r\n        this.viewerSelect.addEventListener('change', (e) => {\r\n            this.switchViewer(e.target.value);\r\n            e.target.blur();\r\n        });\r\n        \r\n        this.isInitialized = true;\r\n        console.log('[ViewerManager] \u2705 Initialized (waiting for worker)');\r\n    }\r\n    \r\n    // Called by the main editor when worker is ready\r\n    attachToWorker() {\r\n        if (!window.worker) {\r\n            console.error('[ViewerManager] attachToWorker called but no worker available');\r\n            return;\r\n        }\r\n        \r\n        if (this.workerReady) {\r\n            console.log('[ViewerManager] Worker already attached');\r\n            return;\r\n        }\r\n        \r\n        console.log('[ViewerManager] \u{1F517} Attaching to worker...');\r\n        \r\n        window.worker.addEventListener('message', (event) => {\r\n            this._handleWorkerMessage(event);\r\n        });\r\n        \r\n        this.workerReady = true;\r\n        console.log('[ViewerManager] \u2705 Worker listeners attached');\r\n    }\r\n    \r\n    _handleWorkerMessage(event) {\r\n        const { type, data } = event.data;\r\n        \r\n        switch (type) {\r\n            case 'SCENE_DATA':\r\n                this._handleSceneData(data?.sceneData);\r\n                break;\r\n                \r\n            case 'ANIMATIONS_READY':\r\n                console.log('[ViewerManager] ANIMATIONS_READY:', data);\r\n                this.hasAnimations = data.hasAnimations;\r\n                this._autoSelectViewer();\r\n                break;\r\n                \r\n            case 'ANIMATION_SELECTED':\r\n                console.log('[ViewerManager] ANIMATION_SELECTED:', data);\r\n                this.hasAnimations = true;\r\n                this._autoSelectViewer();\r\n                break;\r\n        }\r\n    }\r\n    \r\n    _handleSceneData(sceneData) {\r\n        if (!sceneData) return;\r\n        \r\n        console.log('[ViewerManager] Processing scene data:', {\r\n            animationCount: sceneData.animations?.length || 0,\r\n            textureCount: sceneData.textures?.length || 0\r\n        });\r\n        \r\n        this.hasAnimations = Array.isArray(sceneData.animations) && sceneData.animations.length > 0;\r\n        this.hasTextures = Array.isArray(sceneData.textures) && sceneData.textures.length > 0;\r\n        \r\n        // Cache animation data for re-use\r\n        if (this.hasAnimations) {\r\n            this.cachedAnimationData = sceneData.animations;\r\n            console.log('[ViewerManager] Cached animation data:', this.cachedAnimationData.length, 'animations');\r\n        }\r\n        \r\n        // ADD: Cache texture data for re-use\r\n        if (this.hasTextures) {\r\n            this.cachedTextureData = sceneData.textures;\r\n            console.log('[ViewerManager] Cached texture data:', this.cachedTextureData.length, 'textures');\r\n        }\r\n        \r\n        console.log('[ViewerManager] Content detected:', {\r\n            hasAnimations: this.hasAnimations,\r\n            hasTextures: this.hasTextures\r\n        });\r\n        \r\n        if (this.hasAnimations) {\r\n            console.log('[ViewerManager] First animation:', sceneData.animations[0]);\r\n        }\r\n        \r\n        this._autoSelectViewer();\r\n    }\r\n    \r\n    _autoSelectViewer() {\r\n        if (!this.isInitialized || !this.workerReady) {\r\n            console.log('[ViewerManager] Not ready for auto-select');\r\n            return;\r\n        }\r\n        \r\n        const targetViewer = this.hasAnimations ? 'animation' : 'texture';\r\n        \r\n        console.log(`[ViewerManager] ${this.hasAnimations ? '\u{1F3AC}' : '\u{1F5BC}\uFE0F'} Auto-selecting ${targetViewer} viewer`);\r\n        \r\n        if (this.currentViewer !== targetViewer) {\r\n            this.viewerSelect.value = targetViewer;\r\n            this.switchViewer(targetViewer);\r\n        }\r\n    }\r\n    \r\n    async switchViewer(type) {\r\n        console.log('[ViewerManager] Switching to viewer:', type);\r\n        \r\n        // Don't dispose if switching to the same viewer\r\n        if (this.currentViewer === type) {\r\n            return;\r\n        }\r\n        \r\n        // Dispose current viewer\r\n        if (this.currentViewer) {\r\n            if (this.currentViewer === 'animation' && this.animationControls) {\r\n                // Don't fully dispose - just hide it\r\n                // this.animationControls.dispose();  // REMOVE THIS LINE\r\n                this.animationControls = null;  // Just clear reference, don't dispose\r\n            } else if (this.currentViewer === 'texture' && this.textureControls) {\r\n                // this.textureControls.dispose();  // REMOVE THIS LINE if texture controls exist\r\n                this.textureControls = null;\r\n            }\r\n        }\r\n        \r\n        // Clear content\r\n        this.viewerContent.innerHTML = '';\r\n        this.currentViewer = type;\r\n        \r\n        if (type === 'animation') {\r\n            await this._initAnimationViewer();\r\n        } else if (type === 'texture') {\r\n            await this._initTextureViewer();\r\n        }\r\n    }\r\n    \r\n    async _initAnimationViewer() {\r\n        try {\r\n            if (typeof AnimationControls === 'undefined') {\r\n                throw new Error('AnimationControls class not found');\r\n            }\r\n            \r\n            // Check if we already have animation data cached\r\n            const reuseExisting = this.animationControls && !this.animationControls.isDisposed;\r\n            \r\n            if (!reuseExisting) {\r\n                this.animationControls = new AnimationControls({});\r\n                await this.animationControls.initialize(this.viewerContent);\r\n                \r\n                // If we already have animation data, re-send it\r\n                if (this.hasAnimations && this.cachedAnimationData) {\r\n                    this.animationControls._handleAnimationData(this.cachedAnimationData);\r\n                }\r\n            } else {\r\n                // Re-initialize with existing data\r\n                await this.animationControls.initialize(this.viewerContent);\r\n            }\r\n            \r\n            console.log('[ViewerManager] \u2705 Animation viewer ready');\r\n        } catch (error) {\r\n            console.error('[ViewerManager] \u274C Animation viewer failed:', error);\r\n            this.viewerContent.innerHTML = `\r\n                <div class=\"placeholder\">\r\n                    Animation viewer error: ${error.message}\r\n                </div>`;\r\n        }\r\n    }\r\n    \r\n    async _initTextureViewer() {\r\n        try {\r\n            if (typeof TextureControls === 'undefined') {\r\n                throw new Error('TextureControls class not found');\r\n            }\r\n            \r\n            this.textureControls = new TextureControls({});\r\n            await this.textureControls.initialize(this.viewerContent);\r\n            \r\n            // Use the public method\r\n            if (this.hasTextures && this.cachedTextureData) {\r\n                console.log('[ViewerManager] Sending cached texture data to viewer');\r\n                this.textureControls.setTextureData(this.cachedTextureData);  // Use public method\r\n            }\r\n            \r\n            console.log('[ViewerManager] \u2705 Texture viewer ready');\r\n        } catch (error) {\r\n            console.error('[ViewerManager] \u274C Texture viewer failed:', error);\r\n            this.viewerContent.innerHTML = `\r\n                <div class=\"placeholder\">\r\n                    Texture viewer error: ${error.message}\r\n                </div>`;\r\n        }\r\n    }\r\n    \r\n    dispose() {\r\n        if (this.animationControls) {\r\n            this.animationControls.dispose();\r\n            this.animationControls = null;\r\n        }\r\n        if (this.textureControls) {\r\n            this.textureControls.dispose();\r\n            this.textureControls = null;\r\n        }\r\n        this.currentViewer = null;\r\n        this.isInitialized = false;\r\n        this.workerReady = false;\r\n        console.log('[ViewerManager] Disposed');\r\n    }\r\n}\r\n\r\n// Clean initialization - no polling!\r\nif (typeof window !== 'undefined') {\r\n    window.viewerManager = null;\r\n    \r\n    function initViewerManager() {\r\n        if (!window.viewerManager) {\r\n            console.log('[ViewerManager] Creating ViewerManager...');\r\n            window.viewerManager = new ViewerManager();\r\n            window.viewerManager.initialize();\r\n        }\r\n    }\r\n    \r\n    // Initialize when DOM is ready\r\n    if (document.readyState === 'loading') {\r\n        document.addEventListener('DOMContentLoaded', initViewerManager);\r\n    } else {\r\n        initViewerManager();\r\n    }\r\n}",
        "resizer": "/* FILE: editor/z3d-object-editor/templates/scripts/components/resizer.js */\r\n/* COMPLETE FIXED VERSION - No snapping on vertical resizer */\r\n\r\nclass Resizer extends EventEmitter {\r\n    constructor(config) {\r\n        super();\r\n        this.config = config;\r\n        this.resizers = [];\r\n        this.isInitialized = false;\r\n    this._leftRatio = null; // Persist left:total ratio set by user drag\r\n    this._horizontalNodeTreeRatio = null; // Persist nodeTree:(nodeTree+sideTabs) ratio\r\n    this.MIN_STATUS_BAR_HEIGHT = 28; // enforce status bar minimum height\r\n        \r\n        // Scene minimum sizes to avoid collapse\r\n        this.MIN_VIEWPORT_WIDTH = 400;\r\n        this.MIN_VIEWPORT_HEIGHT = 300;\r\n        this.MIN_RIGHT_PANEL_WIDTH = 250;\r\n        this.MIN_VIEWER_HEIGHT = 100;\r\n    }\r\n    \r\n    async initialize() {\r\n        // Setup vertical resizer (between left and right regions)\r\n        this.setupVerticalResizer();\r\n        \r\n        // Setup horizontal resizer (in right region between node tree and tabs)\r\n        this.setupHorizontalResizer();\r\n        \r\n        // Setup left horizontal resizer (between viewport and viewer areas)\r\n        this.setupLeftHorizontalResizer();\r\n\r\n        // Handle window resize (maximize/restore/manual drag) so right-region always fills width\r\n        this._handleWindowResize = this._handleWindowResize.bind(this);\r\n        window.addEventListener('resize', this._handleWindowResize);\r\n\r\n        // Establish initial ratio from DOM after initial layout\r\n        requestAnimationFrame(() => {\r\n            const leftRegion = document.querySelector('.left-region');\r\n            const rightRegion = document.querySelector('.right-region');\r\n            const mainContent = document.querySelector('.main-content');\r\n            if (leftRegion && rightRegion && mainContent) {\r\n                const mainRect = mainContent.getBoundingClientRect();\r\n                const resizer = document.querySelector('.vertical-resizer');\r\n                const resizerWidth = resizer ? (resizer.getBoundingClientRect().width || 4) : 4;\r\n                const totalWidth = Math.max(1, mainRect.width - resizerWidth);\r\n                const leftWidth = leftRegion.getBoundingClientRect().width;\r\n                this._leftRatio = Math.min(0.95, Math.max(0.05, leftWidth / totalWidth));\r\n            }\r\n        });\r\n        \r\n        this.isInitialized = true;\r\n        console.log('[Resizer] \u2705 Initialized successfully');\r\n    }\r\n    \r\n    /**\r\n     * Sync canvas size using CanvasManager\r\n     */\r\n    syncCanvasSize() {\r\n        // Use the global canvas manager if available\r\n        if (window.canvasManager) {\r\n            window.canvasManager.forceResize();\r\n        } else {\r\n            // Fallback: just notify worker about size change\r\n            const viewport = document.getElementById('viewport-area');\r\n            if (viewport && window.worker) {\r\n                const rect = viewport.getBoundingClientRect();\r\n                const width = Math.max(1, Math.floor(rect.width));\r\n                const height = Math.max(1, Math.floor(rect.height));\r\n                \r\n                window.worker.postMessage({\r\n                    type: 'UPDATE_RENDER_SIZE',\r\n                    data: { width, height }\r\n                });\r\n            }\r\n        }\r\n    }\r\n    \r\n    setupVerticalResizer() {\r\n        const resizer = document.querySelector('.vertical-resizer');\r\n        const leftRegion = document.querySelector('.left-region');\r\n        const rightRegion = document.querySelector('.right-region');\r\n        const mainContent = document.querySelector('.main-content');\r\n        \r\n        if (!resizer || !leftRegion || !rightRegion || !mainContent) {\r\n            console.warn('[Resizer] Vertical resizer elements not found');\r\n            return;\r\n        }\r\n        \r\n        let isResizing = false;\r\n        let startX = 0;\r\n        let startLeftWidth = 0;\r\n        let startRightWidth = 0;\r\n        let rafId = null;\r\n        \r\n        const startResize = (e) => {\r\n            isResizing = true;\r\n            startX = e.clientX;\r\n            \r\n            // FIX: Get the actual current widths from computed styles or flex values\r\n            const leftRect = leftRegion.getBoundingClientRect();\r\n            const rightRect = rightRegion.getBoundingClientRect();\r\n            \r\n            // Store actual current widths\r\n            startLeftWidth = leftRect.width;\r\n            startRightWidth = rightRect.width;\r\n            \r\n            // If flex values are set, use those as they're more accurate\r\n            const leftFlex = leftRegion.style.flex;\r\n            const rightFlex = rightRegion.style.flex;\r\n            \r\n            if (leftFlex && leftFlex.includes('px')) {\r\n                const match = leftFlex.match(/0 0 (\\d+(?:\\.\\d+)?)px/);\r\n                if (match) {\r\n                    startLeftWidth = parseFloat(match[1]);\r\n                }\r\n            }\r\n            \r\n            if (rightFlex && rightFlex.includes('px')) {\r\n                const match = rightFlex.match(/0 0 (\\d+(?:\\.\\d+)?)px/);\r\n                if (match) {\r\n                    startRightWidth = parseFloat(match[1]);\r\n                }\r\n            }\r\n            \r\n            console.log('[Resizer] Starting vertical resize:', {\r\n                startLeftWidth,\r\n                startRightWidth,\r\n                startX: e.clientX\r\n            });\r\n            \r\n            resizer.classList.add('resizing');\r\n            document.body.style.cursor = 'ew-resize';\r\n            document.body.style.userSelect = 'none';\r\n            \r\n            // Add overlay to prevent iframe interference\r\n            const overlay = document.createElement('div');\r\n            overlay.id = 'resize-overlay';\r\n            overlay.style.cssText = 'position:fixed;top:0;left:0;right:0;bottom:0;z-index:9999;cursor:ew-resize;';\r\n            document.body.appendChild(overlay);\r\n            \r\n            e.preventDefault();\r\n        };\r\n        \r\n        const resize = (e) => {\r\n            if (!isResizing) return;\r\n            \r\n            // Cancel previous RAF\r\n            if (rafId) cancelAnimationFrame(rafId);\r\n            \r\n            rafId = requestAnimationFrame(() => {\r\n                const deltaX = e.clientX - startX;\r\n                const mainRect = mainContent.getBoundingClientRect();\r\n                const resizerWidth = 4;\r\n                const totalWidth = mainRect.width - resizerWidth;\r\n                // Compute new left width from drag delta\r\n                let newLeftWidth = startLeftWidth + deltaX;\r\n                // Constrain left width within min/max bounds (leaving at least MIN_RIGHT_PANEL_WIDTH for right)\r\n                const maxLeft = totalWidth - this.MIN_RIGHT_PANEL_WIDTH;\r\n                newLeftWidth = Math.max(this.MIN_VIEWPORT_WIDTH, Math.min(maxLeft, newLeftWidth));\r\n                // Derive right width so that sum exactly fills totalWidth (eliminates trailing gap)\r\n                let newRightWidth = totalWidth - newLeftWidth;\r\n                // Enforce right min; if violated, adjust left accordingly and recalc right\r\n                if (newRightWidth < this.MIN_RIGHT_PANEL_WIDTH) {\r\n                    newRightWidth = this.MIN_RIGHT_PANEL_WIDTH;\r\n                    newLeftWidth = totalWidth - newRightWidth;\r\n                    if (newLeftWidth < this.MIN_VIEWPORT_WIDTH) {\r\n                        // Final clamp compromise: prioritize mins\r\n                        newLeftWidth = this.MIN_VIEWPORT_WIDTH;\r\n                        newRightWidth = totalWidth - newLeftWidth;\r\n                    }\r\n                }\r\n                // Safety: if rounding causes a pixel shortfall, assign the remainder to right panel\r\n                const remainder = totalWidth - (newLeftWidth + newRightWidth);\r\n                if (Math.abs(remainder) >= 1) {\r\n                    newRightWidth += remainder; // keep fill exact\r\n                }\r\n                \r\n                // Apply new sizes using flex-basis\r\n                leftRegion.style.flex = `0 0 ${newLeftWidth}px`;\r\n                rightRegion.style.flex = `0 0 ${newRightWidth}px`;\r\n\r\n                // Persist ratio for future window resizes\r\n                const effectiveTotal = newLeftWidth + newRightWidth;\r\n                if (effectiveTotal > 0) {\r\n                    this._leftRatio = newLeftWidth / effectiveTotal;\r\n                }\r\n                \r\n                // Sync canvas size\r\n                this.syncCanvasSize();\r\n                \r\n                this.emit('vertical-resize', { leftWidth: newLeftWidth, rightWidth: newRightWidth });\r\n            });\r\n            \r\n            e.preventDefault();\r\n        };\r\n        \r\n        const stopResize = () => {\r\n            if (!isResizing) return;\r\n            \r\n            isResizing = false;\r\n            resizer.classList.remove('resizing');\r\n            document.body.style.cursor = '';\r\n            document.body.style.userSelect = '';\r\n            \r\n            const overlay = document.getElementById('resize-overlay');\r\n            if (overlay) overlay.remove();\r\n            \r\n            // Cancel any pending RAF\r\n            if (rafId) {\r\n                cancelAnimationFrame(rafId);\r\n                rafId = null;\r\n            }\r\n            \r\n            // Final canvas sync\r\n            this.syncCanvasSize();\r\n            \r\n            console.log('[Resizer] Vertical resize complete');\r\n        };\r\n        \r\n        resizer.addEventListener('mousedown', startResize);\r\n        document.addEventListener('mousemove', resize);\r\n        document.addEventListener('mouseup', stopResize);\r\n        \r\n        this.resizers.push({\r\n            type: 'vertical',\r\n            cleanup: () => {\r\n                resizer.removeEventListener('mousedown', startResize);\r\n                document.removeEventListener('mousemove', resize);\r\n                document.removeEventListener('mouseup', stopResize);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Window resize handler: preserve current left width (within constraints) and expand right to fill.\r\n     */\r\n    _handleWindowResize() {\r\n        const leftRegion = document.querySelector('.left-region');\r\n        const rightRegion = document.querySelector('.right-region');\r\n        const mainContent = document.querySelector('.main-content');\r\n        const resizer = document.querySelector('.vertical-resizer');\r\n        if (!leftRegion || !rightRegion || !mainContent || !resizer) return;\r\n\r\n        const mainRect = mainContent.getBoundingClientRect();\r\n        const resizerWidth = resizer.getBoundingClientRect().width || 4;\r\n        const totalWidth = mainRect.width - resizerWidth;\r\n        // Desired left width based on stored ratio (fallback to current DOM width if null)\r\n        let desiredLeft = this._leftRatio != null\r\n            ? this._leftRatio * totalWidth\r\n            : leftRegion.getBoundingClientRect().width;\r\n        // Clamp desired left width\r\n        const maxLeft = totalWidth - this.MIN_RIGHT_PANEL_WIDTH;\r\n        let leftWidth = Math.max(this.MIN_VIEWPORT_WIDTH, Math.min(maxLeft, desiredLeft));\r\n        let rightWidth = totalWidth - leftWidth;\r\n        // If right min violated after clamp, adjust again\r\n        if (rightWidth < this.MIN_RIGHT_PANEL_WIDTH) {\r\n            rightWidth = this.MIN_RIGHT_PANEL_WIDTH;\r\n            leftWidth = totalWidth - rightWidth;\r\n        }\r\n        // Update ratio to actual applied ratio\r\n        if (totalWidth > 0) {\r\n            this._leftRatio = leftWidth / totalWidth;\r\n        }\r\n        leftRegion.style.flex = `0 0 ${leftWidth}px`;\r\n        rightRegion.style.flex = `0 0 ${rightWidth}px`;\r\n        requestAnimationFrame(() => this.syncCanvasSize());\r\n    }\r\n\r\n    /** Cleanup listeners */\r\n    dispose() {\r\n        window.removeEventListener('resize', this._handleWindowResize);\r\n        this.resizers.forEach(r => r.cleanup && r.cleanup());\r\n        this.resizers = [];\r\n    }\r\n    \r\n    setupHorizontalResizer() {\r\n        const resizer = document.querySelector('.horizontal-resizer');\r\n        const nodeTreeSection = document.querySelector('.node-tree-section');\r\n        const sideTabsSection = document.querySelector('.side-tabs-section');\r\n        const rightRegion = document.querySelector('.right-region');\r\n        const statusBar = rightRegion ? rightRegion.querySelector('.status-bar') : null;\r\n        \r\n        if (!resizer || !nodeTreeSection || !sideTabsSection) {\r\n            console.warn('[Resizer] Horizontal resizer elements not found');\r\n            return;\r\n        }\r\n        \r\n        let isResizing = false;\r\n        let startY = 0;\r\n        let startNodeTreeHeight = 0;\r\n        let startSideTabsHeight = 0;\r\n        \r\n        const startResize = (e) => {\r\n            isResizing = true;\r\n            startY = e.clientY;\r\n            \r\n            const nodeTreeRect = nodeTreeSection.getBoundingClientRect();\r\n            const sideTabsRect = sideTabsSection.getBoundingClientRect();\r\n            \r\n            startNodeTreeHeight = nodeTreeRect.height;\r\n            startSideTabsHeight = sideTabsRect.height;\r\n            \r\n            resizer.classList.add('resizing');\r\n            document.body.style.cursor = 'ns-resize';\r\n            document.body.style.userSelect = 'none';\r\n            \r\n            e.preventDefault();\r\n        };\r\n        \r\n        const MIN_NODE_TREE = 100;\r\n        const MIN_SIDE_TABS = 110;\r\n\r\n        const fitHorizontalHeights = (nodeTreeH, sideTabsH) => {\r\n            if (!rightRegion) return { nodeTreeH, sideTabsH };\r\n            const totalRegionHeight = rightRegion.getBoundingClientRect().height;\r\n            const resizerHeight = resizer.getBoundingClientRect().height || 4;\r\n            const statusBarHeightRaw = statusBar ? statusBar.getBoundingClientRect().height : 0;\r\n            const statusBarHeight = Math.max(this.MIN_STATUS_BAR_HEIGHT, statusBarHeightRaw);\r\n            const available = totalRegionHeight - statusBarHeight - resizerHeight;\r\n            // Enforce mins\r\n            nodeTreeH = Math.max(MIN_NODE_TREE, nodeTreeH);\r\n            sideTabsH = Math.max(MIN_SIDE_TABS, sideTabsH);\r\n            // If overflow, reduce node tree first, then side tabs\r\n            let overflow = (nodeTreeH + sideTabsH) - available;\r\n            if (overflow > 0) {\r\n                const reducibleNode = nodeTreeH - MIN_NODE_TREE;\r\n                const takeFromNode = Math.min(reducibleNode, overflow);\r\n                nodeTreeH -= takeFromNode;\r\n                overflow -= takeFromNode;\r\n            }\r\n            if (overflow > 0) {\r\n                const reducibleSide = sideTabsH - MIN_SIDE_TABS;\r\n                const takeFromSide = Math.min(reducibleSide, overflow);\r\n                sideTabsH -= takeFromSide;\r\n                overflow -= takeFromSide;\r\n            }\r\n            // Final guard: if still overflow (extreme small window) proportionally scale\r\n            if (overflow > 0 && (nodeTreeH + sideTabsH) > 0) {\r\n                const scale = (available) / (nodeTreeH + sideTabsH);\r\n                nodeTreeH = Math.max(MIN_NODE_TREE, Math.floor(nodeTreeH * scale));\r\n                sideTabsH = Math.max(MIN_SIDE_TABS, Math.floor(sideTabsH * scale));\r\n            }\r\n            return { nodeTreeH, sideTabsH };\r\n        };\r\n\r\n        const applyHeights = (nodeTreeH, sideTabsH, updateRatio=true) => {\r\n            // Node tree fixed height; side tabs can flex to absorb extra / release space\r\n            nodeTreeSection.style.flex = `0 0 ${nodeTreeH}px`;\r\n            sideTabsSection.style.flex = `1 1 ${sideTabsH}px`;\r\n            if (updateRatio && rightRegion) {\r\n                const totalRegionHeight = rightRegion.getBoundingClientRect().height;\r\n                const resizerHeight = resizer.getBoundingClientRect().height || 4;\r\n                const statusBarHeightRaw = statusBar ? statusBar.getBoundingClientRect().height : 0;\r\n                const statusBarHeight = Math.max(this.MIN_STATUS_BAR_HEIGHT, statusBarHeightRaw);\r\n                const available = totalRegionHeight - statusBarHeight - resizerHeight;\r\n                if (available > 0) {\r\n                    this._horizontalNodeTreeRatio = Math.min(0.95, Math.max(0.05, nodeTreeH / available));\r\n                }\r\n            }\r\n        };\r\n\r\n        const resize = (e) => {\r\n            if (!isResizing) return;\r\n            const deltaY = e.clientY - startY;\r\n            let tentativeNode = startNodeTreeHeight + deltaY;\r\n            let tentativeSide = startSideTabsHeight - deltaY;\r\n            let { nodeTreeH, sideTabsH } = fitHorizontalHeights(tentativeNode, tentativeSide);\r\n            applyHeights(nodeTreeH, sideTabsH);\r\n            this.emit('horizontal-resize', { nodeTreeHeight: nodeTreeH, sideTabsHeight: sideTabsH });\r\n            e.preventDefault();\r\n        };\r\n        \r\n        const stopResize = () => {\r\n            if (!isResizing) return;\r\n            \r\n            isResizing = false;\r\n            resizer.classList.remove('resizing');\r\n            document.body.style.cursor = '';\r\n            document.body.style.userSelect = '';\r\n        };\r\n        \r\n        resizer.addEventListener('mousedown', startResize);\r\n        document.addEventListener('mousemove', resize);\r\n        document.addEventListener('mouseup', stopResize);\r\n        \r\n        this.resizers.push({\r\n            type: 'horizontal',\r\n            cleanup: () => {\r\n                resizer.removeEventListener('mousedown', startResize);\r\n                document.removeEventListener('mousemove', resize);\r\n                document.removeEventListener('mouseup', stopResize);\r\n            }\r\n        });\r\n\r\n        // Adjust on window resize so status bar never disappears\r\n        const handleSectionFit = () => {\r\n            if (!rightRegion) return;\r\n            const totalRegionHeight = rightRegion.getBoundingClientRect().height;\r\n            const resizerHeight = resizer.getBoundingClientRect().height || 4;\r\n            const statusBarHeightRaw = statusBar ? statusBar.getBoundingClientRect().height : 0;\r\n            const statusBarHeight = Math.max(this.MIN_STATUS_BAR_HEIGHT, statusBarHeightRaw);\r\n            const available = totalRegionHeight - statusBarHeight - resizerHeight;\r\n            let desiredNode = this._horizontalNodeTreeRatio != null ? this._horizontalNodeTreeRatio * available : nodeTreeSection.getBoundingClientRect().height;\r\n            let desiredSide = available - desiredNode;\r\n            let fitted = fitHorizontalHeights(desiredNode, desiredSide);\r\n            applyHeights(fitted.nodeTreeH, fitted.sideTabsH);\r\n            // Post-apply guard: ensure status bar remains visible by shrinking side tabs if overflow occurred\r\n            requestAnimationFrame(() => {\r\n                const nodeTreeH = nodeTreeSection.getBoundingClientRect().height;\r\n                const sideTabsH = sideTabsSection.getBoundingClientRect().height;\r\n                const used = nodeTreeH + sideTabsH + statusBarHeight + resizerHeight;\r\n                if (used > totalRegionHeight) {\r\n                    const overflow = used - totalRegionHeight;\r\n                    const newSide = Math.max(MIN_SIDE_TABS, sideTabsH - overflow);\r\n                    if (newSide !== sideTabsH) {\r\n                        applyHeights(nodeTreeH, newSide, false);\r\n                    }\r\n                }\r\n            });\r\n        };\r\n        window.addEventListener('resize', handleSectionFit);\r\n        this.resizers.push({\r\n            type: 'horizontal-fit-listener',\r\n            cleanup: () => window.removeEventListener('resize', handleSectionFit)\r\n        });\r\n\r\n        // Initial ratio capture after first layout paint (avoid snap)\r\n        requestAnimationFrame(() => handleSectionFit());\r\n    }\r\n    \r\n    setupLeftHorizontalResizer() {\r\n        const resizer = document.querySelector('.left-horizontal-resizer');\r\n        const viewportArea = document.querySelector('.viewport-area');\r\n        const viewerArea = document.querySelector('.viewer-area');\r\n        const leftRegion = document.querySelector('.left-region');\r\n        \r\n        if (!resizer || !viewportArea || !viewerArea || !leftRegion) {\r\n            console.warn('[Resizer] Left horizontal resizer elements not found');\r\n            return;\r\n        }\r\n        \r\n        let isResizing = false;\r\n        let startY = 0;\r\n        let startViewportHeight = 0;\r\n        let startViewerHeight = 0;\r\n        let rafId = null;\r\n        \r\n        const startResize = (e) => {\r\n            isResizing = true;\r\n            startY = e.clientY;\r\n            \r\n            const viewportRect = viewportArea.getBoundingClientRect();\r\n            const viewerRect = viewerArea.getBoundingClientRect();\r\n            \r\n            startViewportHeight = viewportRect.height;\r\n            startViewerHeight = viewerRect.height;\r\n            \r\n            resizer.classList.add('resizing');\r\n            document.body.style.cursor = 'ns-resize';\r\n            document.body.style.userSelect = 'none';\r\n            \r\n            // Add overlay\r\n            const overlay = document.createElement('div');\r\n            overlay.id = 'resize-overlay';\r\n            overlay.style.cssText = 'position:fixed;top:0;left:0;right:0;bottom:0;z-index:9999;cursor:ns-resize;';\r\n            document.body.appendChild(overlay);\r\n            \r\n            e.preventDefault();\r\n        };\r\n        \r\n        const resize = (e) => {\r\n            if (!isResizing) return;\r\n            \r\n            // Cancel previous RAF\r\n            if (rafId) cancelAnimationFrame(rafId);\r\n            \r\n            rafId = requestAnimationFrame(() => {\r\n                const deltaY = e.clientY - startY;\r\n                const leftRect = leftRegion.getBoundingClientRect();\r\n                const totalHeight = leftRect.height;\r\n                const resizerHeight = 4;\r\n                \r\n                // Calculate new heights with constraints\r\n                let newViewportHeight = Math.max(this.MIN_VIEWPORT_HEIGHT, startViewportHeight + deltaY);\r\n                let newViewerHeight = Math.max(this.MIN_VIEWER_HEIGHT, startViewerHeight - deltaY);\r\n                \r\n                // Ensure they don't exceed total\r\n                const maxViewportHeight = totalHeight - resizerHeight - this.MIN_VIEWER_HEIGHT;\r\n                const maxViewerHeight = totalHeight - resizerHeight - this.MIN_VIEWPORT_HEIGHT;\r\n                \r\n                newViewportHeight = Math.min(newViewportHeight, maxViewportHeight);\r\n                newViewerHeight = Math.min(newViewerHeight, maxViewerHeight);\r\n                \r\n                // Apply sizes\r\n                viewportArea.style.flex = `0 0 ${newViewportHeight}px`;\r\n                viewerArea.style.flex = `0 0 ${newViewerHeight}px`;\r\n                \r\n                // Sync canvas size\r\n                this.syncCanvasSize();\r\n                \r\n                this.emit('left-horizontal-resize', { \r\n                    viewportHeight: newViewportHeight, \r\n                    viewerHeight: newViewerHeight \r\n                });\r\n            });\r\n            \r\n            e.preventDefault();\r\n        };\r\n        \r\n        const stopResize = () => {\r\n            if (!isResizing) return;\r\n            \r\n            isResizing = false;\r\n            resizer.classList.remove('resizing');\r\n            document.body.style.cursor = '';\r\n            document.body.style.userSelect = '';\r\n            \r\n            const overlay = document.getElementById('resize-overlay');\r\n            if (overlay) overlay.remove();\r\n            \r\n            // Cancel any pending RAF\r\n            if (rafId) {\r\n                cancelAnimationFrame(rafId);\r\n                rafId = null;\r\n            }\r\n            \r\n            // Final canvas sync\r\n            this.syncCanvasSize();\r\n        };\r\n        \r\n        resizer.addEventListener('mousedown', startResize);\r\n        document.addEventListener('mousemove', resize);\r\n        document.addEventListener('mouseup', stopResize);\r\n        \r\n        this.resizers.push({\r\n            type: 'left-horizontal',\r\n            cleanup: () => {\r\n                resizer.removeEventListener('mousedown', startResize);\r\n                document.removeEventListener('mousemove', resize);\r\n                document.removeEventListener('mouseup', stopResize);\r\n            }\r\n        });\r\n\r\n        // Set initial split to 70/30 instead of 80/20\r\n        requestAnimationFrame(() => {\r\n            const leftRect = leftRegion.getBoundingClientRect();\r\n            const totalHeight = leftRect.height - 4; // minus resizer height\r\n            const viewportHeight = totalHeight * 0.7; // 70%\r\n            const viewerHeight = totalHeight * 0.3; // 30%\r\n            \r\n            viewportArea.style.flex = `0 0 ${viewportHeight}px`;\r\n            viewerArea.style.flex = `1 1 ${viewerHeight}px`; // Change to flex-grow: 1\r\n            \r\n            // Initial canvas size sync\r\n            this.syncCanvasSize();\r\n            \r\n            // IMPORTANT: Trigger a resize event after a small delay to ensure texture canvas gets sized\r\n            setTimeout(() => {\r\n                window.dispatchEvent(new Event('resize'));\r\n            }, 100);\r\n        });\r\n\r\n    }\r\n    \r\n    dispose() {\r\n        this.resizers.forEach(resizer => {\r\n            if (resizer.cleanup) {\r\n                resizer.cleanup();\r\n            }\r\n        });\r\n        this.resizers = [];\r\n        console.log('[Resizer] Disposed');\r\n    }\r\n}",
        "gizmoController": "// FILE: templates/scripts/components/gizmo-controller.js\r\n// Main thread gizmo controller - handles viewport gizmo UI and transform gizmo communication\r\n\r\nclass GizmoController {\r\n    constructor() {\r\n        console.log('[GizmoController] \u{1F3AF} Constructor called!');\r\n        console.error('[GizmoController] CONSTRUCTOR STACK TRACE:', new Error().stack);\r\n        \r\n        this.canvas = null;\r\n        this.worker = null;\r\n        this.isInitialized = false;\r\n        \r\n        // Viewport gizmo state\r\n        this.viewportGizmoCanvas = null;\r\n        this.viewportGizmoRenderer = null;\r\n        this.viewportGizmoScene = null;\r\n        this.viewportGizmoCamera = null;\r\n        this.viewportGizmoGroup = null;\r\n        \r\n        // Camera state from worker\r\n        this.cameraQuaternion = new THREE.Quaternion();\r\n        \r\n        console.log('[GizmoController] \u2705 Controller created successfully');\r\n        console.log('[GizmoController] THREE available?', typeof THREE !== 'undefined');\r\n    }\r\n    \r\n    /**\r\n     * Initialize the gizmo controller with canvas and worker\r\n     */\r\n    initialize(canvas, worker) {\r\n        console.log('[GizmoController] \u{1F3AF} Initialize called!');\r\n        console.log('[GizmoController] Canvas:', canvas);\r\n        console.log('[GizmoController] Worker:', worker);\r\n        console.log('[GizmoController] Already initialized?', this.isInitialized);\r\n        \r\n        if (this.isInitialized) {\r\n            console.warn('[GizmoController] Already initialized, skipping');\r\n            return;\r\n        }\r\n        \r\n        this.canvas = canvas;\r\n        this.worker = worker;\r\n        \r\n        console.log('[GizmoController] Starting initialization...');\r\n        \r\n        try {\r\n            // Create viewport gizmo UI\r\n            console.log('[GizmoController] Creating viewport gizmo UI...');\r\n            this.createViewportGizmoUI();\r\n            \r\n            // Setup mouse event listeners for transform gizmo\r\n            console.log('[GizmoController] Setting up transform gizmo listeners...');\r\n            this.setupTransformGizmoListeners();\r\n            \r\n            // Listen for worker messages\r\n            console.log('[GizmoController] Setting up worker message listener...');\r\n            this.setupWorkerMessageListener();\r\n            \r\n            // Initialize transform gizmo in worker\r\n            console.log('[GizmoController] Initializing worker gizmos...');\r\n            this.initializeWorkerGizmos();\r\n            \r\n            this.isInitialized = true;\r\n            console.log('[GizmoController] \u2705 Gizmo controller initialized successfully!');\r\n        } catch (error) {\r\n            console.error('[GizmoController] \u274C Initialization failed:', error);\r\n            console.error('[GizmoController] Stack trace:', error.stack);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Create the viewport gizmo UI element (rendered in main thread)\r\n     */\r\n    createViewportGizmoUI() {\r\n        console.log('[GizmoController] Creating viewport gizmo container...');\r\n        \r\n        // Check if container already exists\r\n        let container = document.getElementById('viewport-gizmo-container');\r\n        if (container) {\r\n            console.log('[GizmoController] Container already exists, removing old one');\r\n            container.remove();\r\n        }\r\n        \r\n        // Create container for viewport gizmo\r\n        container = document.createElement('div');\r\n        container.id = 'viewport-gizmo-container';\r\n        container.style.cssText = `\r\n            position: absolute;\r\n            top: 46px;\r\n            right: 10px;\r\n            width: 196px;\r\n            height: 196px;\r\n            z-index: 90;\r\n            pointer-events: auto;\r\n            cursor: pointer;\r\n            user-select: none;\r\n            background: transparent;\r\n            border: none;\r\n            border-radius: 0;\r\n            overflow: visible;\r\n        `;\r\n        \r\n        // Create canvas for viewport gizmo\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = 196;\r\n        canvas.height = 196;\r\n        canvas.style.width = '196px';\r\n        canvas.style.height = '196px';\r\n        container.appendChild(canvas);\r\n        \r\n        // Add to viewport\r\n        const viewportArea = document.getElementById('viewport-area');\r\n        if (viewportArea) {\r\n            console.log('[GizmoController] Adding container to viewport-area');\r\n            viewportArea.appendChild(container);\r\n            this.viewportGizmoCanvas = canvas;\r\n            \r\n            // Setup viewport gizmo renderer\r\n            this.setupViewportGizmoRenderer(canvas);\r\n            \r\n            // Setup viewport gizmo mouse events\r\n            this.setupViewportGizmoEvents(container, canvas);\r\n        } else {\r\n            console.error('[GizmoController] viewport-area element not found!');\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Setup Three.js renderer for viewport gizmo (main thread)\r\n     */\r\n    setupViewportGizmoRenderer(canvas) {\r\n        // Create renderer\r\n        this.viewportGizmoRenderer = new THREE.WebGLRenderer({\r\n            canvas: canvas,\r\n            alpha: true,\r\n            antialias: true\r\n        });\r\n        this.viewportGizmoRenderer.setSize(196, 196);\r\n        this.viewportGizmoRenderer.setClearColor(0x000000, 0);\r\n        \r\n        // Create scene\r\n        this.viewportGizmoScene = new THREE.Scene();\r\n        \r\n        // Create camera\r\n        this.viewportGizmoCamera = new THREE.PerspectiveCamera(50, 1, 0.1, 100);\r\n        this.viewportGizmoCamera.position.set(3, -3, 3);\r\n        this.viewportGizmoCamera.up.set(0, 0, 1);\r\n        this.viewportGizmoCamera.lookAt(0, 0, 0);\r\n        \r\n        // Create the gizmo geometry\r\n        this.createViewportGizmoGeometry();\r\n        \r\n        // Start render loop for viewport gizmo\r\n        this.startViewportGizmoRenderLoop();\r\n    }\r\n    \r\n    /**\r\n     * Create viewport gizmo geometry\r\n     */\r\n    createViewportGizmoGeometry() {\r\n        const group = new THREE.Group();\r\n        \r\n        // Face definitions\r\n        const faces = {\r\n            front: { normal: [0, -1, 0], color: 0x4CAF50, label: 'Front' },\r\n            back: { normal: [0, 1, 0], color: 0x2196F3, label: 'Back' },\r\n            left: { normal: [-1, 0, 0], color: 0xFF9800, label: 'Left' },\r\n            right: { normal: [1, 0, 0], color: 0xE91E63, label: 'Right' },\r\n            top: { normal: [0, 0, 1], color: 0x9C27B0, label: 'Top' },\r\n            bottom: { normal: [0, 0, -1], color: 0x795548, label: 'Bottom' }\r\n        };\r\n        \r\n        // Create cube faces\r\n        const faceSize = 0.8;\r\n        const faceGeometry = new THREE.BoxGeometry(faceSize, 0.05, faceSize);\r\n        \r\n        Object.entries(faces).forEach(([key, face]) => {\r\n            const material = new THREE.MeshBasicMaterial({\r\n                color: face.color,\r\n                opacity: 0.8,\r\n                transparent: true\r\n            });\r\n            \r\n            const mesh = new THREE.Mesh(faceGeometry, material);\r\n            mesh.userData = { type: 'face', faceKey: key, ...face };\r\n            \r\n            // Position based on normal\r\n            if (face.normal[0] !== 0) {\r\n                mesh.rotation.z = Math.PI / 2;\r\n                mesh.position.x = face.normal[0] * 0.5;\r\n            } else if (face.normal[1] !== 0) {\r\n                mesh.position.y = face.normal[1] * 0.5;\r\n            } else if (face.normal[2] !== 0) {\r\n                mesh.rotation.x = Math.PI / 2;\r\n                mesh.position.z = face.normal[2] * 0.5;\r\n            }\r\n            \r\n            group.add(mesh);\r\n        });\r\n        \r\n        // Create axes\r\n        const axisLength = 1.2;\r\n        const axisRadius = 0.02;\r\n        \r\n        // X axis - Red\r\n        const xGeometry = new THREE.CylinderGeometry(axisRadius, axisRadius, axisLength, 8);\r\n        const xMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });\r\n        const xAxis = new THREE.Mesh(xGeometry, xMaterial);\r\n        xAxis.rotation.z = -Math.PI / 2;\r\n        xAxis.position.x = axisLength / 2;\r\n        group.add(xAxis);\r\n        \r\n        // Y axis - Green (negative for C3)\r\n        const yGeometry = new THREE.CylinderGeometry(axisRadius, axisRadius, axisLength, 8);\r\n        const yMaterial = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\r\n        const yAxis = new THREE.Mesh(yGeometry, yMaterial);\r\n        yAxis.position.y = -axisLength / 2;\r\n        group.add(yAxis);\r\n        \r\n        // Z axis - Blue\r\n        const zGeometry = new THREE.CylinderGeometry(axisRadius, axisRadius, axisLength, 8);\r\n        const zMaterial = new THREE.MeshBasicMaterial({ color: 0x0000ff });\r\n        const zAxis = new THREE.Mesh(zGeometry, zMaterial);\r\n        zAxis.rotation.x = Math.PI / 2;\r\n        zAxis.position.z = axisLength / 2;\r\n        group.add(zAxis);\r\n        \r\n        // Add axis labels\r\n        this.createAxisLabels(group);\r\n        \r\n        // No lighting needed - viewport gizmo uses unlit materials\r\n        \r\n        this.viewportGizmoGroup = group;\r\n        this.viewportGizmoScene.add(group);\r\n    }\r\n    \r\n    /**\r\n     * Create axis labels for viewport gizmo\r\n     */\r\n    createAxisLabels(group) {\r\n        // Create text sprites without FontLoader (deprecated in Three.js r147+)\r\n        const createTextSprite = (text, color, position) => {\r\n            const canvas = document.createElement('canvas');\r\n            canvas.width = 64;\r\n            canvas.height = 64;\r\n            const ctx = canvas.getContext('2d');\r\n            \r\n            ctx.fillStyle = color;\r\n            ctx.font = 'bold 48px Arial';\r\n            ctx.textAlign = 'center';\r\n            ctx.textBaseline = 'middle';\r\n            ctx.fillText(text, 32, 32);\r\n            \r\n            const texture = new THREE.CanvasTexture(canvas);\r\n            const spriteMaterial = new THREE.SpriteMaterial({ map: texture });\r\n            const sprite = new THREE.Sprite(spriteMaterial);\r\n            sprite.scale.set(0.3, 0.3, 1);\r\n            sprite.position.copy(position);\r\n            \r\n            return sprite;\r\n        };\r\n        \r\n        group.add(createTextSprite('X', '#ff0000', new THREE.Vector3(1.5, 0, 0)));\r\n        group.add(createTextSprite('Y', '#00ff00', new THREE.Vector3(0, -1.5, 0)));\r\n        group.add(createTextSprite('Z', '#0000ff', new THREE.Vector3(0, 0, 1.5)));\r\n    }\r\n    \r\n    /**\r\n     * Start render loop for viewport gizmo\r\n     */\r\n    // Fix startViewportGizmoRenderLoop to keep gizmo aligned with world axes:\r\n    startViewportGizmoRenderLoop() {\r\n        const animate = () => {\r\n            requestAnimationFrame(animate);\r\n            \r\n            // FIXED: Don't rotate the gizmo group - it should stay aligned with world axes\r\n            // The camera position relative to the gizmo will show the correct orientation\r\n            if (this.viewportGizmoGroup) {\r\n                // Keep the gizmo aligned with world axes (no rotation)\r\n                this.viewportGizmoGroup.quaternion.identity();\r\n            }\r\n            \r\n            // Update the camera to match the main camera's viewing angle\r\n            if (this.viewportGizmoCamera && window.camera) {\r\n                // Get the main camera's position relative to its target\r\n                const target = window.orbitControls ? window.orbitControls.target : new THREE.Vector3(0, 0, 0);\r\n                const relativePos = window.camera.position.clone().sub(target).normalize();\r\n                \r\n                // Set viewport gizmo camera to match this viewing angle\r\n                const distance = 5;\r\n                this.viewportGizmoCamera.position.copy(relativePos.multiplyScalar(distance));\r\n                this.viewportGizmoCamera.up.copy(window.camera.up);\r\n                this.viewportGizmoCamera.lookAt(0, 0, 0);\r\n            }\r\n            \r\n            // Render\r\n            if (this.viewportGizmoRenderer && this.viewportGizmoScene && this.viewportGizmoCamera) {\r\n                this.viewportGizmoRenderer.render(this.viewportGizmoScene, this.viewportGizmoCamera);\r\n            }\r\n        };\r\n        animate();\r\n    }\r\n    \r\n    /**\r\n     * Setup mouse events for viewport gizmo\r\n     */\r\n    setupViewportGizmoEvents(container, canvas) {\r\n        const raycaster = new THREE.Raycaster();\r\n        const mouse = new THREE.Vector2();\r\n        \r\n        // Click handler\r\n        canvas.addEventListener('click', (event) => {\r\n            const rect = canvas.getBoundingClientRect();\r\n            mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;\r\n            mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\r\n            \r\n            raycaster.setFromCamera(mouse, this.viewportGizmoCamera);\r\n            const intersects = raycaster.intersectObjects(this.viewportGizmoGroup.children);\r\n            \r\n            if (intersects.length > 0) {\r\n                const object = intersects[0].object;\r\n                if (object.userData.type === 'face') {\r\n                    this.handleViewportGizmoClick(object.userData);\r\n                }\r\n            }\r\n        });\r\n        \r\n        // Hover effect\r\n        canvas.addEventListener('mousemove', (event) => {\r\n            const rect = canvas.getBoundingClientRect();\r\n            mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;\r\n            mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\r\n            \r\n            raycaster.setFromCamera(mouse, this.viewportGizmoCamera);\r\n            const intersects = raycaster.intersectObjects(this.viewportGizmoGroup.children);\r\n            \r\n            // Reset all materials\r\n            this.viewportGizmoGroup.children.forEach(child => {\r\n                if (child.material && child.userData.type === 'face') {\r\n                    child.material.opacity = 0.8;\r\n                }\r\n            });\r\n            \r\n            // Highlight hovered\r\n            if (intersects.length > 0) {\r\n                const object = intersects[0].object;\r\n                if (object.material && object.userData.type === 'face') {\r\n                    object.material.opacity = 1.0;\r\n                    canvas.style.cursor = 'pointer';\r\n                }\r\n            } else {\r\n                canvas.style.cursor = 'grab';\r\n            }\r\n        });\r\n        \r\n        // Drag to rotate viewport gizmo\r\n        let isDragging = false;\r\n        let lastMousePos = { x: 0, y: 0 };\r\n        \r\n        canvas.addEventListener('mousedown', (event) => {\r\n            if (event.button === 0) {\r\n                isDragging = true;\r\n                lastMousePos = { x: event.clientX, y: event.clientY };\r\n                canvas.style.cursor = 'grabbing';\r\n            }\r\n        });\r\n        \r\n        canvas.addEventListener('mousemove', (event) => {\r\n            if (isDragging) {\r\n                const deltaX = event.clientX - lastMousePos.x;\r\n                const deltaY = event.clientY - lastMousePos.y;\r\n                \r\n                // Rotate the viewport gizmo group\r\n                this.viewportGizmoGroup.rotation.z += deltaX * 0.01;\r\n                this.viewportGizmoGroup.rotation.x += deltaY * 0.01;\r\n                \r\n                lastMousePos = { x: event.clientX, y: event.clientY };\r\n            }\r\n        });\r\n        \r\n        canvas.addEventListener('mouseup', () => {\r\n            isDragging = false;\r\n            canvas.style.cursor = 'grab';\r\n        });\r\n        \r\n        canvas.addEventListener('mouseleave', () => {\r\n            isDragging = false;\r\n            canvas.style.cursor = 'grab';\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * Handle viewport gizmo clicks\r\n     */\r\n    handleViewportGizmoClick(faceData) {\r\n        console.log(`[GizmoController] Viewport gizmo clicked: ${faceData.label}`);\r\n        \r\n        // Get current target from OrbitControls\r\n        const currentTarget = window.orbitControls ? \r\n            [window.orbitControls.target.x, window.orbitControls.target.y, window.orbitControls.target.z] : \r\n            [0, 0, 0];\r\n        \r\n        // Calculate camera position based on face, relative to current target\r\n        // Keep the same camera distance (radius) from the target as before the snap\r\n        const targetVec = new THREE.Vector3(currentTarget[0], currentTarget[1], currentTarget[2]);\r\n        const currentRadius = (window.camera && window.orbitControls)\r\n            ? window.camera.position.distanceTo(targetVec)\r\n            : 15; // fallback\r\n        const normal = new THREE.Vector3(...faceData.normal);\r\n        const offset = normal.multiplyScalar(currentRadius);\r\n        \r\n        // Position is target + offset\r\n        const position = [\r\n            currentTarget[0] + offset.x,\r\n            currentTarget[1] + offset.y,\r\n            currentTarget[2] + offset.z\r\n        ];\r\n        \r\n        // Determine the up vector for each face\r\n        let upVector = [0, 0, 1]; // Default up is Z for most views\r\n        \r\n        // Special handling for top/bottom views\r\n        // Top view: screen-up should be +Y\r\n        if (faceData.label === 'Top') {\r\n            upVector = [0, 1, 0];\r\n        } else if (faceData.label === 'Bottom') {\r\n            // Bottom view: screen-up should be -Y\r\n            upVector = [0, -1, 0];\r\n        }\r\n        \r\n        // Send to worker - explicitly maintain the current target\r\n        if (this.worker) {\r\n            this.worker.postMessage({\r\n                type: 'CAMERA_ANIMATE_TO',\r\n                data: {\r\n                    position: position,\r\n                    target: currentTarget,  // Explicitly pass current target\r\n                    upVector: upVector,\r\n                    duration: 500,\r\n                    viewName: faceData.label\r\n                }\r\n            });\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Setup mouse listeners for transform gizmo on main canvas\r\n     */\r\n    setupTransformGizmoListeners() {\r\n        if (!this.canvas) return;\r\n        \r\n        let normalizedMouse = { x: 0, y: 0 };\r\n        let isDragging = false;\r\n        \r\n        // Track mouse position\r\n        this.canvas.addEventListener('mousemove', (event) => {\r\n            const rect = this.canvas.getBoundingClientRect();\r\n            normalizedMouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;\r\n            normalizedMouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\r\n            \r\n            // Send to worker for transform gizmo\r\n            if (this.worker) {\r\n                this.worker.postMessage({\r\n                    type: 'GIZMO_MOUSE_MOVE',\r\n                    data: {\r\n                        x: normalizedMouse.x,\r\n                        y: normalizedMouse.y,\r\n                        isDragging: isDragging\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        \r\n        // Mouse down\r\n        this.canvas.addEventListener('mousedown', (event) => {\r\n            if (event.button !== 0) return; // Only left click\r\n            \r\n            const rect = this.canvas.getBoundingClientRect();\r\n            normalizedMouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;\r\n            normalizedMouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\r\n            \r\n            // Send to worker to check if gizmo was hit\r\n            if (this.worker) {\r\n                this.worker.postMessage({\r\n                    type: 'GIZMO_MOUSE_DOWN',\r\n                    data: {\r\n                        x: normalizedMouse.x,\r\n                        y: normalizedMouse.y\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        \r\n        // Mouse up\r\n        this.canvas.addEventListener('mouseup', (event) => {\r\n            isDragging = false;\r\n            \r\n            if (this.worker) {\r\n                this.worker.postMessage({\r\n                    type: 'GIZMO_MOUSE_UP',\r\n                    data: {}\r\n                });\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * Setup listener for worker messages\r\n     */\r\n    setupWorkerMessageListener() {\r\n        // Listen for messages from worker via window events\r\n        window.addEventListener('worker-message', (event) => {\r\n            const { type, data } = event.detail;\r\n            this.handleWorkerMessage(type, data);\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * Initialize gizmos in worker\r\n     */\r\n    initializeWorkerGizmos() {\r\n        if (!this.worker) return;\r\n        \r\n        console.log('[GizmoController] Initializing worker transform gizmo...');\r\n        \r\n        this.worker.postMessage({\r\n            type: 'INIT_GIZMOS',\r\n            data: {\r\n                transformGizmoSize: 3.0 // Larger size as requested\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * Handle messages from worker\r\n     */\r\n    handleWorkerMessage(type, data) {\r\n        switch (type) {\r\n            case 'CAMERA_UPDATE':\r\n            case 'CAMERA_QUATERNION_UPDATE':\r\n                // Update camera quaternion for viewport gizmo\r\n                if (data.quaternion) {\r\n                    this.cameraQuaternion.fromArray(data.quaternion);\r\n                }\r\n                break;\r\n                \r\n            case 'GIZMO_ACTIVE':\r\n                if (data.active) {\r\n                    // Disable orbit controls while dragging\r\n                    if (window.orbitControls) {\r\n                        window.orbitControls.enabled = false;\r\n                    }\r\n                    this.canvas.style.cursor = 'move';\r\n                } else {\r\n                    // Re-enable orbit controls\r\n                    if (window.orbitControls) {\r\n                        window.orbitControls.enabled = true;\r\n                    }\r\n                    this.canvas.style.cursor = 'grab';\r\n                }\r\n                break;\r\n                \r\n            case 'GIZMO_HOVER':\r\n                if (data.hovering) {\r\n                    this.canvas.style.cursor = 'pointer';\r\n                } else {\r\n                    this.canvas.style.cursor = 'grab';\r\n                }\r\n                break;\r\n                \r\n            case 'UPDATE_CAMERA_TARGET':\r\n                // Update OrbitControls target in main thread\r\n                if (window.orbitControls && data.target) {\r\n                    // Only update the target if Follow is enabled\r\n                    if (window.viewportControls && window.viewportControls.state && !window.viewportControls.state.cameraFollow) {\r\n                        break;\r\n                    }\r\n                    console.log('[GizmoController] Updating camera target:', data.target);\r\n                    window.orbitControls.target.set(data.target.x, data.target.y, data.target.z);\r\n                    window.orbitControls.update();\r\n                }\r\n                break;\r\n                \r\n            case 'UPDATE_CAMERA_FOLLOW':\r\n                // Update both camera position and target to maintain relative view\r\n                if (window.camera && window.orbitControls && data) {\r\n                    // Only follow when Follow checkbox is enabled\r\n                    if (window.viewportControls && window.viewportControls.state && !window.viewportControls.state.cameraFollow) {\r\n                        break;\r\n                    }\r\n                    // Prefer provided delta; if missing, infer from current target -> new target\r\n                    let inferredDelta = null;\r\n                    if (!data.delta && data.target && window.orbitControls?.target) {\r\n                        inferredDelta = {\r\n                            x: data.target.x - window.orbitControls.target.x,\r\n                            y: data.target.y - window.orbitControls.target.y,\r\n                            z: data.target.z - window.orbitControls.target.z\r\n                        };\r\n                    }\r\n\r\n                    const delta = data.delta || inferredDelta;\r\n                    console.log('[GizmoController] Camera follow - applying delta:', delta, 'target:', data.target);\r\n\r\n                    // Move camera by delta to maintain the same relative view\r\n                    if (delta) {\r\n                        window.camera.position.x += delta.x;\r\n                        window.camera.position.y += delta.y;\r\n                        window.camera.position.z += delta.z;\r\n                    }\r\n\r\n                    // Always update the target if provided\r\n                    if (data.target) {\r\n                        window.orbitControls.target.set(data.target.x, data.target.y, data.target.z);\r\n                    }\r\n\r\n                    window.orbitControls.update();\r\n                }\r\n                break;\r\n                \r\n            case 'CAMERA_SNAP_TO_VIEW':\r\n                // Snap camera to a specific view orientation\r\n                if (window.camera && window.orbitControls && data) {\r\n                    console.log('[GizmoController] Snapping camera to view:', data.viewName);\r\n\r\n                    // Disable orbit controls temporarily\r\n                    window.orbitControls.enabled = false;\r\n\r\n                    // Set camera position\r\n                    if (data.position) {\r\n                        window.camera.position.set(data.position[0], data.position[1], data.position[2]);\r\n                    }\r\n\r\n                    // Set orbit controls target and look\r\n                    if (data.target) {\r\n                        window.orbitControls.target.set(data.target[0], data.target[1], data.target[2]);\r\n                        window.camera.lookAt(window.orbitControls.target);\r\n                    }\r\n\r\n                    // Force world Z-up to avoid roll in OrbitControls\r\n                    window.camera.up.set(0, 0, 1);\r\n\r\n                    window.camera.updateMatrixWorld();\r\n                    window.orbitControls.update();\r\n\r\n                    // Re-enable orbit controls after a short delay\r\n                    setTimeout(() => {\r\n                        window.orbitControls.enabled = true;\r\n                    }, 100);\r\n                }\r\n                break;\r\n                \r\n            case 'UPDATE_DELTA_LABEL':\r\n                // Handle delta label display in scene-topbar\r\n                const topbar = document.querySelector('.scene-topbar');\r\n                const topbarControls = document.querySelector('.topbar-controls-wrapper');\r\n                \r\n                if (!window.deltaLabel && topbar) {\r\n                    // Create delta label element in the topbar\r\n                    const deltaLabel = document.createElement('div');\r\n                    deltaLabel.id = 'transform-delta-label';\r\n                    deltaLabel.style.cssText = `\r\n                        padding: 0 12px;\r\n                        color: rgba(255, 255, 255, 0.9);\r\n                        font-family: 'Consolas', 'Monaco', monospace;\r\n                        font-size: 12px;\r\n                        white-space: nowrap;\r\n                        display: none;\r\n                        align-items: center;\r\n                        height: 100%;\r\n                    `;\r\n                    // Insert at the beginning of the topbar\r\n                    topbar.insertBefore(deltaLabel, topbar.firstChild);\r\n                    window.deltaLabel = deltaLabel;\r\n                }\r\n                \r\n                if (data && data.visible && window.deltaLabel) {\r\n                    window.deltaLabel.textContent = data.text;\r\n                    window.deltaLabel.style.display = 'flex'; // Use flex to center vertically\r\n                    \r\n                    // Hide the topbar controls while showing delta\r\n                    if (topbarControls) {\r\n                        topbarControls.style.display = 'none';\r\n                    }\r\n                } else if (window.deltaLabel) {\r\n                    window.deltaLabel.style.display = 'none';\r\n                    \r\n                    // Show the topbar controls again\r\n                    if (topbarControls) {\r\n                        topbarControls.style.display = 'flex';\r\n                    }\r\n                }\r\n                break;\r\n                \r\n            case 'GIZMO_TRANSFORM_UPDATE':\r\n                // Handle transform updates from gizmo\r\n                if (data.position || data.rotation || data.scale) {\r\n                    this.handleTransformUpdate(data);\r\n                }\r\n                break;\r\n            case 'POSITION_DRAG_ENDED':\r\n                // Maintain view relative to the object after position drag ends\r\n                if (data && data.position && window.camera && window.orbitControls) {\r\n                    // Only follow when Follow checkbox is enabled\r\n                    if (window.viewportControls && window.viewportControls.state && !window.viewportControls.state.cameraFollow) {\r\n                        break;\r\n                    }\r\n                    const delta = data.delta || { x: 0, y: 0, z: 0 };\r\n\r\n                    // Move camera by the object's movement delta\r\n                    window.camera.position.x += delta.x;\r\n                    window.camera.position.y += delta.y;\r\n                    window.camera.position.z += delta.z;\r\n\r\n                    // Snap orbit target to the new object position\r\n                    window.orbitControls.target.set(\r\n                        data.position.x,\r\n                        data.position.y,\r\n                        data.position.z\r\n                    );\r\n\r\n                    window.orbitControls.update();\r\n                    console.log('[GizmoController] Position drag ended - camera and target updated. Delta:', delta);\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Handle transform updates from gizmo\r\n     */\r\n    handleTransformUpdate(data) {\r\n        console.log('[GizmoController] Handling transform update:', data);\r\n        \r\n        // Update object controls UI by setting state and triggering events\r\n        if (window.objectControls && window.objectControls.state) {\r\n            const state = window.objectControls.state;\r\n            let changed = false;\r\n            \r\n            // Update position (pos-x, pos-y, pos-z)\r\n            if (data.position) {\r\n                state.transform.position.x = data.position.x;\r\n                state.transform.position.y = data.position.y;\r\n                state.transform.position.z = data.position.z;\r\n                changed = true;\r\n            }\r\n            \r\n            // Update rotation (rot-x, rot-y, rot-z)\r\n            if (data.rotation) {\r\n                state.transform.rotation.x = data.rotation.x;\r\n                state.transform.rotation.y = data.rotation.y;\r\n                state.transform.rotation.z = data.rotation.z;\r\n                changed = true;\r\n            }\r\n            \r\n            // Update scale (scale-x, scale-y, scale-z) - independent values\r\n            if (data.scale) {\r\n                state.transform.scale.x = data.scale.x;\r\n                state.transform.scale.y = data.scale.y;\r\n                state.transform.scale.z = data.scale.z;\r\n                changed = true;\r\n            }\r\n            \r\n            // Update uniform scale (master-scale) - ONLY when donut is dragged\r\n            if (data.uniformScale !== undefined) {\r\n                state.transform.uniformScale = data.uniformScale;\r\n                // DO NOT update individual scale components - keep them independent\r\n                // The visual scale should be uniformScale * scale.x/y/z\r\n                changed = true;\r\n            }\r\n            \r\n            if (changed) {\r\n                // Update the UI inputs using _renderUI\r\n                if (window.objectControls._renderUI) {\r\n                    window.objectControls._renderUI();\r\n                }\r\n                \r\n                // Emit transform change event for C3\r\n                if (window.objectControls.emit) {\r\n                    window.objectControls.emit('transforms-changed', {\r\n                        transform: state.transform,\r\n                        deltaTransform: state.deltaTransform,\r\n                        source: 'gizmo' // Mark as from gizmo\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Also send directly to parent (C3) if available\r\n        if (window.sendTransformsToParent) {\r\n            // Get the current unitScale from object controls state\r\n            const currentUnitScale = window.objectControls && window.objectControls.state \r\n                ? window.objectControls.state.transform.unitScale: 64;\r\n            \r\n            const transform = {\r\n                position: data.position || { x: 0, y: 0, z: 0 },\r\n                rotation: data.rotation || { x: 0, y: 0, z: 0 },\r\n                scale: data.scale || { x: 1, y: 1, z: 1 },\r\n                uniformScale: 1,\r\n                unitScale: currentUnitScale,\r\n                rotationOrder: 'ZXY'\r\n            };\r\n            \r\n            // Only send uniform scale if it was explicitly updated (yellow sphere dragged)\r\n            // DO NOT calculate uniform scale from individual axes\r\n            if (data.uniformScale !== undefined) {\r\n                transform.uniformScale = data.uniformScale;\r\n            }\r\n            \r\n            window.sendTransformsToParent(transform, {});\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Public methods for external control\r\n     */\r\n    setMode(mode) {\r\n        if (this.worker) {\r\n            this.worker.postMessage({\r\n                type: 'SET_GIZMO_MODE',\r\n                data: { mode }\r\n            });\r\n        }\r\n    }\r\n    \r\n    setSpace(space) {\r\n        if (this.worker) {\r\n            this.worker.postMessage({\r\n                type: 'SET_GIZMO_SPACE',\r\n                data: { space }\r\n            });\r\n        }\r\n    }\r\n    \r\n    setVisible(visible) {\r\n        if (this.worker) {\r\n            this.worker.postMessage({\r\n                type: 'SET_GIZMO_VISIBLE',\r\n                data: { visible }\r\n            });\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Cleanup\r\n     */\r\n    dispose() {\r\n        // Remove viewport gizmo container\r\n        const container = document.getElementById('viewport-gizmo-container');\r\n        if (container) {\r\n            container.remove();\r\n        }\r\n        \r\n        // Cleanup Three.js resources\r\n        if (this.viewportGizmoRenderer) {\r\n            this.viewportGizmoRenderer.dispose();\r\n        }\r\n        \r\n        this.isInitialized = false;\r\n    }\r\n}\r\n\r\n// Debug: Check if script is loading\r\nconsole.log('[GizmoController] \u{1F680} Script loaded!');\r\nconsole.log('[GizmoController] Current window.gizmoController:', window.gizmoController);\r\n\r\n// Create global instance\r\ntry {\r\n    console.log('[GizmoController] Creating global instance...');\r\n    window.gizmoController = new GizmoController();\r\n    console.log('[GizmoController] Global instance created:', window.gizmoController);\r\n} catch (error) {\r\n    console.error('[GizmoController] Failed to create instance:', error);\r\n}\r\n\r\n// Auto-initialize when worker is ready\r\nif (document.readyState === 'loading') {\r\n    console.log('[GizmoController] Document still loading, adding DOMContentLoaded listener');\r\n    document.addEventListener('DOMContentLoaded', () => {\r\n        console.log('[GizmoController] DOMContentLoaded fired!');\r\n        initializeGizmoWhenReady();\r\n    });\r\n} else {\r\n    console.log('[GizmoController] Document already loaded, initializing now');\r\n    initializeGizmoWhenReady();\r\n}\r\n\r\nfunction initializeGizmoWhenReady() {\r\n    console.log('[GizmoController] Waiting for worker...');\r\n    let checkCount = 0;\r\n    const checkWorker = setInterval(() => {\r\n        checkCount++;\r\n        console.log(`[GizmoController] Check #${checkCount}: worker=${!!window.worker}, canvas=${!!document.getElementById('three-canvas')}`);\r\n        \r\n        if (window.worker) {\r\n            clearInterval(checkWorker);\r\n            const canvas = document.getElementById('three-canvas');\r\n            console.log('[GizmoController] Worker found! Canvas:', canvas);\r\n            \r\n            if (canvas) {\r\n                console.log('[GizmoController] Initializing with canvas and worker');\r\n                window.gizmoController.initialize(canvas, window.worker);\r\n                \r\n                // Initialize Scene Topbar Controls\r\n                if (window.SceneTopbarControls) {\r\n                    console.log('[GizmoController] Initializing Scene Topbar Controls');\r\n                    window.sceneTopbarControls = new SceneTopbarControls();\r\n                    window.sceneTopbarControls.initialize();\r\n                } else {\r\n                    console.warn('[GizmoController] SceneTopbarControls not available');\r\n                }\r\n                \r\n                // Initialize Viewport Buttons\r\n                if (window.ViewportButtons) {\r\n                    console.log('[GizmoController] Initializing Viewport Buttons');\r\n                    window.viewportButtons = new ViewportButtons();\r\n                    window.viewportButtons.initialize(window.worker);\r\n                    \r\n                    // Connect to scene topbar controls if available\r\n                    if (window.sceneTopbarControls) {\r\n                        // The scene topbar controls will handle visibility toggling\r\n                        console.log('[GizmoController] Viewport Buttons connected to Scene Topbar Controls');\r\n                    }\r\n                } else {\r\n                    console.warn('[GizmoController] ViewportButtons not available');\r\n                }\r\n            } else {\r\n                console.error('[GizmoController] Canvas not found!');\r\n            }\r\n        }\r\n        \r\n        if (checkCount > 50) { // Stop after 5 seconds\r\n            clearInterval(checkWorker);\r\n            console.error('[GizmoController] Timeout waiting for worker!');\r\n        }\r\n    }, 100);\r\n}\r\n\r\n// Forward worker messages to gizmo controller\r\nif (!window._workerMessageForwarder) {\r\n    window._workerMessageForwarder = true;\r\n    \r\n    // Listen for worker messages properly\r\n    const setupWorkerForwarding = () => {\r\n        if (window.worker) {\r\n            console.log('[GizmoController] Setting up worker message forwarding');\r\n            window.worker.addEventListener('message', (event) => {\r\n                if (event.data && event.data.type) {\r\n                    // Debug specific gizmo messages\r\n                    if (event.data.type.includes('GIZMO') || event.data.type.includes('CAMERA_QUATERNION')) {\r\n                        console.log('[GizmoController] Worker message:', event.data.type, event.data.data);\r\n                    }\r\n                    \r\n                    // Dispatch custom event for gizmo controller\r\n                    window.dispatchEvent(new CustomEvent('worker-message', {\r\n                        detail: event.data\r\n                    }));\r\n                }\r\n            });\r\n        } else {\r\n            // Retry if worker not ready\r\n            setTimeout(setupWorkerForwarding, 100);\r\n        }\r\n    };\r\n    setupWorkerForwarding();\r\n}",
        "statsOverlay": `/* FILE: editor/z3d-object-editor/templates/scripts/components/stats-overlay.js */\r
/* Stats Overlay Component - Shows real-time rendering statistics */\r
\r
class StatsOverlay {\r
    constructor() {\r
        this.isVisible = false;\r
        this.container = null;\r
        this.updateInterval = null;\r
        \r
        // Stats tracking\r
        this.stats = {\r
            fps: 60,\r
            frameTime: 0,\r
            vertices: 0,\r
            triangles: 0,\r
            drawCalls: 0,\r
            textures: 0,\r
            geometries: 0,\r
            programs: 0,\r
            memory: 0\r
        };\r
        \r
        // FPS calculation\r
        this.frameCount = 0;\r
        this.lastTime = performance.now();\r
        this.fps = 60;\r
        \r
        console.log('[StatsOverlay] Created');\r
    }\r
    \r
    initialize() {\r
        // Find or create the stats overlay container\r
        this.container = document.getElementById('stats-overlay');\r
        \r
        if (!this.container) {\r
            console.error('[StatsOverlay] Container element not found');\r
            return;\r
        }\r
        \r
        // Setup the stats content structure\r
        this.setupStatsContent();\r
        \r
        // Start hidden by default\r
        this.hide();\r
        \r
        // Listen for scene updates from worker\r
        this.setupWorkerListener();\r
        \r
        console.log('[StatsOverlay] Initialized');\r
    }\r
    \r
    setupStatsContent() {\r
        // Create a more comprehensive stats display\r
        this.container.innerHTML = \`\r
            <div class="stats-header">Render Stats</div>\r
            <div class="stats-content">\r
                <div class="stats-section">\r
                    <div class="stat-row">\r
                        <span class="stat-label">FPS:</span>\r
                        <span class="stat-value" id="stat-fps">60</span>\r
                    </div>\r
                    <div class="stat-row">\r
                        <span class="stat-label">Frame Time:</span>\r
                        <span class="stat-value" id="stat-frametime">16.7ms</span>\r
                    </div>\r
                </div>\r
                \r
                <div class="stats-section">\r
                    <div class="stat-row">\r
                        <span class="stat-label">Vertices:</span>\r
                        <span class="stat-value" id="stat-vertices">0</span>\r
                    </div>\r
                    <div class="stat-row">\r
                        <span class="stat-label">Triangles:</span>\r
                        <span class="stat-value" id="stat-triangles">0</span>\r
                    </div>\r
                    <div class="stat-row">\r
                        <span class="stat-label">Draw Calls:</span>\r
                        <span class="stat-value" id="stat-drawcalls">0</span>\r
                    </div>\r
                </div>\r
                \r
                <div class="stats-section">\r
                    <div class="stat-row">\r
                        <span class="stat-label">Textures:</span>\r
                        <span class="stat-value" id="stat-textures">0</span>\r
                    </div>\r
                    <div class="stat-row">\r
                        <span class="stat-label">Geometries:</span>\r
                        <span class="stat-value" id="stat-geometries">0</span>\r
                    </div>\r
                    <div class="stat-row">\r
                        <span class="stat-label">Programs:</span>\r
                        <span class="stat-value" id="stat-programs">0</span>\r
                    </div>\r
                </div>\r
                \r
                <div class="stats-section">\r
                    <div class="stat-row">\r
                        <span class="stat-label">Memory:</span>\r
                        <span class="stat-value" id="stat-memory">0 MB</span>\r
                    </div>\r
                </div>\r
            </div>\r
        \`;\r
        \r
        // Cache DOM elements for performance\r
        this.elements = {\r
            fps: document.getElementById('stat-fps'),\r
            frameTime: document.getElementById('stat-frametime'),\r
            vertices: document.getElementById('stat-vertices'),\r
            triangles: document.getElementById('stat-triangles'),\r
            drawCalls: document.getElementById('stat-drawcalls'),\r
            textures: document.getElementById('stat-textures'),\r
            geometries: document.getElementById('stat-geometries'),\r
            programs: document.getElementById('stat-programs'),\r
            memory: document.getElementById('stat-memory')\r
        };\r
    }\r
    \r
    setupWorkerListener() {\r
        if (!window.worker) {\r
            console.warn('[StatsOverlay] Worker not available yet');\r
            return;\r
        }\r
        \r
        // Listen for stats updates from the worker\r
        window.worker.addEventListener('message', (event) => {\r
            const { type, data } = event.data;\r
            \r
            switch (type) {\r
                case 'RENDER_STATS':\r
                    this.updateStats(data);\r
                    break;\r
                    \r
                case 'SCENE_STATS':\r
                    this.updateSceneStats(data);\r
                    break;\r
            }\r
        });\r
        \r
        // Request initial stats\r
        window.worker.postMessage({ type: 'REQUEST_STATS' });\r
    }\r
    \r
    updateStats(data) {\r
        if (!this.isVisible) return;\r
        \r
        // Update stored stats\r
        if (data.vertices !== undefined) this.stats.vertices = data.vertices;\r
        if (data.triangles !== undefined) this.stats.triangles = data.triangles;\r
        if (data.drawCalls !== undefined) this.stats.drawCalls = data.drawCalls;\r
        \r
        // Update display\r
        this.updateDisplay();\r
    }\r
    \r
    updateSceneStats(data) {\r
        if (!this.isVisible) return;\r
        \r
        // Update renderer info\r
        if (data.memory) {\r
            this.stats.geometries = data.memory.geometries || 0;\r
            this.stats.textures = data.memory.textures || 0;\r
            this.stats.programs = data.memory.programs || 0;\r
        }\r
        \r
        // Update display\r
        this.updateDisplay();\r
    }\r
    \r
    updateDisplay() {\r
        if (!this.elements || !this.isVisible) return;\r
        \r
        // Update all stat displays\r
        if (this.elements.fps) {\r
            this.elements.fps.textContent = Math.round(this.fps);\r
        }\r
        \r
        if (this.elements.frameTime) {\r
            const frameTime = this.fps > 0 ? (1000 / this.fps).toFixed(1) : '0';\r
            this.elements.frameTime.textContent = \`\${frameTime}ms\`;\r
        }\r
        \r
        if (this.elements.vertices) {\r
            this.elements.vertices.textContent = this.formatNumber(this.stats.vertices);\r
        }\r
        \r
        if (this.elements.triangles) {\r
            this.elements.triangles.textContent = this.formatNumber(this.stats.triangles);\r
        }\r
        \r
        if (this.elements.drawCalls) {\r
            this.elements.drawCalls.textContent = this.stats.drawCalls;\r
        }\r
        \r
        if (this.elements.textures) {\r
            this.elements.textures.textContent = this.stats.textures;\r
        }\r
        \r
        if (this.elements.geometries) {\r
            this.elements.geometries.textContent = this.stats.geometries;\r
        }\r
        \r
        if (this.elements.programs) {\r
            this.elements.programs.textContent = this.stats.programs;\r
        }\r
        \r
        if (this.elements.memory && performance.memory) {\r
            const usedMB = (performance.memory.usedJSHeapSize / 1048576).toFixed(1);\r
            this.elements.memory.textContent = \`\${usedMB} MB\`;\r
        }\r
    }\r
    \r
    formatNumber(num) {\r
        if (num >= 1000000) {\r
            return (num / 1000000).toFixed(1) + 'M';\r
        } else if (num >= 1000) {\r
            return (num / 1000).toFixed(1) + 'K';\r
        }\r
        return num.toString();\r
    }\r
    \r
    startFPSTracking() {\r
        // Track FPS using requestAnimationFrame\r
        const trackFrame = () => {\r
            if (!this.isVisible) return;\r
            \r
            this.frameCount++;\r
            const currentTime = performance.now();\r
            const delta = currentTime - this.lastTime;\r
            \r
            // Update FPS every 500ms\r
            if (delta >= 500) {\r
                this.fps = (this.frameCount * 1000) / delta;\r
                this.frameCount = 0;\r
                this.lastTime = currentTime;\r
                this.updateDisplay();\r
            }\r
            \r
            requestAnimationFrame(trackFrame);\r
        };\r
        \r
        requestAnimationFrame(trackFrame);\r
    }\r
    \r
    show() {\r
        if (this.container) {\r
            this.container.style.display = 'block';\r
            this.isVisible = true;\r
            \r
            // Start FPS tracking\r
            this.frameCount = 0;\r
            this.lastTime = performance.now();\r
            this.startFPSTracking();\r
            \r
            // Request fresh stats from worker\r
            if (window.worker) {\r
                window.worker.postMessage({ type: 'REQUEST_STATS' });\r
            }\r
            \r
            console.log('[StatsOverlay] Shown');\r
        }\r
    }\r
    \r
    hide() {\r
        if (this.container) {\r
            this.container.style.display = 'none';\r
            this.isVisible = false;\r
            console.log('[StatsOverlay] Hidden');\r
        }\r
    }\r
    \r
    toggle() {\r
        if (this.isVisible) {\r
            this.hide();\r
        } else {\r
            this.show();\r
        }\r
        return this.isVisible;\r
    }\r
    \r
    dispose() {\r
        this.hide();\r
        if (this.updateInterval) {\r
            clearInterval(this.updateInterval);\r
            this.updateInterval = null;\r
        }\r
        this.container = null;\r
        this.elements = null;\r
        console.log('[StatsOverlay] Disposed');\r
    }\r
}\r
\r
// Make it globally available\r
window.StatsOverlay = StatsOverlay;`,
        "sceneTopbarControls": `/* FILE: editor/z3d-object-editor/templates/scripts/components/scene-topbar-controls.js */\r
/* Scene Topbar Controls - Manages the scene topbar buttons and functionality */\r
\r
class SceneTopbarControls {\r
    constructor() {\r
        this.container = null;\r
        this.statsOverlay = null;\r
        this.gizmoController = null;\r
        \r
        // Toggle states\r
        this.showOverlays = false;\r
        this.showGizmos = true;\r
    this.snapEnabled = false;\r
        \r
        console.log('[SceneTopbarControls] Created');\r
    }\r
    \r
    initialize() {\r
        // Find or create the scene topbar\r
        this.container = document.querySelector('.scene-topbar');\r
        \r
        if (!this.container) {\r
            console.error('[SceneTopbarControls] Scene topbar not found');\r
            return;\r
        }\r
        \r
        // Ensure the topbar has proper styling for visibility and full width\r
        this.container.style.zIndex = '1000';\r
        this.container.style.position = 'absolute';\r
        this.container.style.pointerEvents = 'auto';\r
        this.container.style.top = '0';\r
        this.container.style.left = '0';\r
        this.container.style.right = '0';\r
        this.container.style.width = '100%';\r
        this.container.style.height = '36px';\r
        this.container.style.background = 'rgba(37, 37, 37, 0.95)';\r
        this.container.style.backdropFilter = 'blur(10px)';\r
        this.container.style.borderBottom = '1px solid rgba(255, 255, 255, 0.1)';\r
        \r
        // Restructure the topbar with three containers\r
        this.restructureTopbar();\r
        \r
        // Initialize stats overlay\r
        this.initializeStatsOverlay();\r
        \r
        // Setup button handlers\r
        this.setupButtonHandlers();\r
        \r
        // Ensure initial states are correct\r
        this.updateButtonStates();\r
        \r
        console.log('[SceneTopbarControls] Initialized with gizmos:', this.showGizmos, 'overlays:', this.showOverlays);\r
    }\r
    \r
    restructureTopbar() {\r
        // Clear existing content\r
        this.container.innerHTML = '';\r
        \r
        // Create wrapper for all controls (can be hidden/shown as a group)\r
        const controlsWrapper = document.createElement('div');\r
        controlsWrapper.className = 'topbar-controls-wrapper';\r
        controlsWrapper.style.width = '100%';\r
        controlsWrapper.style.height = '100%';\r
        controlsWrapper.style.display = 'flex';\r
        controlsWrapper.style.alignItems = 'center';\r
        controlsWrapper.style.justifyContent = 'space-between';\r
        controlsWrapper.style.padding = '0 12px';\r
        controlsWrapper.style.boxSizing = 'border-box';\r
        controlsWrapper.innerHTML = \`\r
            <!-- Left Container -->\r
            <div class="topbar-left" style="flex: 0 0 auto;">\r
                <!-- Future buttons go here -->\r
            </div>\r
            \r
            <!-- Center Container -->\r
            <div class="topbar-center" style="flex: 1 1 auto; display: flex; align-items: center; justify-content: center; gap: 6px;">\r
                <button id="toggle-snap" class="btn btn-sm topbar-btn" title="Toggle Snap (position/rotation)">\r
                    <span class="btn-icon">\u{1F512}</span>\r
                    <span class="btn-text">Snap</span>\r
                </button>\r
            </div>\r
            \r
            <!-- Right Container -->\r
            <div class="topbar-right" style="flex: 0 0 auto; margin-left: auto; display: flex; gap: 4px;">\r
                <button id="toggle-gizmos" class="btn btn-sm topbar-btn active" title="Toggle Gizmos" style="margin-right: 4px;">\r
                    <span class="btn-icon">\u{1F3AF}</span>\r
                    <span class="btn-text">Gizmos</span>\r
                </button>\r
                <button id="toggle-overlays" class="btn btn-sm topbar-btn" title="Toggle Overlays">\r
                    <span class="btn-icon">\u{1F4CA}</span>\r
                    <span class="btn-text">Overlays</span>\r
                </button>\r
            </div>\r
        \`;\r
        \r
        this.container.appendChild(controlsWrapper);\r
        \r
        // Cache references\r
        this.controlsWrapper = controlsWrapper;\r
        this.leftContainer = controlsWrapper.querySelector('.topbar-left');\r
        this.centerContainer = controlsWrapper.querySelector('.topbar-center');\r
        this.rightContainer = controlsWrapper.querySelector('.topbar-right');\r
        \r
        // Cache button references\r
        this.gizmosButton = document.getElementById('toggle-gizmos');\r
        this.overlaysButton = document.getElementById('toggle-overlays');\r
    this.snapButton = document.getElementById('toggle-snap');\r
        \r
        // Set initial button states\r
        this.updateButtonStates();\r
    }\r
    \r
    initializeStatsOverlay() {\r
        // Create and initialize the stats overlay\r
        if (!window.StatsOverlay) {\r
            console.warn('[SceneTopbarControls] StatsOverlay class not available');\r
            return;\r
        }\r
        \r
        this.statsOverlay = new StatsOverlay();\r
        this.statsOverlay.initialize();\r
    }\r
    \r
    setupButtonHandlers() {\r
        // Toggle Overlays button\r
        if (this.overlaysButton) {\r
            this.overlaysButton.addEventListener('click', (e) => {\r
                this.handleButtonClick(e.currentTarget);\r
                this.toggleOverlays();\r
            });\r
        }\r
        \r
        // Toggle Gizmos button\r
        if (this.gizmosButton) {\r
            this.gizmosButton.addEventListener('click', (e) => {\r
                this.handleButtonClick(e.currentTarget);\r
                this.toggleGizmos();\r
            });\r
        }\r
\r
        // Toggle Snap button\r
        if (this.snapButton) {\r
            this.snapButton.addEventListener('click', (e) => {\r
                this.handleButtonClick(e.currentTarget);\r
                this.toggleSnap();\r
            });\r
        }\r
    }\r
    \r
    handleButtonClick(button) {\r
        // Add clicked class for animation\r
        button.classList.add('clicked');\r
        \r
        // Force button to lose focus\r
        button.blur();\r
        \r
        // Remove the class after animation completes\r
        setTimeout(() => {\r
            button.classList.remove('clicked');\r
        }, 300);\r
    }\r
    \r
    toggleOverlays() {\r
        this.showOverlays = !this.showOverlays;\r
        \r
        // Toggle stats overlay\r
        if (this.statsOverlay) {\r
            if (this.showOverlays) {\r
                this.statsOverlay.show();\r
            } else {\r
                this.statsOverlay.hide();\r
            }\r
        }\r
        \r
        // Update button state\r
        this.updateButtonStates();\r
        \r
        console.log('[SceneTopbarControls] Overlays toggled:', this.showOverlays);\r
    }\r
    \r
    toggleGizmos() {\r
        this.showGizmos = !this.showGizmos;\r
        \r
        // Send message to worker to toggle transform gizmo\r
        if (window.worker) {\r
            window.worker.postMessage({\r
                type: 'TOGGLE_GIZMOS',\r
                data: { visible: this.showGizmos }\r
            });\r
        }\r
        \r
        // Toggle viewport buttons visibility\r
        if (window.viewportButtons) {\r
            window.viewportButtons.setVisible(this.showGizmos);\r
        }\r
        \r
        // Toggle viewport gizmo\r
        const viewportGizmoContainer = document.getElementById('viewport-gizmo-container');\r
        if (viewportGizmoContainer) {\r
            viewportGizmoContainer.style.display = this.showGizmos ? 'block' : 'none';\r
        }\r
        \r
        // Update button state\r
        this.updateButtonStates();\r
        \r
        console.log('[SceneTopbarControls] Gizmos toggled:', this.showGizmos);\r
    }\r
    \r
    updateButtonStates() {\r
        // Update overlays button\r
        if (this.overlaysButton) {\r
            if (this.showOverlays) {\r
                this.overlaysButton.classList.add('active');\r
                // Apply inline styles as fallback\r
                this.overlaysButton.style.background = 'rgba(76, 175, 80, 0.2)';\r
                this.overlaysButton.style.borderColor = '#4CAF50';\r
                this.overlaysButton.style.color = '#4CAF50';\r
                this.overlaysButton.style.boxShadow = '0 0 0 1px #4CAF50';\r
                console.log('[SceneTopbarControls] Overlays button set to active');\r
            } else {\r
                this.overlaysButton.classList.remove('active');\r
                // Remove inline styles\r
                this.overlaysButton.style.background = '';\r
                this.overlaysButton.style.borderColor = '';\r
                this.overlaysButton.style.color = '';\r
                this.overlaysButton.style.boxShadow = '';\r
                console.log('[SceneTopbarControls] Overlays button set to inactive');\r
            }\r
        }\r
        \r
        // Update gizmos button\r
        if (this.gizmosButton) {\r
            if (this.showGizmos) {\r
                this.gizmosButton.classList.add('active');\r
                // Apply inline styles as fallback\r
                this.gizmosButton.style.background = 'rgba(76, 175, 80, 0.2)';\r
                this.gizmosButton.style.borderColor = '#4CAF50';\r
                this.gizmosButton.style.color = '#4CAF50';\r
                this.gizmosButton.style.boxShadow = '0 0 0 1px #4CAF50';\r
                console.log('[SceneTopbarControls] Gizmos button set to active, classes:', this.gizmosButton.className);\r
            } else {\r
                this.gizmosButton.classList.remove('active');\r
                // Remove inline styles\r
                this.gizmosButton.style.background = '';\r
                this.gizmosButton.style.borderColor = '';\r
                this.gizmosButton.style.color = '';\r
                this.gizmosButton.style.boxShadow = '';\r
                console.log('[SceneTopbarControls] Gizmos button set to inactive, classes:', this.gizmosButton.className);\r
            }\r
        }\r
\r
        // Update snap button\r
        if (this.snapButton) {\r
            if (this.snapEnabled) {\r
                this.snapButton.classList.add('active');\r
                this.snapButton.style.background = 'rgba(76, 175, 80, 0.2)';\r
                this.snapButton.style.borderColor = '#4CAF50';\r
                this.snapButton.style.color = '#4CAF50';\r
                this.snapButton.style.boxShadow = '0 0 0 1px #4CAF50';\r
            } else {\r
                this.snapButton.classList.remove('active');\r
                this.snapButton.style.background = '';\r
                this.snapButton.style.borderColor = '';\r
                this.snapButton.style.color = '';\r
                this.snapButton.style.boxShadow = '';\r
            }\r
        }\r
    }\r
\r
    toggleSnap() {\r
        this.snapEnabled = !this.snapEnabled;\r
\r
        // Inform worker\r
        if (window.worker) {\r
            window.worker.postMessage({\r
                type: 'SET_SNAP_ENABLED',\r
                data: { enabled: this.snapEnabled }\r
            });\r
        }\r
\r
        this.updateButtonStates();\r
        console.log('[SceneTopbarControls] Snap toggled:', this.snapEnabled);\r
    }\r
    \r
    // Method to show/hide the entire controls wrapper\r
    showControls() {\r
        if (this.controlsWrapper) {\r
            this.controlsWrapper.style.display = 'flex';\r
        }\r
    }\r
    \r
    hideControls() {\r
        if (this.controlsWrapper) {\r
            this.controlsWrapper.style.display = 'none';\r
        }\r
    }\r
    \r
    // Method to set custom content in the center container\r
    setCenterContent(content) {\r
        if (this.centerContainer) {\r
            if (typeof content === 'string') {\r
                this.centerContainer.innerHTML = content;\r
            } else if (content instanceof HTMLElement) {\r
                this.centerContainer.innerHTML = '';\r
                this.centerContainer.appendChild(content);\r
            }\r
        }\r
    }\r
    \r
    // Method to add buttons to left container\r
    addLeftButton(button) {\r
        if (this.leftContainer && button instanceof HTMLElement) {\r
            this.leftContainer.appendChild(button);\r
        }\r
    }\r
    \r
    dispose() {\r
        // Dispose stats overlay\r
        if (this.statsOverlay) {\r
            this.statsOverlay.dispose();\r
            this.statsOverlay = null;\r
        }\r
        \r
        // Clear references\r
        this.container = null;\r
        this.controlsWrapper = null;\r
        this.leftContainer = null;\r
        this.centerContainer = null;\r
        this.rightContainer = null;\r
        this.gizmosButton = null;\r
        this.overlaysButton = null;\r
        \r
        console.log('[SceneTopbarControls] Disposed');\r
    }\r
}\r
\r
// Make it globally available\r
window.SceneTopbarControls = SceneTopbarControls;`,
        "viewportButtons": "/* FILE: templates/scripts/components/viewport-buttons.js */\r\n/* Viewport action buttons - circular buttons for camera controls */\r\n\r\nclass ViewportButtons {\r\n    constructor() {\r\n        this.container = null;\r\n        this.buttons = {};\r\n        this.isVisible = true;\r\n        this.worker = null;\r\n    // Padding multiplier for framing (distance buffer around the object)\r\n    this.focusPadding = 1.75; // increase as requested; can be overridden via window.Z3D_FOCUS_PADDING\r\n    }\r\n    \r\n    initialize(worker) {\r\n        this.worker = worker;\r\n        this.createContainer();\r\n        this.createButtons();\r\n        this.setupEventListeners();\r\n        \r\n        // Start visible (will be controlled by gizmos toggle)\r\n        this.setVisible(true);\r\n        \r\n        console.log('[ViewportButtons] Initialized');\r\n    }\r\n    \r\n    createContainer() {\r\n        // Create container for circular buttons\r\n        this.container = document.createElement('div');\r\n        this.container.className = 'viewport-buttons-container';\r\n        this.container.style.cssText = `\r\n            position: absolute;\r\n            top: 260px;  /* Below viewport gizmo */\r\n            right: 10px;\r\n            width: 48px;\r\n            display: flex;\r\n            flex-direction: column;\r\n            gap: 10px;\r\n            z-index: 85;\r\n            pointer-events: auto;\r\n        `;\r\n        \r\n        // Add to viewport area\r\n        const viewportArea = document.getElementById('viewport-area');\r\n        if (viewportArea) {\r\n            viewportArea.appendChild(this.container);\r\n        }\r\n    }\r\n    \r\n    createButtons() {\r\n        // Create focus/refocus button\r\n        const focusButton = this.createButton({\r\n            id: 'focus-camera',\r\n            icon: '\u{1F50D}',  // Alternative: \u{1F3AF}, \u{1F441}\uFE0F, or we can use SVG\r\n            tooltip: 'Focus on Model',\r\n            onClick: () => this.handleFocusCamera()\r\n        });\r\n        \r\n        this.buttons.focus = focusButton;\r\n        this.container.appendChild(focusButton);\r\n    }\r\n    \r\n    createButton(config) {\r\n        const button = document.createElement('button');\r\n        button.id = config.id;\r\n        button.className = 'viewport-button';\r\n        button.title = config.tooltip;\r\n        button.innerHTML = `<span class=\"button-icon\">${config.icon}</span>`;\r\n        \r\n        // Style the button\r\n        button.style.cssText = `\r\n            width: 48px;\r\n            height: 48px;\r\n            border-radius: 50%;\r\n            background: rgba(37, 37, 37, 0.9);\r\n            backdrop-filter: blur(10px);\r\n            border: 1px solid rgba(255, 255, 255, 0.1);\r\n            color: rgba(255, 255, 255, 0.7);\r\n            font-size: 20px;\r\n            cursor: pointer;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            transition: all 0.2s ease;\r\n            outline: none;\r\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);\r\n            pointer-events: auto;\r\n        `;\r\n        \r\n        // Add hover effects\r\n        button.addEventListener('mouseenter', () => {\r\n            button.style.background = 'rgba(37, 37, 37, 0.95)';\r\n            button.style.borderColor = 'rgba(255, 255, 255, 0.2)';\r\n            button.style.color = 'rgba(255, 255, 255, 0.9)';\r\n            button.style.transform = 'scale(1.05)';\r\n        });\r\n        \r\n        button.addEventListener('mouseleave', () => {\r\n            button.style.background = 'rgba(37, 37, 37, 0.9)';\r\n            button.style.borderColor = 'rgba(255, 255, 255, 0.1)';\r\n            button.style.color = 'rgba(255, 255, 255, 0.7)';\r\n            button.style.transform = 'scale(1)';\r\n        });\r\n        \r\n        button.addEventListener('mousedown', () => {\r\n            button.style.transform = 'scale(0.95)';\r\n        });\r\n        \r\n        button.addEventListener('mouseup', () => {\r\n            button.style.transform = 'scale(1)';\r\n        });\r\n        \r\n        if (config.onClick) {\r\n            button.addEventListener('click', config.onClick);\r\n        }\r\n        \r\n        return button;\r\n    }\r\n    \r\n    handleFocusCamera() {\r\n        console.log('[ViewportButtons] Focus camera on model');\r\n        \r\n        // Get camera and controls\r\n        const camera = window.camera;\r\n        const controls = window.orbitControls;\r\n        \r\n        if (!camera || !controls) {\r\n            console.warn('[ViewportButtons] Camera or controls not available');\r\n            return;\r\n        }\r\n        \r\n        // Send message to worker to get model bounds\r\n        if (this.worker) {\r\n            this.worker.postMessage({\r\n                type: 'GET_MODEL_BOUNDS'\r\n            });\r\n        }\r\n        \r\n        // Wait for MODEL_BOUNDS to arrive; refocus occurs in onmessage handler\r\n    }\r\n    \r\n    refocusCamera() {\r\n        const camera = window.camera;\r\n        const controls = window.orbitControls;\r\n        \r\n        if (!camera || !controls) return;\r\n        \r\n        // Determine target center (object origin) and radius for framing\r\n        let targetPosition = new THREE.Vector3(0, 0, 0);\r\n        let sphereRadius = 2;\r\n        let box = null;\r\n\r\n        if (window.currentModelBounds) {\r\n            box = window.currentModelBounds.box || window.currentModelBounds;\r\n            // Prefer origin from metadata if available\r\n            if (window.currentModelBounds.origin) {\r\n                targetPosition = new THREE.Vector3(\r\n                    window.currentModelBounds.origin.x,\r\n                    window.currentModelBounds.origin.y,\r\n                    window.currentModelBounds.origin.z\r\n                );\r\n            } else if (box && typeof box.getCenter === 'function') {\r\n                // Fallback: center of bounds\r\n                targetPosition = box.getCenter(new THREE.Vector3());\r\n            }\r\n\r\n            if (window.currentModelBounds.sphereRadius) {\r\n                sphereRadius = Math.max(1e-4, window.currentModelBounds.sphereRadius);\r\n            } else if (box && typeof box.getBoundingSphere === 'function') {\r\n                const sphere = box.getBoundingSphere(new THREE.Sphere());\r\n                sphereRadius = Math.max(1e-4, sphere.radius);\r\n            }\r\n        }\r\n\r\n        // Keep current view direction\r\n        const viewDirection = new THREE.Vector3();\r\n        camera.getWorldDirection(viewDirection);\r\n\r\n        // Compute distance to frame sphere using vertical and horizontal FOVs\r\n        const vFov = camera.fov * (Math.PI / 180);\r\n        const aspect = camera.aspect || 1;\r\n        const hFov = 2 * Math.atan(Math.tan(vFov / 2) * aspect);\r\n        const pad = (typeof window !== 'undefined' && typeof window.Z3D_FOCUS_PADDING === 'number')\r\n            ? window.Z3D_FOCUS_PADDING\r\n            : this.focusPadding; // padding factor\r\n        const distV = sphereRadius / Math.sin(vFov / 2);\r\n        const distH = sphereRadius / Math.sin(hFov / 2);\r\n        const distance = Math.max(distV, distH) * pad;\r\n\r\n        // New camera pos maintaining view direction\r\n        const newPosition = targetPosition.clone().sub(viewDirection.multiplyScalar(distance));\r\n        \r\n        // Animate camera to new position\r\n        if (window.gsap) {\r\n            // Smooth animation if GSAP is available\r\n            window.gsap.to(camera.position, {\r\n                duration: 0.8,\r\n                x: newPosition.x,\r\n                y: newPosition.y,\r\n                z: newPosition.z,\r\n                ease: \"power2.inOut\",\r\n                onUpdate: () => {\r\n                    controls.target.copy(targetPosition);\r\n                    controls.update();\r\n                }\r\n            });\r\n        } else {\r\n            // Direct update\r\n            camera.position.copy(newPosition);\r\n            controls.target.copy(targetPosition);\r\n            controls.update();\r\n        }\r\n        \r\n        console.log('[ViewportButtons] Camera refocused on model');\r\n    }\r\n    \r\n    setupEventListeners() {\r\n        // Listen for worker messages\r\n        if (this.worker) {\r\n            const originalListener = this.worker.onmessage;\r\n            this.worker.onmessage = (event) => {\r\n                if (originalListener) originalListener(event);\r\n                \r\n                const { type, data } = event.data;\r\n                \r\n                if (type === 'MODEL_BOUNDS') {\r\n                    // Store bounds and metadata for refocus calculation\r\n                    const box = new THREE.Box3(\r\n                        new THREE.Vector3(data.min.x, data.min.y, data.min.z),\r\n                        new THREE.Vector3(data.max.x, data.max.y, data.max.z)\r\n                    );\r\n                    window.currentModelBounds = {\r\n                        box,\r\n                        center: data.center ? { ...data.center } : undefined,\r\n                        sphereRadius: data.sphereRadius,\r\n                        origin: data.origin ? { ...data.origin } : undefined\r\n                    };\r\n\r\n                    // Now refocus with correct bounds\r\n                    this.refocusCamera();\r\n                }\r\n            };\r\n        }\r\n    }\r\n    \r\n    setVisible(visible) {\r\n        this.isVisible = visible;\r\n        if (this.container) {\r\n            this.container.style.display = visible ? 'flex' : 'none';\r\n        }\r\n    }\r\n    \r\n    dispose() {\r\n        if (this.container && this.container.parentNode) {\r\n            this.container.parentNode.removeChild(this.container);\r\n        }\r\n        this.container = null;\r\n        this.buttons = {};\r\n    }\r\n}\r\n\r\n// Make the class globally available\r\nwindow.ViewportButtons = ViewportButtons;\r\n\r\n// Note: Instance will be created by gizmo-controller.js when ready"
      },
      "workers": {
        "threeWorker": "/* FILE: editor/z3d-object-editor/templates/scripts/workers/three-worker.js */\r\n/* CLEANED VERSION - Unified message handling, all features preserved */\r\n\r\n// Import scene data collector functions\r\n// Scene data collector will be embedded separately\r\n// Transform gizmo will be embedded separately\r\n\r\n// Debug gate\r\nconst __originalConsoleLog = console.log.bind(console);\r\n// let WORKER_DEBUG = !!(typeof self !== 'undefined' && self.WORKER_DEBUG);\r\nlet WORKER_DEBUG = true;\r\nconsole.log = (...args) => { if (WORKER_DEBUG) __originalConsoleLog(...args); };\r\n\r\nconsole.log('[Z3D Worker] Starting Three.js worker with coordinate conversion...');\r\n\r\n// Worker state\r\nlet scene = null;\r\nlet camera = null;\r\nlet renderer = null;\r\nlet canvas = null;\r\nlet currentModel = null;\r\nlet animationId = null;\r\nlet orbitControls = null;\r\nlet orbitTarget = new THREE.Vector3(0, 0, 0);\r\nlet isCameraAnimating = false;  // Flag to prevent OrbitControls fighting\r\n// Overlay (HUD) rendering\r\nlet overlayScene = null;\r\nlet overlayCamera = null;\r\nlet overlayRoot = null;\r\nlet viewportWidth = 1;\r\nlet viewportHeight = 1;\r\n// Gizmo instances\r\nlet viewportGizmo = null;\r\nlet transformGizmo = null;\r\nlet gizmoEnabled = true;\r\nlet gizmoMode = 'all'; // 'position', 'rotation', 'scale', 'all'\r\nlet gizmoSpace = 'world'; // 'world' or 'local'\r\nlet snapEnabled = false;\r\nlet snapAngleDeg = 5;\r\nlet snapScale = 0.1;\r\n\r\n// Camera state management\r\nlet cameraFollowState = {\r\n    lastModelPosition: { x: 0, y: 0, z: 0 }, // C3 pixels\r\n    isEnabledForEditorChanges: false,\r\n    isEnabledForC3Changes: true,\r\n    updateThrottle: 0\r\n};\r\n\r\n// Hysteresis to avoid flicker\r\nconst cameraFollowHysteresis = {\r\n    lastSignX: 0,\r\n    lastSignY: 0,\r\n    lastSignZ: 0\r\n};\r\n\r\n// Grid helpers\r\nlet worldGrid = null;\r\nlet localGrid = null;\r\nlet localGridGroup = null;\r\nlet lastWorldGridRebuildTs = 0;\r\n\r\n// Grid config\r\nconst q = 64; // 64 px == 1 world unit\r\nlet worldGridCellPx = 64;\r\nlet localGridCellPx = 32;\r\nlet worldGridPaddingPct = 0.5;\r\nlet localGridPaddingPct = 0.25;\r\n\r\n// Model state - store in C3 coordinates\r\nlet modelPosition = { x: 0, y: 0, z: 0 }; // C3 position in pixels\r\nlet modelRotation = { x: 0, y: 0, z: 0 }; // C3 rotation in degrees\r\nlet modelScale = { x: 1, y: 1, z: 1 }; // C3 scale values\r\nlet modelDeltaTransform = {\r\n    position: { x: 0, y: 0, z: 0 },\r\n    rotation: { x: 0, y: 0, z: 0 },\r\n    scale: { x: 1, y: 1, z: 1 }\r\n};\r\nlet uniformScale = 1;\r\nlet modelRotationOrder = 'ZXY';\r\nlet unitScale = 64;\r\nlet wireframeMode = false;\r\n\r\n// Animation state\r\nlet animationMixer = null;\r\nlet currentAnimationAction = null;\r\nlet animations = [];\r\nlet animationClock = new THREE.Clock();\r\nlet isAnimationPlaying = false;\r\nlet animationSpeed = 1.0;\r\nlet animationLoop = true;\r\n\r\n// Skinned mesh sync state\r\nlet skinnedMeshSyncEnabled = true;\r\nlet lastSkinnedMeshUpdate = 0;\r\nlet skinnedMeshUpdateFrequency = 30; // Hz - configurable (15/30/60)\r\nlet skinnedMeshUpdateInterval = 1000 / 30; // milliseconds\r\nlet lastSkinnedVertices = null; // Cache last computed vertices for pause state\r\nlet currentNodeVisibility = {}; // Track node visibility state from outliner\r\n\r\n// Layout info\r\nlet layoutInfo = null;\r\n\r\n// Message handler\r\nself.addEventListener('message', function(event) {\r\n    const { type, data } = event.data;\r\n    console.log(`[Z3D Worker] \u{1F528} Processing message: ${type}`);\r\n    \r\n    try {\r\n        switch (type) {\r\n            case 'SET_DEBUG':\r\n                WORKER_DEBUG = !!(data && data.enabled);\r\n                __originalConsoleLog('[Z3D Worker] Debug mode set to:', WORKER_DEBUG);\r\n                break;\r\n                \r\n            case 'PING':\r\n                handlePing(data);\r\n                break;\r\n                \r\n            case 'SETUP_CANVAS':\r\n                setupCanvas(data);\r\n                break;\r\n                \r\n            case 'SETUP_CANVAS_FALLBACK':\r\n                setupCanvasFallback(data);\r\n                break;\r\n                \r\n            case 'LOAD_MODEL':\r\n                loadModel(data);\r\n                break;\r\n                \r\n            // UNIFIED STATE UPDATE HANDLER\r\n            case 'UPDATE_STATE':\r\n                updateState(data);\r\n                break;\r\n                \r\n            // Legacy handlers for backward compatibility\r\n            case 'UPDATE_TRANSFORM':\r\n                updateTransform(data);\r\n                break;\r\n                \r\n            case 'UPDATE_UNIT_SCALE':\r\n                updateUnitScale(data);\r\n                break;\r\n                \r\n            case 'UPDATE_VIEWPORT_SETTING':\r\n                updateViewportSetting(data);\r\n                break;\r\n            case 'SET_SNAP_ENABLED':\r\n                setSnapEnabled(data);\r\n                break;\r\n                \r\n            case 'CAMERA_UPDATE':\r\n                console.log('[Z3D Worker] Camera update data:', data);\r\n                updateCamera(data);\r\n                break;\r\n                \r\n            case 'CAMERA_TARGET_UPDATE':\r\n                console.log('[Z3D Worker] Camera target update data:', data);\r\n                handleCameraTargetUpdate(data);\r\n                break;\r\n                \r\n            case 'SET_CAMERA_FOLLOW_EDITOR':\r\n                setCameraFollowForEditor(data.enabled);\r\n                break;\r\n                \r\n            case 'SET_CAMERA_FOLLOW_C3':\r\n                setCameraFollowForC3(data.enabled);\r\n                break;\r\n                \r\n            case 'RESET_VIEW':\r\n                resetView();\r\n                break;\r\n                \r\n            case 'CENTER_OBJECT':\r\n                centerObject();\r\n                break;\r\n                \r\n            case 'FIT_VIEW':\r\n                fitCameraToModelAndGrids();\r\n                break;\r\n                \r\n            case 'UPDATE_RENDER_SIZE':\r\n                updateRenderSize(data);\r\n                break;\r\n                \r\n            case 'TOGGLE_NODE_VISIBILITY':\r\n                toggleNodeVisibility(data);\r\n                break;\r\n                \r\n            // Animation messages\r\n            case 'SELECT_ANIMATION':\r\n                selectAnimation(data);\r\n                break;\r\n                \r\n            case 'PLAY_ANIMATION':\r\n                playAnimation(data);\r\n                break;\r\n                \r\n            case 'PAUSE_ANIMATION':\r\n                pauseAnimation();\r\n                break;\r\n                \r\n            case 'SET_ANIMATION_LOOP':\r\n                setAnimationLoop(data);\r\n                break;\r\n                \r\n            case 'SET_ANIMATION_SPEED':\r\n                setAnimationSpeed(data);\r\n                break;\r\n                \r\n            case 'SEEK_ANIMATION':\r\n                seekAnimation(data);\r\n                break;\r\n                \r\n            case 'SET_SKINNED_MESH_FREQUENCY':\r\n                setSkinnedMeshUpdateFrequency(data);\r\n                break;\r\n                \r\n            case 'GET_ANIMATION_TIME':\r\n                getAnimationTime();\r\n                break;\r\n                \r\n            case 'GET_TEXTURE_IMAGE':\r\n                getTextureImage(data);\r\n                break;\r\n\r\n            case 'INIT_GIZMOS':\r\n                initializeGizmos(data);\r\n                break;\r\n\r\n            case 'SET_GIZMO_MODE':\r\n                setGizmoMode(data);\r\n                break;\r\n\r\n            case 'SET_GIZMO_SPACE':\r\n                setGizmoSpace(data);\r\n                break;\r\n\r\n            case 'SET_GIZMO_VISIBLE':\r\n                setGizmoVisible(data);\r\n                break;\r\n                \r\n            case 'TOGGLE_GIZMOS':\r\n                toggleGizmos(data);\r\n                break;\r\n                \r\n            case 'GET_MODEL_BOUNDS':\r\n                getModelBounds();\r\n                break;\r\n\r\n            case 'GIZMO_MOUSE_DOWN':\r\n                handleGizmoMouseDown(data);\r\n                break;\r\n\r\n            case 'GIZMO_MOUSE_MOVE':\r\n                handleGizmoMouseMove(data);\r\n                break;\r\n\r\n            case 'GIZMO_MOUSE_UP':\r\n                handleGizmoMouseUp(data);\r\n                break;\r\n\r\n            case 'CAMERA_ANIMATE_TO':\r\n                animateCameraTo(data);\r\n                break;\r\n                \r\n            case 'POSITION_DRAG_ENDED':\r\n                handlePositionDragEnded(data);\r\n                break;\r\n                \r\n            case 'REQUEST_STATS':\r\n                sendRenderStats();\r\n                break;\r\n                \r\n            default:\r\n                console.warn(`[Z3D Worker] Unknown message type: ${type}`);\r\n        }\r\n    } catch (error) {\r\n        console.error(`[Z3D Worker] Error handling ${type}:`, error);\r\n        self.postMessage({\r\n            type: 'ERROR',\r\n            data: { error: error.message, messageType: type }\r\n        });\r\n    }\r\n});\r\n\r\n/**\r\n * NEW: Unified state update handler\r\n */\r\nfunction updateState(data) {\r\n    console.log('[Z3D Worker] \u{1F4CA} UPDATE_STATE received');\r\n    \r\n    if (!data) return;\r\n    \r\n    // Handle transform updates\r\n    if (data.transform || data.deltaTransform) {\r\n        updateTransform({\r\n            transform: data.transform,\r\n            deltaTransform: data.deltaTransform,\r\n            source: data.source || 'editor'\r\n        });\r\n    }\r\n    \r\n    // Handle wireframe\r\n    if (data.wireframe !== undefined) {\r\n        wireframeMode = data.wireframe;\r\n        if (currentModel) {\r\n            currentModel.traverse((child) => {\r\n                if (child.isMesh && child.material) {\r\n                    child.material.wireframe = wireframeMode;\r\n                    child.material.needsUpdate = true;\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Coordinate System Conversion\r\n */\r\nfunction convertC3ToThree(c3Transform) {\r\n    const result = {\r\n        position: { x: 0, y: 0, z: 0 },\r\n        rotation: { x: 0, y: 0, z: 0 },\r\n        scale: { x: 1, y: 1, z: 1 }\r\n    };\r\n    \r\n    // Position conversion: Flip Y axis and convert to units\r\n    if (c3Transform.position) {\r\n        result.position.x = c3Transform.position.x / unitScale;\r\n        result.position.y = -(c3Transform.position.y / unitScale);\r\n        result.position.z = c3Transform.position.z / unitScale;\r\n    }\r\n    \r\n    // Rotation conversion: C3 left-handed to Three.js right-handed\r\n    // C3: positive rotation is clockwise when viewing from +axis toward origin\r\n    // Three.js: positive rotation is counter-clockwise when viewing from +axis\r\n    // \r\n    // Based on testing - Three.js currently shows:\r\n    // X: CW (correct) - keep negation\r\n    // Y: CCW (wrong) - don't negate to get CW\r\n    // Z: CCW (wrong) - negate to get CW\r\n    if (c3Transform.rotation) {\r\n        result.rotation.x = -c3Transform.rotation.x;    // X inverted (currently correct)\r\n        result.rotation.y = c3Transform.rotation.y;     // Y not inverted \r\n        result.rotation.z = -c3Transform.rotation.z;    // Z inverted to get CW\r\n    }\r\n    \r\n    // Scale: No conversion needed\r\n    if (c3Transform.scale) {\r\n        result.scale.x = c3Transform.scale.x;\r\n        result.scale.y = c3Transform.scale.y;\r\n        result.scale.z = c3Transform.scale.z;\r\n    }\r\n    \r\n    return result;\r\n}\r\n\r\n/**\r\n * Extract skinned vertices from the animated model\r\n */\r\n/**\r\n * Extract skinned vertices using proper Three.js skinning formula\r\n * Returns vertices in object space (not world space) for C3 to transform\r\n */\r\nfunction extractSkinnedVertices() {\r\n    if (!currentModel) return null;\r\n    \r\n    const allVertices = [];\r\n    const meshVisibilityMap = {}; // Track which meshes are visible by name\r\n    let meshIndex = 0;\r\n    let foundAnyMesh = false;\r\n    \r\n    // Ensure the model's world matrix is up to date\r\n    currentModel.updateMatrixWorld(true);\r\n    \r\n    // Process ALL meshes regardless of visibility to maintain vertex buffer consistency\r\n    // This ensures indices remain valid\r\n    currentModel.traverse((child) => {\r\n        if (!child.isMesh || !child.geometry) return;\r\n        \r\n        foundAnyMesh = true;\r\n        const geometry = child.geometry;\r\n        const posAttr = geometry.attributes.position;\r\n        \r\n        if (!posAttr) return;\r\n        \r\n        // Build visibility map to pass along with vertices\r\n        // Use name if available, otherwise use a generated ID\r\n        const meshId = child.name || `mesh_${meshIndex++}`;\r\n        meshVisibilityMap[meshId] = child.visible;\r\n        \r\n        // ALWAYS process vertices regardless of visibility\r\n        // This maintains index alignment\r\n        \r\n        if (child.isSkinnedMesh && child.skeleton) {\r\n            // Extract skinned vertices for this mesh\r\n            const vertices = extractSkinnedVerticesForMesh(child);\r\n            if (vertices) {\r\n                for (let i = 0; i < vertices.length; i++) {\r\n                    allVertices.push(vertices[i]);\r\n                }\r\n            }\r\n        } else {\r\n            // For non-skinned meshes, apply the animated world transform\r\n            child.updateMatrixWorld(true);\r\n            \r\n            const vertexCount = posAttr.count;\r\n            const vertex = new THREE.Vector3();\r\n            \r\n            // Get the world matrix of the mesh (includes all parent transforms and animations)\r\n            const worldMatrix = child.matrixWorld;\r\n            \r\n            for (let i = 0; i < vertexCount; i++) {\r\n                // Get vertex in local space\r\n                vertex.fromBufferAttribute(posAttr, i);\r\n                \r\n                // Transform to world space (includes animation transforms)\r\n                vertex.applyMatrix4(worldMatrix);\r\n                \r\n                // Convert back to model space (remove root transform)\r\n                const modelWorldInverse = new THREE.Matrix4().copy(currentModel.matrixWorld).invert();\r\n                vertex.applyMatrix4(modelWorldInverse);\r\n                \r\n                // Convert from Three.js Y-up to C3 Y-down coordinate system\r\n                allVertices.push(vertex.x);\r\n                allVertices.push(-vertex.y);  // Flip Y for C3\r\n                allVertices.push(vertex.z);\r\n            }\r\n        }\r\n    });\r\n    \r\n    if (!foundAnyMesh) {\r\n        return { vertices: lastSkinnedVertices, visibility: {} };\r\n    }\r\n    \r\n    // Convert to Float32Array and cache\r\n    const result = new Float32Array(allVertices);\r\n    lastSkinnedVertices = result;\r\n    \r\n    console.log(`[Z3D Worker] Extracted ${result.length / 3} vertices (ALL for index consistency), visibility map:`, meshVisibilityMap);\r\n    \r\n    // Return both vertices and visibility map\r\n    return { vertices: result, visibility: meshVisibilityMap };\r\n}\r\n\r\n/**\r\n * Helper function to extract skinned vertices for a single mesh\r\n */\r\nfunction extractSkinnedVerticesForMesh(skinnedMesh) {\r\n    if (!skinnedMesh || !skinnedMesh.skeleton) return null;\r\n    \r\n    // Ensure matrices are up to date\r\n    skinnedMesh.updateMatrixWorld(true);\r\n    skinnedMesh.skeleton.update();\r\n    \r\n    const geometry = skinnedMesh.geometry;\r\n    const posAttr = geometry.attributes.position;\r\n    const skinIndexAttr = geometry.attributes.skinIndex;\r\n    const skinWeightAttr = geometry.attributes.skinWeight;\r\n    \r\n    if (!posAttr || !skinIndexAttr || !skinWeightAttr) {\r\n        console.warn('[Z3D Worker] Missing skinning attributes');\r\n        return null;\r\n    }\r\n    \r\n    const vertexCount = posAttr.count;\r\n    const output = new Float32Array(vertexCount * 3);\r\n    \r\n    // Get skinning matrices\r\n    const bindMatrix = skinnedMesh.bindMatrix;\r\n    const bindMatrixInverse = skinnedMesh.bindMatrixInverse || new THREE.Matrix4().copy(bindMatrix).invert();\r\n    const boneMatrices = skinnedMesh.skeleton.boneMatrices; // Float32Array\r\n    \r\n    // Temp objects (reused for performance)\r\n    const vertex = new THREE.Vector3();\r\n    const temp = new THREE.Vector4();\r\n    const skinned = new THREE.Vector4();\r\n    const boneMatrix = new THREE.Matrix4();\r\n    \r\n    // Process each vertex\r\n    for (let i = 0; i < vertexCount; i++) {\r\n        // Get bind pose position\r\n        vertex.fromBufferAttribute(posAttr, i);\r\n        \r\n        // Transform to bind space: p_bind = bindMatrix * position\r\n        temp.set(vertex.x, vertex.y, vertex.z, 1.0);\r\n        temp.applyMatrix4(bindMatrix);\r\n        \r\n        // Initialize skinned position\r\n        skinned.set(0, 0, 0, 0);\r\n        \r\n        // Get bone influences (up to 4 bones per vertex)\r\n        const boneIndex0 = skinIndexAttr.getX(i);\r\n        const boneIndex1 = skinIndexAttr.getY(i);\r\n        const boneIndex2 = skinIndexAttr.getZ(i);\r\n        const boneIndex3 = skinIndexAttr.getW(i);\r\n        \r\n        const weight0 = skinWeightAttr.getX(i);\r\n        const weight1 = skinWeightAttr.getY(i);\r\n        const weight2 = skinWeightAttr.getZ(i);\r\n        const weight3 = skinWeightAttr.getW(i);\r\n        \r\n        // Apply bone transforms weighted by influence\r\n        // p_skinned = \u03A3 weight[i] * (boneMatrix[i] * p_bind)\r\n        if (weight0 > 0) {\r\n            const offset = boneIndex0 * 16;\r\n            boneMatrix.fromArray(boneMatrices, offset);\r\n            const v = new THREE.Vector4().copy(temp).applyMatrix4(boneMatrix).multiplyScalar(weight0);\r\n            skinned.add(v);\r\n        }\r\n        \r\n        if (weight1 > 0) {\r\n            const offset = boneIndex1 * 16;\r\n            boneMatrix.fromArray(boneMatrices, offset);\r\n            const v = new THREE.Vector4().copy(temp).applyMatrix4(boneMatrix).multiplyScalar(weight1);\r\n            skinned.add(v);\r\n        }\r\n        \r\n        if (weight2 > 0) {\r\n            const offset = boneIndex2 * 16;\r\n            boneMatrix.fromArray(boneMatrices, offset);\r\n            const v = new THREE.Vector4().copy(temp).applyMatrix4(boneMatrix).multiplyScalar(weight2);\r\n            skinned.add(v);\r\n        }\r\n        \r\n        if (weight3 > 0) {\r\n            const offset = boneIndex3 * 16;\r\n            boneMatrix.fromArray(boneMatrices, offset);\r\n            const v = new THREE.Vector4().copy(temp).applyMatrix4(boneMatrix).multiplyScalar(weight3);\r\n            skinned.add(v);\r\n        }\r\n        \r\n        // Transform back to object space: p_object = bindMatrixInverse * p_skinned\r\n        skinned.applyMatrix4(bindMatrixInverse);\r\n        \r\n        // Three.js (RH):  x,y,z\r\n        // \u2192 C3: +X right, +Y down, +Z out\r\n        const idx = i * 3;\r\n        output[idx]     =  skinned.x / unitScale;   // X <-  X\r\n        output[idx + 1] =  skinned.z / unitScale;   // Y <-  Z\r\n        output[idx + 2] =  skinned.y / unitScale;   // Z <-  Y\r\n    }\r\n    \r\n    // Cache the result\r\n    lastSkinnedVertices = output;\r\n    return output;\r\n}\r\n\r\n/**\r\n * Compress vertices to base64 for transmission\r\n */\r\nfunction compressVertices(vertices) {\r\n    if (!vertices || vertices.length === 0) return null;\r\n    \r\n    // Convert Float32Array to base64\r\n    const bytes = new Uint8Array(vertices.buffer, vertices.byteOffset, vertices.byteLength);\r\n    \r\n    // Convert to base64 in chunks to avoid stack overflow\r\n    let binary = '';\r\n    const chunkSize = 8192;\r\n    for (let i = 0; i < bytes.length; i += chunkSize) {\r\n        const chunk = bytes.subarray(i, Math.min(i + chunkSize, bytes.length));\r\n        binary += String.fromCharCode.apply(null, Array.from(chunk));\r\n    }\r\n    \r\n    return btoa(binary);\r\n}\r\n\r\n/**\r\n * Send skinned mesh update to the editor\r\n */\r\nfunction sendSkinnedMeshUpdate() {\r\n    const now = performance.now();\r\n    \r\n    // Check if we should throttle updates\r\n    if (now - lastSkinnedMeshUpdate < skinnedMeshUpdateInterval) {\r\n        return;\r\n    }\r\n    \r\n    // Extract skinned vertices and visibility map\r\n    const extractResult = extractSkinnedVertices();\r\n    if (!extractResult || !extractResult.vertices) return;\r\n    \r\n    const { vertices, visibility } = extractResult;\r\n    \r\n    // Compress for transmission\r\n    const compressed = compressVertices(vertices);\r\n    if (!compressed) return;\r\n    \r\n    lastSkinnedMeshUpdate = now;\r\n    \r\n    // Use Date.now() for timestamp to ensure uniqueness across different contexts\r\n    const timestamp = Date.now() + Math.random(); // Add random to ensure uniqueness\r\n    \r\n    // Send to parent window with visibility map\r\n    self.postMessage({\r\n        type: 'SKINNED_MESH_UPDATE',\r\n        data: {\r\n            timestamp: timestamp,\r\n            verticesCompressed: compressed,\r\n            visibility: visibility, // Include mesh visibility map\r\n            updateFrequency: skinnedMeshUpdateFrequency,\r\n            vertexCount: vertices.length / 3\r\n        }\r\n    });\r\n    \r\n    console.log(`[Z3D Worker] Sent skinned mesh update: ${vertices.length / 3} vertices, timestamp: ${timestamp}`);\r\n}\r\n\r\nfunction setSkinnedMeshUpdateFrequency(data) {\r\n    const frequency = data.frequency || 30;\r\n    skinnedMeshUpdateFrequency = Math.max(1, Math.min(60, frequency)); // Clamp 1-60 Hz\r\n    skinnedMeshUpdateInterval = 1000 / skinnedMeshUpdateFrequency;\r\n    \r\n    console.log(`[Z3D Worker] Skinned mesh update frequency set to ${skinnedMeshUpdateFrequency}Hz`);\r\n    \r\n    // Also update enabled state if provided\r\n    if (data.enabled !== undefined) {\r\n        skinnedMeshSyncEnabled = data.enabled;\r\n        console.log(`[Z3D Worker] Skinned mesh sync ${skinnedMeshSyncEnabled ? 'enabled' : 'disabled'}`);\r\n    }\r\n}\r\n\r\nfunction handlePing(data) {\r\n    self.postMessage({\r\n        type: 'WORKER_READY',\r\n        data: { timestamp: Date.now(), originalTimestamp: data?.timestamp }\r\n    });\r\n}\r\n\r\nfunction setupCanvas(data) {\r\n    console.log('[Z3D Worker] Setting up canvas with initial state...');\r\n    \r\n    try {\r\n        canvas = data.canvas;\r\n        \r\n        // Extract initial state\r\n        if (data.initialState) {\r\n            const state = data.initialState;\r\n\r\n            // \u2705 VERIFY these are actually being set\r\n            console.log('[Z3D Worker] Storing initial state:', {\r\n                position: state.transform?.position,\r\n                rotation: state.transform?.rotation,\r\n                scale: state.transform?.scale,\r\n                deltaTransform: state.deltaTransform\r\n            });\r\n            \r\n            // Set model position\r\n            if (state.transform?.position) {\r\n                modelPosition = {\r\n                    x: state.transform.position.x || 0,\r\n                    y: state.transform.position.y || 0,\r\n                    z: state.transform.position.z || 0\r\n                };\r\n            }\r\n            \r\n            // Set rotation\r\n            if (state.transform?.rotation) {\r\n                modelRotation = state.transform.rotation;\r\n            }\r\n            \r\n            // Set scale\r\n            if (state.transform?.scale) {\r\n                modelScale = state.transform.scale;\r\n            }\r\n            \r\n            // Set uniform scale\r\n            if (state.transform?.uniformScale !== undefined) {\r\n                uniformScale = state.transform.uniformScale;\r\n            }\r\n            \r\n            // Set unit scale\r\n            if (state.transform?.unitScale) {\r\n                unitScale = state.transform.unitScale;\r\n            }\r\n            \r\n            // Set rotation order\r\n            if (state.transform?.rotationOrder) {\r\n                modelRotationOrder = state.transform.rotationOrder;\r\n            }\r\n            \r\n            // Set delta transforms\r\n            if (state.deltaTransform) {\r\n                modelDeltaTransform = {\r\n                    position: state.deltaTransform.position || { x: 0, y: 0, z: 0 },\r\n                    rotation: state.deltaTransform.rotation || { x: 0, y: 0, z: 0 },\r\n                    scale: state.deltaTransform.scale || { x: 1, y: 1, z: 1 }\r\n                };\r\n            }\r\n            \r\n            // Set wireframe\r\n            if (state.wireframe !== undefined) {\r\n                wireframeMode = state.wireframe;\r\n            }\r\n        }\r\n        \r\n        return initializeThreeJS(data);\r\n        \r\n    } catch (error) {\r\n        console.error('[Z3D Worker] Canvas setup failed:', error);\r\n        return false;\r\n    }\r\n}\r\n\r\nfunction setupCanvasFallback(data) {\r\n    console.log('[Z3D Worker] Setting up fallback canvas...');\r\n    \r\n    try {\r\n        console.log('[Z3D Worker] Fallback mode - limited rendering capabilities');\r\n        return initializeThreeJS(data, true);\r\n    } catch (error) {\r\n        console.error('[Z3D Worker] Fallback canvas setup failed:', error);\r\n        self.postMessage({\r\n            type: 'ERROR',\r\n            data: { error: error.message, context: 'fallback_canvas_setup' }\r\n        });\r\n    }\r\n}\r\n\r\nfunction initializeThreeJS(data, isFallback = false) {\r\n    if (typeof THREE === 'undefined') {\r\n        throw new Error('THREE.js not available in worker');\r\n    }\r\n    \r\n    const width = data.width || 800;\r\n    const height = data.height || 600;\r\n    \r\n    if (data.isFallback || !data.canvas) {\r\n        console.log('[Z3D Worker] Fallback mode - creating virtual canvas');\r\n        isFallback = true;\r\n    }\r\n    \r\n    if (!isFallback) {\r\n        canvas = data.canvas;\r\n        if (!canvas) {\r\n            throw new Error('No valid canvas provided to worker');\r\n        }\r\n        \r\n        renderer = new THREE.WebGLRenderer({\r\n            canvas: canvas,\r\n            antialias: true,\r\n            alpha: true,\r\n            preserveDrawingBuffer: true\r\n        });\r\n        \r\n        renderer.setSize(width, height, false);\r\n        renderer.setClearColor(0x2a2a2a, 1);\r\n        renderer.shadowMap.enabled = true;\r\n        renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n    }\r\n    \r\n    // Create scene\r\n    scene = new THREE.Scene();\r\n    scene.name = 'Main Scene';\r\n    scene.background = new THREE.Color(0x2a2a2a);\r\n    \r\n    // Create camera (Z up)\r\n    const aspect = width / height;\r\n    camera = new THREE.PerspectiveCamera(75, aspect, 0.1, 1000);\r\n    \r\n    const camPos = data.cameraParams?.position || [5, -5, 5];\r\n    const camTarget = data.cameraParams?.target || [0, 0, 0];\r\n    \r\n    camera.position.set(camPos[0], camPos[1], camPos[2]);\r\n    camera.lookAt(camTarget[0], camTarget[1], camTarget[2]);\r\n    camera.up.set(0, 0, 1);\r\n    \r\n    if (!isFallback) {\r\n        initializeCameraState();\r\n    }\r\n    \r\n    // Process initial state\r\n    if (data.initialState) {\r\n        processInitialState(data.initialState);\r\n    }\r\n    \r\n    setupLighting();\r\n    setupGridSystem();\r\n    \r\n    if (renderer) {\r\n        startRenderLoop();\r\n    }\r\n    \r\n    console.log('[Z3D Worker] \u2705 Three.js initialized');\r\n    \r\n    self.postMessage({\r\n        type: 'CANVAS_READY',\r\n        data: { \r\n            success: true,\r\n            canvasSize: { width, height },\r\n            threeVersion: THREE.REVISION,\r\n            fallbackMode: isFallback\r\n        }\r\n    });\r\n}\r\n\r\nfunction processInitialState(initialState) {\r\n    // Set transforms\r\n    if (initialState.transform) {\r\n        if (initialState.transform.position) {\r\n            modelPosition = { ...initialState.transform.position };\r\n        }\r\n        if (initialState.transform.rotation) {\r\n            modelRotation = { ...initialState.transform.rotation };\r\n        }\r\n        if (initialState.transform.scale) {\r\n            modelScale = { ...initialState.transform.scale };\r\n        }\r\n        if (initialState.transform.uniformScale !== undefined) {\r\n            uniformScale = initialState.transform.uniformScale;\r\n        }\r\n        if (initialState.transform.unitScale !== undefined) {\r\n            unitScale = initialState.transform.unitScale;\r\n        }\r\n        if (initialState.transform.rotationOrder) {\r\n            modelRotationOrder = initialState.transform.rotationOrder;\r\n        }\r\n    }\r\n    \r\n    // Set delta transforms\r\n    if (initialState.deltaTransform) {\r\n        modelDeltaTransform = {\r\n            position: initialState.deltaTransform.position || { x: 0, y: 0, z: 0 },\r\n            rotation: initialState.deltaTransform.rotation || { x: 0, y: 0, z: 0 },\r\n            scale: initialState.deltaTransform.scale || { x: 1, y: 1, z: 1 }\r\n        };\r\n    }\r\n    \r\n    // Set other properties\r\n    if (initialState.wireframe !== undefined) {\r\n        wireframeMode = initialState.wireframe;\r\n    }\r\n    \r\n    if (initialState.layoutInfo) {\r\n        layoutInfo = initialState.layoutInfo;\r\n    }\r\n    \r\n    console.log('[Z3D Worker] Initial state processed');\r\n}\r\n\r\nfunction setupLighting() {\r\n    const ambientLight = new THREE.AmbientLight(0x404040, Math.PI);\r\n    ambientLight.name = 'Ambient Light';\r\n    scene.add(ambientLight);\r\n    \r\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1 * Math.PI * 2);\r\n    directionalLight.name = 'Sun Light';\r\n    directionalLight.position.set(5, 10, 5);\r\n    directionalLight.castShadow = true;\r\n    directionalLight.shadow.mapSize.width = 2048;\r\n    directionalLight.shadow.mapSize.height = 2048;\r\n    scene.add(directionalLight);\r\n    \r\n    const fillLight = new THREE.DirectionalLight(0x87CEEB, 1 * Math.PI);\r\n    fillLight.name = 'Fill Light';\r\n    fillLight.position.set(-5, 2, -5);\r\n    scene.add(fillLight);\r\n}\r\n\r\nfunction setupGridSystem() {\r\n    console.log('[Z3D Worker] Setting up grid system...');\r\n    \r\n    rebuildWorldGrid();\r\n    rebuildLocalGrid();\r\n    \r\n    // World axes\r\n    const axesGroup = new THREE.Group();\r\n    axesGroup.name = 'World Axes';\r\n    axesGroup.position.z = 0.01;\r\n    \r\n    const axisRadius = 0.02;\r\n    const axisLength = 3;\r\n    const coneRadius = 0.05;\r\n    const coneHeight = 0.15;\r\n    \r\n    // X axis - Red\r\n    const xGeometry = new THREE.CylinderGeometry(axisRadius, axisRadius, axisLength, 8);\r\n    const xMaterial = new THREE.MeshBasicMaterial({ color: 0xff3333 });\r\n    const xAxis = new THREE.Mesh(xGeometry, xMaterial);\r\n    xAxis.name = 'X-Axis';\r\n    xAxis.rotation.z = -Math.PI / 2;\r\n    xAxis.position.x = axisLength / 2;\r\n    axesGroup.add(xAxis);\r\n    \r\n    // X axis cone\r\n    const xConeGeometry = new THREE.ConeGeometry(coneRadius, coneHeight, 8);\r\n    const xCone = new THREE.Mesh(xConeGeometry, xMaterial);\r\n    xCone.rotation.z = -Math.PI / 2;\r\n    xCone.position.x = axisLength + coneHeight / 2;\r\n    axesGroup.add(xCone);\r\n    \r\n    // Y axis - Green (negative Y for C3)\r\n    const yGeometry = new THREE.CylinderGeometry(axisRadius, axisRadius, axisLength, 8);\r\n    const yMaterial = new THREE.MeshBasicMaterial({ color: 0x33ff33 });\r\n    const yAxis = new THREE.Mesh(yGeometry, yMaterial);\r\n    yAxis.name = 'Y-Axis';\r\n    yAxis.position.y = -axisLength / 2;\r\n    axesGroup.add(yAxis);\r\n    \r\n    // Y axis cone\r\n    const yConeGeometry = new THREE.ConeGeometry(coneRadius, coneHeight, 8);\r\n    const yCone = new THREE.Mesh(yConeGeometry, yMaterial);\r\n    yCone.rotation.z = Math.PI;\r\n    yCone.position.y = -axisLength - coneHeight / 2;\r\n    axesGroup.add(yCone);\r\n    \r\n    // Z axis - Blue\r\n    const zGeometry = new THREE.CylinderGeometry(axisRadius, axisRadius, axisLength, 8);\r\n    const zMaterial = new THREE.MeshBasicMaterial({ color: 0x3333ff });\r\n    const zAxis = new THREE.Mesh(zGeometry, zMaterial);\r\n    zAxis.name = 'Z-Axis';\r\n    zAxis.rotation.x = Math.PI / 2;\r\n    zAxis.position.z = axisLength / 2;\r\n    axesGroup.add(zAxis);\r\n    \r\n    // Z axis cone\r\n    const zConeGeometry = new THREE.ConeGeometry(coneRadius, coneHeight, 8);\r\n    const zCone = new THREE.Mesh(zConeGeometry, zMaterial);\r\n    zCone.rotation.x = Math.PI / 2;  // Flipped to point in positive Z direction\r\n    zCone.position.z = axisLength + coneHeight / 2;\r\n    axesGroup.add(zCone);\r\n    \r\n    scene.add(axesGroup);\r\n    \r\n    // Local axes\r\n    if (localGridGroup) {\r\n        const localAxesGroup = new THREE.Group();\r\n        localAxesGroup.name = 'Local Axes';\r\n        localAxesGroup.position.z = 0.01;\r\n        \r\n        const localAxisRadius = 0.015;\r\n        const localAxisLength = 1.5;\r\n        const localConeRadius = 0.04;\r\n        const localConeHeight = 0.12;\r\n        \r\n        // Local X axis - Red\r\n        const localXGeometry = new THREE.CylinderGeometry(localAxisRadius, localAxisRadius, localAxisLength, 8);\r\n        const localXMaterial = new THREE.MeshBasicMaterial({ color: 0xff6666 });\r\n        const localXAxis = new THREE.Mesh(localXGeometry, localXMaterial);\r\n        localXAxis.name = 'Local-X-Axis';\r\n        localXAxis.rotation.z = -Math.PI / 2;\r\n        localXAxis.position.x = localAxisLength / 2;\r\n        localAxesGroup.add(localXAxis);\r\n        \r\n        // Local X axis cone\r\n        const localXConeGeometry = new THREE.ConeGeometry(localConeRadius, localConeHeight, 8);\r\n        const localXCone = new THREE.Mesh(localXConeGeometry, localXMaterial);\r\n        localXCone.rotation.z = -Math.PI / 2;\r\n        localXCone.position.x = localAxisLength + localConeHeight / 2;\r\n        localAxesGroup.add(localXCone);\r\n        \r\n        // Local Y axis - Green (negative Y for C3)\r\n        const localYGeometry = new THREE.CylinderGeometry(localAxisRadius, localAxisRadius, localAxisLength, 8);\r\n        const localYMaterial = new THREE.MeshBasicMaterial({ color: 0x66ff66 });\r\n        const localYAxis = new THREE.Mesh(localYGeometry, localYMaterial);\r\n        localYAxis.name = 'Local-Y-Axis';\r\n        localYAxis.position.y = -localAxisLength / 2;\r\n        localAxesGroup.add(localYAxis);\r\n        \r\n        // Local Y axis cone\r\n        const localYConeGeometry = new THREE.ConeGeometry(localConeRadius, localConeHeight, 8);\r\n        const localYCone = new THREE.Mesh(localYConeGeometry, localYMaterial);\r\n        localYCone.rotation.z = Math.PI;\r\n        localYCone.position.y = -localAxisLength - localConeHeight / 2;\r\n        localAxesGroup.add(localYCone);\r\n        \r\n        // Local Z axis - Blue\r\n        const localZGeometry = new THREE.CylinderGeometry(localAxisRadius, localAxisRadius, localAxisLength, 8);\r\n        const localZMaterial = new THREE.MeshBasicMaterial({ color: 0x6666ff });\r\n        const localZAxis = new THREE.Mesh(localZGeometry, localZMaterial);\r\n        localZAxis.name = 'Local-Z-Axis';\r\n        localZAxis.rotation.x = Math.PI / 2;\r\n        localZAxis.position.z = localAxisLength / 2;\r\n        localAxesGroup.add(localZAxis);\r\n        \r\n        // Local Z axis cone\r\n        const localZConeGeometry = new THREE.ConeGeometry(localConeRadius, localConeHeight, 8);\r\n        const localZCone = new THREE.Mesh(localZConeGeometry, localZMaterial);\r\n        localZCone.rotation.x = Math.PI / 2;  // Flipped to point in positive Z direction\r\n        localZCone.position.z = localAxisLength + localConeHeight / 2;\r\n        localAxesGroup.add(localZCone);\r\n        \r\n        localGridGroup.add(localAxesGroup);\r\n    }\r\n    \r\n    console.log('[Z3D Worker] \u2705 Grid system setup complete');\r\n}\r\n\r\n// Grid rebuild functions\r\nfunction unitsPerCell(px) {\r\n    return Math.max(1e-6, px / unitScale);\r\n}\r\n\r\nfunction rebuildWorldGrid() {\r\n    if (worldGrid) {\r\n        if (worldGrid.geometry) worldGrid.geometry.dispose();\r\n        if (worldGrid.material) worldGrid.material.dispose();\r\n        if (scene && worldGrid.parent === scene) scene.remove(worldGrid);\r\n        worldGrid = null;\r\n    }\r\n    \r\n    const cellUnits = unitsPerCell(worldGridCellPx);\r\n    // Compute half-size needed to cover the model's extents from world origin with padding\r\n    let halfSize = cellUnits * 4; // sensible default\r\n    if (currentModel) {\r\n        const box = new THREE.Box3().setFromObject(currentModel);\r\n        const size = box.getSize(new THREE.Vector3());\r\n        const paddingX = Math.max(0, worldGridPaddingPct) * size.x;\r\n        const paddingY = Math.max(0, worldGridPaddingPct) * size.y;\r\n        const min = box.min; const max = box.max;\r\n        const halfX = Math.max(Math.abs(min.x) + paddingX, Math.abs(max.x) + paddingX);\r\n        const halfY = Math.max(Math.abs(min.y) + paddingY, Math.abs(max.y) + paddingY);\r\n        halfSize = Math.max(halfX, halfY, cellUnits);\r\n    }\r\n    // Snap total size to whole cell counts so lines align\r\n    const halfCells = Math.max(1, Math.ceil(halfSize / cellUnits));\r\n    const totalSize = halfCells * cellUnits * 2;\r\n    const divisions = Math.max(1, halfCells * 2);\r\n    \r\n    worldGrid = new THREE.GridHelper(totalSize, divisions, 0x444444, 0x333333);\r\n    worldGrid.rotateX(Math.PI / 2);\r\n    worldGrid.name = 'World Grid';\r\n    \r\n    scene.add(worldGrid);\r\n}\r\n\r\nfunction rebuildLocalGrid() {\r\n    if (!localGridGroup) {\r\n        localGridGroup = new THREE.Group();\r\n        localGridGroup.name = 'Local Grid Group';\r\n        scene.add(localGridGroup);\r\n    }\r\n    \r\n    if (localGrid) {\r\n        localGridGroup.remove(localGrid);\r\n        if (localGrid.geometry) localGrid.geometry.dispose();\r\n        if (localGrid.material) localGrid.material.dispose();\r\n        localGrid = null;\r\n    }\r\n    \r\n    let sizeX = 5, sizeY = 5;\r\n    \r\n    if (currentModel) {\r\n        const box = new THREE.Box3().setFromObject(currentModel);\r\n        const size = box.getSize(new THREE.Vector3());\r\n        sizeX = Math.max(size.x, 0.001);\r\n        sizeY = Math.max(size.y, 0.001);\r\n    }\r\n    \r\n    const cellUnits = unitsPerCell(localGridCellPx);\r\n    const factor = 1 + (2 * localGridPaddingPct);\r\n    const halfMax = Math.max(sizeX, sizeY) * factor * 0.5;\r\n    const halfSnapped = Math.ceil(halfMax / cellUnits) * cellUnits;\r\n    const total = Math.max(cellUnits, halfSnapped * 2);\r\n    const divisions = Math.max(1, Math.round(total / cellUnits));\r\n    \r\n    localGrid = new THREE.GridHelper(1, divisions, 0x888888, 0x666666);\r\n    localGrid.scale.set(total, 1, total);\r\n    localGrid.rotateX(Math.PI / 2);\r\n    localGrid.name = 'Local Grid';\r\n    localGridGroup.add(localGrid);\r\n    \r\n    if (currentModel) {\r\n        setLocalGridPosition(currentModel.position);\r\n    }\r\n}\r\n\r\n// Ensure local grid avoids z-fighting with world grid: if z is effectively 0, lift slightly\r\nfunction setLocalGridPosition(posVec3) {\r\n    if (!localGridGroup || !posVec3) return;\r\n    localGridGroup.position.set(posVec3.x, posVec3.y, (Math.abs(posVec3.z) < 1e-6 ? 0.05 : posVec3.z));\r\n}\r\n\r\n// Model loading\r\nfunction loadModel(data) {\r\n    console.log('[Z3D Worker] Loading 3D model...');\r\n    \r\n    try {\r\n        const GLTFLoader = THREE.GLTFLoader || self.GLTFLoader;\r\n        if (!GLTFLoader) {\r\n            throw new Error('GLTFLoader not available');\r\n        }\r\n        \r\n        const loader = new GLTFLoader();\r\n        \r\n        if (data.modelUrl) {\r\n            loader.load(\r\n                data.modelUrl,\r\n                (gltf) => handleModelLoaded(gltf, data),\r\n                (progress) => handleModelProgress(progress),\r\n                (error) => handleModelError(error, data)\r\n            );\r\n        } else if (data.modelData) {\r\n            loader.parse(\r\n                data.modelData,\r\n                '',\r\n                (gltf) => handleModelLoaded(gltf, data),\r\n                (error) => handleModelError(error, data)\r\n            );\r\n        } else {\r\n            throw new Error('No model URL or data provided');\r\n        }\r\n    } catch (error) {\r\n        handleModelError(error, data);\r\n    }\r\n}\r\n\r\nfunction handleModelLoaded(gltf, data) {\r\n    console.log('[Z3D Worker] \u2705 Model loaded successfully');\r\n    \r\n    try {\r\n        // Remove previous model\r\n        if (currentModel) {\r\n            scene.remove(currentModel);\r\n            currentModel = null;\r\n        }\r\n        \r\n        // Get the model\r\n        const originalModel = gltf.scene;\r\n        originalModel.name = 'LoadedModel';\r\n        \r\n        // Configure model\r\n        originalModel.traverse((child) => {\r\n            if (child.isMesh) {\r\n                child.castShadow = true;\r\n                child.receiveShadow = true;\r\n                if (child.material) {\r\n                    child.material.needsUpdate = true;\r\n                }\r\n            }\r\n        });\r\n        \r\n        // Create wrapper\r\n        const modelWrapper = new THREE.Group();\r\n        modelWrapper.name = 'ModelWrapper';\r\n        modelWrapper.add(originalModel);\r\n        \r\n        currentModel = modelWrapper;\r\n        \r\n        // Set rotation order\r\n        if (currentModel.rotation) {\r\n            currentModel.rotation.order = modelRotationOrder || 'ZXY';\r\n        }\r\n        \r\n        // // Apply all transforms\r\n        // applyAllTransforms();\r\n\r\n        // Add to scene\r\n        scene.add(currentModel);\r\n\r\n        // Initialize transform gizmo for the new model\r\n        if (typeof TransformGizmo !== 'undefined' && !transformGizmo) {\r\n            transformGizmo = new TransformGizmo();\r\n            transformGizmo.initialize(scene, camera, currentModel);\r\n            // Initialize overlay for HUD\r\n            if (overlayScene && overlayCamera) {\r\n                transformGizmo.setOverlay(overlayScene, overlayCamera, () => ({ width: viewportWidth, height: viewportHeight }), overlayRoot);\r\n            }\r\n            transformGizmo.setMode(gizmoMode);\r\n            transformGizmo.setSpace(gizmoSpace);\r\n            // Push snap config for WORLD grid snapping (origin 0,0,0)\r\n            const units = unitsPerCell(worldGridCellPx);\r\n                if (transformGizmo.setSnapConfig) transformGizmo.setSnapConfig({ enabled: snapEnabled, angleDeg: snapAngleDeg, snapScale: snapScale, localGridCellPx, unitsPerCell: units, origin: { x: 0, y: 0, z: 0 } });\r\n            console.log('[Z3D Worker] \u2705 Transform gizmo initialized for loaded model');\r\n        } else if (transformGizmo && currentModel) {\r\n            // Update existing gizmo with new model\r\n            if (overlayScene && overlayCamera && transformGizmo.setOverlay) {\r\n                transformGizmo.setOverlay(overlayScene, overlayCamera, () => ({ width: viewportWidth, height: viewportHeight }), overlayRoot);\r\n            }\r\n            transformGizmo.setTarget(currentModel);\r\n            // Update snap config on re-target too\r\n            const units = unitsPerCell(worldGridCellPx);\r\n                if (transformGizmo.setSnapConfig) transformGizmo.setSnapConfig({ enabled: snapEnabled, angleDeg: snapAngleDeg, snapScale: snapScale, localGridCellPx, unitsPerCell: units, origin: { x: 0, y: 0, z: 0 } });\r\n            console.log('[Z3D Worker] \u2705 Transform gizmo target updated');\r\n        }\r\n\r\n        // \u2705 ADD THIS: Apply the initial transforms that were already set\r\n        console.log('[Z3D Worker] Applying initial transforms to loaded model:', {\r\n            position: modelPosition,\r\n            rotation: modelRotation,\r\n            scale: modelScale,\r\n            deltaTransform: modelDeltaTransform\r\n        });\r\n        \r\n        // Apply all transforms immediately\r\n        applyAllTransforms();\r\n        \r\n        // Initialize scene data\r\n        if (typeof SceneDataCollector !== 'undefined') {\r\n            SceneDataCollector.setLoadedGLTF(gltf);\r\n            \r\n            setTimeout(() => {\r\n                try {\r\n                    const sceneData = SceneDataCollector.collectSceneData(scene, currentModel);\r\n                    \r\n                    // ADD DEBUGGING HERE\r\n                    console.log('[Z3D Worker] Scene data collected:', {\r\n                        textureCount: sceneData.textures ? sceneData.textures.length : 0,\r\n                        materialCount: sceneData.materials ? sceneData.materials.length : 0,\r\n                        textures: sceneData.textures\r\n                    });\r\n                    \r\n                    // Check if textures have IDs\r\n                    if (sceneData.textures && sceneData.textures.length > 0) {\r\n                        sceneData.textures.forEach((texture, index) => {\r\n                            console.log(`[Z3D Worker] Texture ${index}:`, {\r\n                                id: texture.id,\r\n                                uuid: texture.uuid,\r\n                                name: texture.name,\r\n                                type: texture.type,\r\n                                hasImage: !!texture.image\r\n                            });\r\n                        });\r\n                    } else {\r\n                        console.warn('[Z3D Worker] No textures found in scene data');\r\n                    }\r\n                    \r\n                    self.postMessage({\r\n                        type: 'SCENE_DATA',\r\n                        data: { sceneData, timestamp: Date.now() }\r\n                    });\r\n                } catch (error) {\r\n                    console.error('[Z3D Worker] Error collecting scene data:', error);\r\n                }\r\n            }, 100);\r\n        }\r\n        \r\n        // Initialize animations\r\n        if (gltf.animations && gltf.animations.length > 0) {\r\n            initializeAnimations(gltf);\r\n            \r\n            // Restore animation state if provided in data\r\n            if (data.animationState) {\r\n                console.log('[Z3D Worker] Restoring animation state:', data.animationState);\r\n                restoreAnimationState(data.animationState);\r\n            }\r\n        }\r\n        \r\n        // Update grids\r\n        rebuildWorldGrid();\r\n        rebuildLocalGrid();\r\n        \r\n        // Fit camera\r\n        fitCameraToModelAndGrids();\r\n        \r\n        // Initialize camera following\r\n        initializeCameraFollowing();\r\n        \r\n        // Send success message\r\n        const modelInfo = getModelInfo(gltf);\r\n        self.postMessage({\r\n            type: 'MODEL_LOADED',\r\n            data: {\r\n                success: true,\r\n                modelInfo,\r\n                hasAnimations: gltf.animations && gltf.animations.length > 0\r\n            }\r\n        });\r\n        \r\n    } catch (error) {\r\n        handleModelError(error, data);\r\n    }\r\n}\r\n\r\nfunction handleModelProgress(progress) {\r\n    const percent = progress.total > 0 ? (progress.loaded / progress.total) * 100 : 0;\r\n    console.log(`[Z3D Worker] Loading progress: ${percent.toFixed(1)}%`);\r\n}\r\n\r\nfunction handleModelError(error, data) {\r\n    console.error('[Z3D Worker] Model loading failed:', error);\r\n    self.postMessage({\r\n        type: 'MODEL_ERROR',\r\n        data: {\r\n            success: false,\r\n            error: error.message || 'Unknown error',\r\n            modelPath: data?.modelPath || 'unknown'\r\n        }\r\n    });\r\n}\r\n\r\nfunction getModelInfo(gltf) {\r\n    let vertexCount = 0;\r\n    let triangleCount = 0;\r\n    let materialCount = 0;\r\n    \r\n    gltf.scene.traverse((child) => {\r\n        if (child.isMesh && child.geometry) {\r\n            const positions = child.geometry.attributes.position;\r\n            if (positions) vertexCount += positions.count;\r\n            \r\n            const indices = child.geometry.index;\r\n            if (indices) {\r\n                triangleCount += indices.count / 3;\r\n            } else if (positions) {\r\n                triangleCount += positions.count / 3;\r\n            }\r\n            \r\n            if (child.material) materialCount++;\r\n        }\r\n    });\r\n    \r\n    return {\r\n        vertexCount: Math.floor(vertexCount),\r\n        triangleCount: Math.floor(triangleCount),\r\n        materialCount,\r\n        hasAnimations: gltf.animations && gltf.animations.length > 0\r\n    };\r\n}\r\n\r\n// Transform handling\r\nfunction updateTransform(data) {\r\n    console.log('[Z3D Worker] \u{1F4C4} UPDATE_TRANSFORM received');\r\n    \r\n    if (!data.transform && !data.deltaTransform) return;\r\n    \r\n    const source = data.source || 'unknown';\r\n    let transformsChanged = false;\r\n    \r\n    // Update delta transforms\r\n    if (data.deltaTransform) {\r\n        const dt = data.deltaTransform;\r\n        modelDeltaTransform = {\r\n            position: dt.position || { x: 0, y: 0, z: 0 },\r\n            rotation: dt.rotation || { x: 0, y: 0, z: 0 },\r\n            scale: dt.scale || { x: 1, y: 1, z: 1 }\r\n        };\r\n        transformsChanged = true;\r\n    }\r\n    \r\n    // Update base transforms\r\n    if (data.transform) {\r\n        const t = data.transform;\r\n        let positionChanged = false;\r\n        \r\n        // Position\r\n        if (t.position) {\r\n            if (typeof t.position.x === 'number') {\r\n                modelPosition.x = t.position.x;\r\n                positionChanged = true;\r\n            }\r\n            if (typeof t.position.y === 'number') {\r\n                modelPosition.y = t.position.y;\r\n                positionChanged = true;\r\n            }\r\n            if (typeof t.position.z === 'number') {\r\n                modelPosition.z = t.position.z;\r\n                positionChanged = true;\r\n            }\r\n        }\r\n        \r\n        // Rotation\r\n        if (t.rotation) {\r\n            if (typeof t.rotation.x === 'number') modelRotation.x = t.rotation.x;\r\n            if (typeof t.rotation.y === 'number') modelRotation.y = t.rotation.y;\r\n            if (typeof t.rotation.z === 'number') modelRotation.z = t.rotation.z;\r\n            transformsChanged = true;\r\n        }\r\n        \r\n        // Scale\r\n        if (t.scale) {\r\n            if (typeof t.scale.x === 'number') modelScale.x = t.scale.x;\r\n            if (typeof t.scale.y === 'number') modelScale.y = t.scale.y;\r\n            if (typeof t.scale.z === 'number') modelScale.z = t.scale.z;\r\n            transformsChanged = true;\r\n        }\r\n        \r\n        // Uniform scale\r\n        if (typeof t.uniformScale === 'number') {\r\n            uniformScale = t.uniformScale;\r\n            transformsChanged = true;\r\n        }\r\n        \r\n        // Unit scale\r\n        if (typeof t.unitScale === 'number') {\r\n            unitScale = t.unitScale;\r\n            transformsChanged = true;\r\n        }\r\n        \r\n        // Rotation order\r\n        if (t.rotationOrder) {\r\n            modelRotationOrder = t.rotationOrder;\r\n            if (currentModel && currentModel.rotation) {\r\n                currentModel.rotation.order = modelRotationOrder;\r\n            }\r\n        }\r\n        \r\n        // Handle position changes and camera following\r\n        if (positionChanged) {\r\n            updateModelPosition();\r\n            handleCameraFollowing(source);\r\n        }\r\n    }\r\n    \r\n     // Apply transforms if changed\r\n    if (transformsChanged && currentModel) {\r\n        applyAllTransforms();\r\n        \r\n        // Update gizmo position\r\n        if (transformGizmo && currentModel) {\r\n            transformGizmo.updateGizmoTransform();\r\n        }\r\n    }\r\n}\r\n\r\nfunction applyAllTransforms() {\r\n    if (!currentModel) return;\r\n    \r\n    // Calculate final position (base + delta)\r\n    const finalPosition = {\r\n        x: modelPosition.x + modelDeltaTransform.position.x,\r\n        y: modelPosition.y + modelDeltaTransform.position.y,\r\n        z: modelPosition.z + modelDeltaTransform.position.z\r\n    };\r\n    \r\n    // Apply position\r\n    const worldPos = convertC3ToThree({ position: finalPosition });\r\n    currentModel.position.set(worldPos.position.x, worldPos.position.y, worldPos.position.z);\r\n    \r\n    // Calculate final rotation (base + delta)\r\n    const finalRotation = {\r\n        x: modelRotation.x + modelDeltaTransform.rotation.x,\r\n        y: modelRotation.y + modelDeltaTransform.rotation.y,\r\n        z: modelRotation.z + modelDeltaTransform.rotation.z\r\n    };\r\n    \r\n    // Apply rotation\r\n    const worldRot = convertC3ToThree({ rotation: finalRotation });\r\n    currentModel.rotation.x = (worldRot.rotation.x * Math.PI) / 180;\r\n    currentModel.rotation.y = (worldRot.rotation.y * Math.PI) / 180;\r\n    currentModel.rotation.z = (worldRot.rotation.z * Math.PI) / 180;\r\n    \r\n    // Calculate final scale\r\n    // Since positions are divided by unitScale in convertC3ToThree,\r\n    // we DON'T apply unitScale to the model scale in Three.js\r\n    // This keeps the model in \"world units\" consistently\r\n    const finalScale = {\r\n        x: uniformScale * modelScale.x * modelDeltaTransform.scale.x,\r\n        y: uniformScale * modelScale.y * modelDeltaTransform.scale.y,\r\n        z: uniformScale * modelScale.z * modelDeltaTransform.scale.z\r\n    };\r\n    \r\n    // Apply scale\r\n    currentModel.scale.set(finalScale.x, finalScale.y, finalScale.z);\r\n    \r\n    // Apply wireframe if needed\r\n    if (wireframeMode) {\r\n        currentModel.traverse((child) => {\r\n            if (child.isMesh && child.material) {\r\n                child.material.wireframe = true;\r\n                child.material.needsUpdate = true;\r\n            }\r\n        });\r\n    }\r\n    \r\n    // Update matrix\r\n    currentModel.updateMatrixWorld(true);\r\n    \r\n    // Update local grid position\r\n    if (localGridGroup) {\r\n        const baseWorldPos = convertC3ToThree({ position: modelPosition });\r\n        localGridGroup.position.set(\r\n            baseWorldPos.position.x,\r\n            baseWorldPos.position.y,\r\n            baseWorldPos.position.z\r\n        );\r\n    }\r\n}\r\n\r\nfunction updateModelPosition() {\r\n    if (!currentModel) return;\r\n    \r\n    const finalPosition = {\r\n        x: modelPosition.x + modelDeltaTransform.position.x,\r\n        y: modelPosition.y + modelDeltaTransform.position.y,\r\n        z: modelPosition.z + modelDeltaTransform.position.z\r\n    };\r\n    \r\n    const worldPos = convertC3ToThree({ position: finalPosition });\r\n    currentModel.position.set(worldPos.position.x, worldPos.position.y, worldPos.position.z);\r\n\r\n    // Update OrbitControls target to follow model\r\n    if (orbitControls) {\r\n        orbitControls.target.copy(currentModel.position);\r\n        orbitControls.update();\r\n    }\r\n    \r\n    if (localGridGroup) {\r\n        const baseWorldPos = convertC3ToThree({ position: modelPosition });\r\n        setLocalGridPosition(new THREE.Vector3(baseWorldPos.position.x, baseWorldPos.position.y, baseWorldPos.position.z));\r\n    }\r\n}\r\n\r\nfunction updateUnitScale(data) {\r\n    if (typeof data.unitScale === 'number') {\r\n        unitScale = data.unitScale;\r\n        if (currentModel) {\r\n            applyAllTransforms();\r\n        }\r\n    }\r\n}\r\n\r\n// Camera handling\r\nfunction initializeCameraState() {\r\n    if (camera) {\r\n        cameraFollowState.lastModelPosition = { ...modelPosition };\r\n    }\r\n}\r\n\r\nfunction initializeCameraFollowing() {\r\n    cameraFollowState.lastModelPosition = { ...modelPosition };\r\n}\r\n\r\nfunction handleCameraFollowing(source) {\r\n    const deltaC3 = {\r\n        x: modelPosition.x - cameraFollowState.lastModelPosition.x,\r\n        y: modelPosition.y - cameraFollowState.lastModelPosition.y,\r\n        z: modelPosition.z - cameraFollowState.lastModelPosition.z\r\n    };\r\n    \r\n    const DEADZONE_PX = 1;\r\n    const movementMagnitude = Math.sqrt(deltaC3.x * deltaC3.x + deltaC3.y * deltaC3.y + deltaC3.z * deltaC3.z);\r\n    \r\n    let shouldFollow = false;\r\n    if (source === 'c3') {\r\n        shouldFollow = cameraFollowState.isEnabledForC3Changes;\r\n    } else if (source === 'editor') {\r\n        shouldFollow = cameraFollowState.isEnabledForEditorChanges;\r\n    }\r\n    \r\n    if (!shouldFollow) {\r\n        cameraFollowState.lastModelPosition = { ...modelPosition };\r\n        return;\r\n    }\r\n    \r\n    if (movementMagnitude < DEADZONE_PX) return;\r\n    \r\n    const now = Date.now();\r\n    if (now - cameraFollowState.updateThrottle < 50) return;\r\n    \r\n    cameraFollowState.updateThrottle = now;\r\n    \r\n    const deltaThree = convertC3ToThree({ position: deltaC3 });\r\n    \r\n    self.postMessage({\r\n        type: 'CAMERA_FOLLOW_REQUEST',\r\n        data: {\r\n            deltaPosition: deltaThree.position,\r\n            source,\r\n            modelPositionC3: { ...modelPosition },\r\n            timestamp: now\r\n        }\r\n    });\r\n    \r\n    cameraFollowState.lastModelPosition = { ...modelPosition };\r\n}\r\n\r\nfunction setCameraFollowForEditor(enabled) {\r\n    cameraFollowState.isEnabledForEditorChanges = enabled;\r\n}\r\n\r\nfunction setCameraFollowForC3(enabled) {\r\n    cameraFollowState.isEnabledForC3Changes = enabled;\r\n}\r\n\r\nfunction updateCamera(data) {\r\n    if (!camera) return;\r\n    \r\n    try {\r\n        camera.position.fromArray(data.position);\r\n        camera.quaternion.fromArray(data.quaternion);\r\n        camera.updateMatrixWorld();\r\n        \r\n        if (data.target) {\r\n            const targetPos = new THREE.Vector3().fromArray(data.target);\r\n            camera.lookAt(targetPos);\r\n        }\r\n    } catch (error) {\r\n        console.error(\"[Z3D Worker] Camera update failed:\", error);\r\n    }\r\n}\r\n\r\nfunction handleCameraTargetUpdate(data) {\r\n    if (!camera || !data.target) return;\r\n    \r\n    const newTarget = new THREE.Vector3(data.target[0], data.target[1], data.target[2]);\r\n    camera.lookAt(newTarget);\r\n    if (orbitTarget) {\r\n        orbitTarget.copy(newTarget);\r\n    }\r\n}\r\n\r\nfunction fitCameraToModelAndGrids() {\r\n    if (!camera) return;\r\n    \r\n    let targetPosition = new THREE.Vector3(0, 0, 0);\r\n    let cameraDistance = 10;\r\n    \r\n    if (currentModel) {\r\n        targetPosition.copy(currentModel.position);\r\n        \r\n        const box = new THREE.Box3().setFromObject(currentModel);\r\n        const size = box.getSize(new THREE.Vector3());\r\n        const maxDim = Math.max(size.x, size.y, size.z);\r\n        \r\n        const fov = camera.fov * (Math.PI / 180);\r\n        const distance = (maxDim / 0.75) / (2 * Math.tan(fov / 2));\r\n        cameraDistance = Math.max(distance * 1.2, maxDim * 2);\r\n    }\r\n    \r\n    const elevation45 = Math.PI / 4;\r\n    const offsetX = 0;\r\n    const offsetY = -cameraDistance * Math.cos(elevation45);\r\n    const offsetZ = cameraDistance * Math.sin(elevation45);\r\n    \r\n    camera.position.set(\r\n        targetPosition.x + offsetX,\r\n        targetPosition.y + offsetY,\r\n        targetPosition.z + offsetZ\r\n    );\r\n    \r\n    camera.up.set(0, 0, 1);\r\n    camera.lookAt(targetPosition);\r\n    \r\n    self.postMessage({\r\n        type: 'INITIAL_CAMERA_STATE',\r\n        data: {\r\n            position: [camera.position.x, camera.position.y, camera.position.z],\r\n            target: [targetPosition.x, targetPosition.y, targetPosition.z],\r\n            up: [0, 0, 1]\r\n        }\r\n    });\r\n    \r\n    if (orbitTarget) {\r\n        orbitTarget.copy(targetPosition);\r\n    }\r\n}\r\n\r\nfunction resetView() {\r\n    if (camera) {\r\n        if (currentModel) {\r\n            fitCameraToModelAndGrids();\r\n        } else {\r\n            camera.position.set(5, -5, 5);\r\n            camera.up.set(0, 0, 1);\r\n            camera.lookAt(0, 0, 0);\r\n        }\r\n    }\r\n}\r\n\r\nfunction centerObject() {\r\n    modelPosition = { x: 0, y: 0, z: 0 };\r\n    updateModelPosition();\r\n}\r\n\r\nfunction updateRenderSize(data) {\r\n    try {\r\n        if (!renderer || !camera) return;\r\n        \r\n        const width = Math.max(1, Math.floor(data.width || 1));\r\n        const height = Math.max(1, Math.floor(data.height || 1));\r\n        // Track viewport size for overlay\r\n        viewportWidth = width;\r\n        viewportHeight = height;\r\n        \r\n        // Update renderer size (this is for the offscreen canvas)\r\n        renderer.setSize(width, height, false);\r\n        \r\n        // CRITICAL: Update camera aspect ratio to prevent skewing\r\n        camera.aspect = width / height;\r\n        camera.updateProjectionMatrix();\r\n\r\n        // Update overlay ortho camera to match new pixel size\r\n        if (overlayCamera) {\r\n            overlayCamera.left = 0;\r\n            overlayCamera.right = Math.max(1, viewportWidth);\r\n            overlayCamera.top = Math.max(1, viewportHeight);\r\n            overlayCamera.bottom = 0;\r\n            overlayCamera.updateProjectionMatrix();\r\n        }\r\n        \r\n        // The FOV remains constant - this is key to preventing distortion\r\n        console.log(`[Z3D Worker] Render size updated: ${width}x${height}, aspect: ${camera.aspect.toFixed(2)}, FOV: ${camera.fov}\xB0`);\r\n        \r\n    } catch (err) {\r\n        console.error('[Z3D Worker] Failed to update render size:', err);\r\n    }\r\n}\r\n\r\n// Viewport settings\r\nfunction updateViewportSetting(data) {\r\n    // Accept legacy shape { setting: {name,value} } and new shape { key, value }\r\n    let name, value;\r\n    if (data && data.setting) ({ name, value } = data.setting);\r\n    else if (data && data.key) { name = data.key; value = data.value; }\r\n    else return;\r\n    \r\n    switch (name) {\r\n        case 'background':\r\n            if (scene) scene.background = new THREE.Color(value);\r\n            break;\r\n            \r\n        case 'wireframe':\r\n            wireframeMode = value;\r\n            if (currentModel) {\r\n                currentModel.traverse((child) => {\r\n                    if (child.isMesh && child.material) {\r\n                        child.material.wireframe = value;\r\n                        child.material.needsUpdate = true;\r\n                    }\r\n                });\r\n            }\r\n            break;\r\n            \r\n        case 'showWorldGrid':\r\n            if (worldGrid) worldGrid.visible = value;\r\n            break;\r\n            \r\n        case 'showLocalGrid':\r\n            if (localGridGroup) localGridGroup.visible = value;\r\n            break;\r\n            \r\n        case 'worldGridCellPx':\r\n            worldGridCellPx = Math.max(1, +value || 1);\r\n            rebuildWorldGrid();\r\n            // Snap settings use WORLD grid\r\n            if (transformGizmo && transformGizmo.setSnapConfig) {\r\n                    transformGizmo.setSnapConfig({ enabled: snapEnabled, angleDeg: snapAngleDeg, snapScale: snapScale, localGridCellPx, unitsPerCell: unitsPerCell(worldGridCellPx), origin: { x: 0, y: 0, z: 0 } });\r\n            }\r\n            break;\r\n            \r\n        case 'localGridCellPx':\r\n            localGridCellPx = Math.max(1, +value || 1);\r\n            rebuildLocalGrid();\r\n            // Snapping adheres to world grid; no change\r\n            break;\r\n        case 'worldGridPaddingPct': {\r\n            let pct = +value || 0;\r\n            if (pct > 1) pct = pct / 100;\r\n            worldGridPaddingPct = Math.max(0, pct);\r\n            rebuildWorldGrid();\r\n            break;\r\n        }\r\n        case 'localGridPaddingPct': {\r\n            let pct = +value || 0;\r\n            if (pct > 1) pct = pct / 100;\r\n            localGridPaddingPct = Math.max(0, pct);\r\n            rebuildLocalGrid();\r\n            break;\r\n        }\r\n        case 'snapAngleDeg':\r\n            snapAngleDeg = Math.max(1, +value || 1);\r\n            if (transformGizmo && transformGizmo.setSnapConfig) {\r\n                transformGizmo.setSnapConfig({ enabled: snapEnabled, angleDeg: snapAngleDeg, snapScale: snapScale, localGridCellPx, unitsPerCell: unitsPerCell(worldGridCellPx), origin: { x: 0, y: 0, z: 0 } });\r\n            }\r\n            break;\r\n        case 'snapScale':\r\n            snapScale = Math.max(0.000001, +value || 0.000001);\r\n            if (transformGizmo && transformGizmo.setSnapConfig) {\r\n                transformGizmo.setSnapConfig({ enabled: snapEnabled, angleDeg: snapAngleDeg, snapScale: snapScale, localGridCellPx, unitsPerCell: unitsPerCell(worldGridCellPx), origin: { x: 0, y: 0, z: 0 } });\r\n            }\r\n            break;\r\n    }\r\n}\r\n\r\nfunction setSnapEnabled(data) {\r\n    snapEnabled = !!(data && data.enabled);\r\n    // Inform gizmo if present\r\n    if (transformGizmo && transformGizmo.setSnapConfig) {\r\n    transformGizmo.setSnapConfig({ enabled: snapEnabled, angleDeg: snapAngleDeg, localGridCellPx, unitsPerCell: unitsPerCell(worldGridCellPx), origin: { x: 0, y: 0, z: 0 } });\r\n    }\r\n}\r\n\r\n// Node visibility\r\nfunction toggleNodeVisibility(data) {\r\n    if (!scene || !data.nodeId) return;\r\n    \r\n    const object = scene.getObjectByProperty('uuid', data.nodeId);\r\n    \r\n    if (object) {\r\n        object.visible = data.visible;\r\n        \r\n        if (object.traverse) {\r\n            object.traverse((child) => {\r\n                if (child.isMesh || child.isLight) {\r\n                    child.visible = data.visible;\r\n                }\r\n            });\r\n        }\r\n        \r\n        // Trigger skinned mesh update to reflect visibility change\r\n        if (skinnedMeshSyncEnabled) {\r\n            sendSkinnedMeshUpdate();\r\n        }\r\n        \r\n        self.postMessage({\r\n            type: 'NODE_VISIBILITY_UPDATED',\r\n            data: {\r\n                nodeId: data.nodeId,\r\n                visible: data.visible,\r\n                success: true\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n// Animation handling\r\nfunction initializeAnimations(gltf) {\r\n    if (!gltf.animations || gltf.animations.length === 0) return;\r\n    \r\n    animations = gltf.animations;\r\n    \r\n    if (currentModel) {\r\n        animationMixer = new THREE.AnimationMixer(currentModel);\r\n        \r\n        if (animations.length > 0) {\r\n            selectAnimationByIndex(0);\r\n        }\r\n        \r\n        self.postMessage({\r\n            type: 'ANIMATIONS_READY',\r\n            data: {\r\n                count: animations.length,\r\n                hasAnimations: true\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction selectAnimation(data) {\r\n    if (!animations || animations.length === 0) return;\r\n    \r\n    let animIndex = -1;\r\n    \r\n    if (data.animationId) {\r\n        animIndex = animations.findIndex(anim => \r\n            (anim.uuid || `anim_${animations.indexOf(anim)}`) === data.animationId\r\n        );\r\n    } else if (typeof data.animationIndex === 'number') {\r\n        animIndex = data.animationIndex;\r\n    }\r\n    \r\n    if (animIndex >= 0 && animIndex < animations.length) {\r\n        selectAnimationByIndex(animIndex);\r\n    }\r\n}\r\n\r\nfunction selectAnimationByIndex(index) {\r\n    if (!animationMixer || !animations || index < 0 || index >= animations.length) return;\r\n    \r\n    if (currentAnimationAction) {\r\n        currentAnimationAction.stop();\r\n        currentAnimationAction = null;\r\n    }\r\n    \r\n    const animation = animations[index];\r\n    currentAnimationAction = animationMixer.clipAction(animation);\r\n    currentAnimationAction.loop = animationLoop ? THREE.LoopRepeat : THREE.LoopOnce;\r\n    currentAnimationAction.timeScale = animationSpeed;\r\n    \r\n    self.postMessage({\r\n        type: 'ANIMATION_SELECTED',\r\n        data: {\r\n            animationId: animation.uuid || `anim_${index}`,\r\n            animationIndex: index,\r\n            name: animation.name || `Animation ${index + 1}`,\r\n            duration: animation.duration\r\n        }\r\n    });\r\n}\r\n\r\nfunction restoreAnimationState(animationState) {\r\n    if (!animationMixer || !animations || !animationState) return;\r\n    \r\n    console.log('[Z3D Worker] Restoring animation state:', animationState);\r\n    \r\n    // Restore animation selection\r\n    if (animationState.selectedIndex !== undefined && animationState.selectedIndex >= 0) {\r\n        selectAnimationByIndex(animationState.selectedIndex);\r\n        \r\n        // Restore animation time\r\n        if (currentAnimationAction && animationState.currentTime !== undefined) {\r\n            currentAnimationAction.enabled = true;\r\n            currentAnimationAction.setEffectiveWeight(1.0);\r\n            currentAnimationAction.setEffectiveTimeScale(animationSpeed);\r\n            currentAnimationAction.play();\r\n            currentAnimationAction.paused = true; // Start paused\r\n            \r\n            // Set the time\r\n            animationMixer.setTime(animationState.currentTime);\r\n            animationMixer.update(0);\r\n            \r\n            // Update model world matrix\r\n            if (currentModel) {\r\n                currentModel.updateMatrixWorld(true);\r\n            }\r\n            \r\n            // Send skinned mesh update with restored pose\r\n            if (skinnedMeshSyncEnabled) {\r\n                lastSkinnedMeshUpdate = 0;\r\n                sendSkinnedMeshUpdate();\r\n            }\r\n            \r\n            console.log(`[Z3D Worker] Restored animation to time ${animationState.currentTime}`);\r\n        }\r\n    }\r\n    \r\n    // Restore animation settings\r\n    if (animationState.loop !== undefined) {\r\n        animationLoop = animationState.loop;\r\n        if (currentAnimationAction) {\r\n            currentAnimationAction.loop = animationLoop ? THREE.LoopRepeat : THREE.LoopOnce;\r\n        }\r\n    }\r\n    \r\n    if (animationState.speed !== undefined) {\r\n        animationSpeed = animationState.speed;\r\n        if (currentAnimationAction) {\r\n            currentAnimationAction.timeScale = animationSpeed;\r\n        }\r\n    }\r\n    \r\n    // Note: We start paused - the animation controls will handle play state\r\n    isAnimationPlaying = false;\r\n}\r\n\r\nfunction playAnimation(data) {\r\n    if (!currentAnimationAction) return;\r\n    \r\n    if (data.loop !== undefined) {\r\n        animationLoop = data.loop;\r\n        currentAnimationAction.loop = animationLoop ? THREE.LoopRepeat : THREE.LoopOnce;\r\n        currentAnimationAction.clampWhenFinished = !animationLoop;\r\n    }\r\n    \r\n    if (data.speed !== undefined) {\r\n        animationSpeed = data.speed;\r\n        currentAnimationAction.timeScale = animationSpeed;\r\n    }\r\n    \r\n    if (currentAnimationAction.paused) {\r\n        currentAnimationAction.paused = false;\r\n    } else {\r\n        const duration = currentAnimationAction.getClip().duration;\r\n        const currentTime = currentAnimationAction.time;\r\n        \r\n        if (currentTime >= duration - 0.001 && !animationLoop) {\r\n            currentAnimationAction.stop();\r\n            currentAnimationAction.reset();\r\n            currentAnimationAction.time = 0;\r\n        }\r\n        \r\n        currentAnimationAction.enabled = true;\r\n        currentAnimationAction.setEffectiveWeight(1.0);\r\n        currentAnimationAction.setEffectiveTimeScale(animationSpeed);\r\n        currentAnimationAction.play();\r\n    }\r\n    \r\n    isAnimationPlaying = true;\r\n    animationClock.start();\r\n    \r\n    self.postMessage({\r\n        type: 'ANIMATION_PLAYING',\r\n        data: {\r\n            isPlaying: true,\r\n            loop: animationLoop,\r\n            speed: animationSpeed\r\n        }\r\n    });\r\n}\r\n\r\nfunction pauseAnimation() {\r\n    if (!currentAnimationAction) return;\r\n    \r\n    currentAnimationAction.paused = true;\r\n    isAnimationPlaying = false;\r\n    \r\n    // Send one final skinned mesh update to preserve the paused pose\r\n    if (skinnedMeshSyncEnabled) {\r\n        // Force immediate update regardless of throttling\r\n        lastSkinnedMeshUpdate = 0;\r\n        sendSkinnedMeshUpdate();\r\n    }\r\n    \r\n    self.postMessage({\r\n        type: 'ANIMATION_PAUSED',\r\n        data: { isPlaying: false }\r\n    });\r\n}\r\n\r\nfunction setAnimationLoop(data) {\r\n    animationLoop = data.loop;\r\n    if (currentAnimationAction) {\r\n        currentAnimationAction.loop = animationLoop ? THREE.LoopRepeat : THREE.LoopOnce;\r\n    }\r\n}\r\n\r\nfunction setAnimationSpeed(data) {\r\n    animationSpeed = data.speed;\r\n    if (currentAnimationAction) {\r\n        currentAnimationAction.timeScale = animationSpeed;\r\n    }\r\n}\r\n\r\nfunction seekAnimation(data) {\r\n    if (!currentAnimationAction || !animationMixer) return;\r\n    \r\n    const clip = currentAnimationAction.getClip();\r\n    const duration = clip.duration;\r\n    const targetTime = Math.max(0, Math.min(data.time, duration));\r\n    \r\n    const wasPlaying = isAnimationPlaying;\r\n    const wasPaused = currentAnimationAction.paused;\r\n    \r\n    if (!currentAnimationAction.isRunning()) {\r\n        currentAnimationAction.enabled = true;\r\n        currentAnimationAction.setEffectiveWeight(1.0);\r\n        currentAnimationAction.setEffectiveTimeScale(1.0);\r\n        currentAnimationAction.play();\r\n        currentAnimationAction.paused = true;\r\n    }\r\n    \r\n    const originalPaused = currentAnimationAction.paused;\r\n    currentAnimationAction.paused = false;\r\n    \r\n    animationMixer.setTime(targetTime);\r\n    animationMixer.update(0);\r\n    \r\n    currentAnimationAction.paused = originalPaused || !wasPlaying;\r\n    \r\n    if (currentModel) {\r\n        currentModel.updateMatrixWorld(true);\r\n    }\r\n    \r\n    if (renderer && scene && camera) {\r\n        renderer.render(scene, camera);\r\n    }\r\n    \r\n    if (wasPlaying && !wasPaused) {\r\n        currentAnimationAction.paused = false;\r\n        isAnimationPlaying = true;\r\n    } else {\r\n        currentAnimationAction.paused = true;\r\n        isAnimationPlaying = false;\r\n    }\r\n    \r\n    // Send skinned mesh update for scrubbing position\r\n    if (skinnedMeshSyncEnabled) {\r\n        // Force immediate update regardless of throttling\r\n        lastSkinnedMeshUpdate = 0;\r\n        sendSkinnedMeshUpdate();\r\n    }\r\n    \r\n    self.postMessage({\r\n        type: 'ANIMATION_UPDATE',\r\n        data: {\r\n            currentTime: targetTime,\r\n            duration: duration,\r\n            ended: targetTime >= duration && !animationLoop\r\n        }\r\n    });\r\n}\r\n\r\nfunction getAnimationTime() {\r\n    if (!currentAnimationAction) {\r\n        self.postMessage({\r\n            type: 'ANIMATION_UPDATE',\r\n            data: { currentTime: 0, ended: false }\r\n        });\r\n        return;\r\n    }\r\n    \r\n    const currentTime = currentAnimationAction.time;\r\n    const duration = currentAnimationAction.getClip().duration;\r\n    const ended = !animationLoop && currentTime >= duration;\r\n    \r\n    self.postMessage({\r\n        type: 'ANIMATION_UPDATE',\r\n        data: { currentTime, duration, ended }\r\n    });\r\n}\r\n\r\n// Texture handling\r\nfunction getTextureImage(data) {\r\n    console.log('[Z3D Worker] Getting texture image for ID:', data.textureId);\r\n    \r\n    if (!scene || !data.textureId) {\r\n        console.warn('[Z3D Worker] No scene or texture ID');\r\n        self.postMessage({\r\n            type: 'TEXTURE_IMAGE_DATA',\r\n            data: { \r\n                textureId: data.textureId, \r\n                imageData: null,\r\n                error: 'No scene or texture ID'\r\n            }\r\n        });\r\n        return;\r\n    }\r\n    \r\n    let foundTexture = null;\r\n    let foundLocation = null;\r\n    \r\n    // Search through all meshes in the scene\r\n    scene.traverse((object) => {\r\n        if (object.isMesh && object.material) {\r\n            const materials = Array.isArray(object.material) ? object.material : [object.material];\r\n            \r\n            materials.forEach(material => {\r\n                const textureProps = [\r\n                    'map', 'normalMap', 'roughnessMap', 'metalnessMap',\r\n                    'emissiveMap', 'aoMap', 'bumpMap', 'displacementMap',\r\n                    'alphaMap', 'envMap', 'lightMap'\r\n                ];\r\n                \r\n                textureProps.forEach(prop => {\r\n                    if (material[prop] && material[prop].uuid === data.textureId) {\r\n                        foundTexture = material[prop];\r\n                        foundLocation = `${material.name || 'Material'}.${prop}`;\r\n                        console.log('[Z3D Worker] Found texture at:', foundLocation);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    });\r\n    \r\n    if (!foundTexture) {\r\n        console.warn('[Z3D Worker] Texture not found for ID:', data.textureId);\r\n        self.postMessage({\r\n            type: 'TEXTURE_IMAGE_DATA',\r\n            data: { \r\n                textureId: data.textureId, \r\n                imageData: null,\r\n                error: 'Texture not found'\r\n            }\r\n        });\r\n        return;\r\n    }\r\n    \r\n    if (!foundTexture.image) {\r\n        console.warn('[Z3D Worker] Texture has no image data');\r\n        self.postMessage({\r\n            type: 'TEXTURE_IMAGE_DATA',\r\n            data: { \r\n                textureId: data.textureId, \r\n                imageData: null,\r\n                error: 'Texture has no image data'\r\n            }\r\n        });\r\n        return;\r\n    }\r\n    \r\n    try {\r\n        console.log('[Z3D Worker] Texture image type:', foundTexture.image.constructor.name);\r\n        \r\n        // Create canvas to extract image data\r\n        const canvas = new OffscreenCanvas(\r\n            foundTexture.image.width || 512,\r\n            foundTexture.image.height || 512\r\n        );\r\n        const ctx = canvas.getContext('2d');\r\n        \r\n        // Draw the image\r\n        ctx.drawImage(foundTexture.image, 0, 0);\r\n        \r\n        // Convert to blob then to data URL\r\n        canvas.convertToBlob({ type: 'image/png' }).then(blob => {\r\n            const reader = new FileReader();\r\n            reader.onloadend = () => {\r\n                console.log('[Z3D Worker] Sending texture image data');\r\n                self.postMessage({\r\n                    type: 'TEXTURE_IMAGE_DATA',\r\n                    data: {\r\n                        textureId: data.textureId,\r\n                        imageData: reader.result,\r\n                        width: canvas.width,\r\n                        height: canvas.height\r\n                    }\r\n                });\r\n            };\r\n            reader.readAsDataURL(blob);\r\n        }).catch(error => {\r\n            console.error('[Z3D Worker] Error converting texture:', error);\r\n            self.postMessage({\r\n                type: 'TEXTURE_IMAGE_DATA',\r\n                data: { \r\n                    textureId: data.textureId, \r\n                    imageData: null,\r\n                    error: error.message\r\n                }\r\n            });\r\n        });\r\n        \r\n    } catch (error) {\r\n        console.error('[Z3D Worker] Error extracting texture image:', error);\r\n        self.postMessage({\r\n            type: 'TEXTURE_IMAGE_DATA',\r\n            data: { \r\n                textureId: data.textureId, \r\n                imageData: null,\r\n                error: error.message\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Gizmo Initialization and Management\r\n */\r\nfunction initializeGizmos(data) {\r\n    console.log('[Z3D Worker] Initializing gizmos...');\r\n    \r\n    if (!scene || !camera || !renderer) {\r\n        console.warn('[Z3D Worker] Scene not ready for gizmos');\r\n        return;\r\n    }\r\n    \r\n    try {\r\n        // Viewport gizmo is handled in main thread as UI overlay\r\n        // Only initialize transform gizmo in worker\r\n\r\n        // Ensure overlay (HUD) exists for 2D screen-space indicators\r\n        if (!overlayScene) {\r\n            overlayScene = new THREE.Scene();\r\n            overlayRoot = new THREE.Group();\r\n            overlayRoot.name = 'OverlayRoot';\r\n            overlayScene.add(overlayRoot);\r\n            // Orthographic camera in pixel space (origin at center by default; we will use 0..w and 0..h)\r\n            overlayCamera = new THREE.OrthographicCamera(0, Math.max(1, viewportWidth), Math.max(1, viewportHeight), 0, -10, 10);\r\n            overlayCamera.position.set(0, 0, 10);\r\n            overlayCamera.lookAt(0, 0, 0);\r\n        }\r\n        \r\n        // Initialize transform gizmo only if it doesn't exist\r\n        if (typeof TransformGizmo !== 'undefined' && currentModel && !transformGizmo) {\r\n            transformGizmo = new TransformGizmo();\r\n            transformGizmo.initialize(scene, camera, currentModel);\r\n            if (overlayScene && overlayCamera) {\r\n                transformGizmo.setOverlay(overlayScene, overlayCamera, () => ({ width: viewportWidth, height: viewportHeight }), overlayRoot);\r\n            }\r\n            transformGizmo.setMode(gizmoMode);\r\n            transformGizmo.setSpace(gizmoSpace);\r\n            console.log('[Z3D Worker] \u2705 Transform gizmo initialized');\r\n        } else if (transformGizmo && currentModel) {\r\n            // If gizmo exists but we have a new model, update the target\r\n            if (overlayScene && overlayCamera && transformGizmo.setOverlay) {\r\n                transformGizmo.setOverlay(overlayScene, overlayCamera, () => ({ width: viewportWidth, height: viewportHeight }), overlayRoot);\r\n            }\r\n            transformGizmo.setTarget(currentModel);\r\n            console.log('[Z3D Worker] \u2705 Transform gizmo target updated');\r\n        }\r\n        \r\n        self.postMessage({\r\n            type: 'GIZMOS_READY',\r\n            data: { \r\n                transformGizmo: !!transformGizmo\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error('[Z3D Worker] Failed to initialize gizmos:', error);\r\n        self.postMessage({\r\n            type: 'ERROR',\r\n            data: { error: error.message, context: 'gizmo_initialization' }\r\n        });\r\n    }\r\n}\r\n\r\nfunction setGizmoMode(data) {\r\n    if (!transformGizmo) return;\r\n    \r\n    gizmoMode = data.mode || 'all';\r\n    transformGizmo.setMode(gizmoMode);\r\n    \r\n    console.log('[Z3D Worker] Gizmo mode set to:', gizmoMode);\r\n}\r\n\r\nfunction setGizmoSpace(data) {\r\n    if (!transformGizmo) return;\r\n    \r\n    gizmoSpace = data.space || 'world';\r\n    transformGizmo.setSpace(gizmoSpace);\r\n    \r\n    console.log('[Z3D Worker] Gizmo space set to:', gizmoSpace);\r\n}\r\n\r\nfunction setGizmoVisible(data) {\r\n    gizmoEnabled = data.visible;\r\n    \r\n    if (transformGizmo) {\r\n        transformGizmo.setVisible(gizmoEnabled);\r\n    }\r\n    \r\n    console.log('[Z3D Worker] Gizmo visibility:', gizmoEnabled);\r\n}\r\n\r\nfunction toggleGizmos(data) {\r\n    // Toggle gizmo visibility\r\n    gizmoEnabled = data.visible !== undefined ? data.visible : !gizmoEnabled;\r\n    \r\n    if (transformGizmo) {\r\n        transformGizmo.setVisible(gizmoEnabled);\r\n    }\r\n    \r\n    console.log('[Z3D Worker] Gizmos toggled:', gizmoEnabled);\r\n}\r\n\r\nfunction getModelBounds() {\r\n    // Use currentModel (wrapper group) as the target object to bound\r\n    if (!currentModel) {\r\n        self.postMessage({\r\n            type: 'MODEL_BOUNDS',\r\n            data: {\r\n                min: { x: -1, y: -1, z: -1 },\r\n                max: { x: 1, y: 1, z: 1 },\r\n                center: { x: 0, y: 0, z: 0 },\r\n                sphereRadius: Math.sqrt(3),\r\n                origin: { x: 0, y: 0, z: 0 }\r\n            }\r\n        });\r\n        return;\r\n    }\r\n\r\n    // Ensure matrices are up to date before measuring\r\n    currentModel.updateMatrixWorld(true);\r\n\r\n    // Compute bounding box and sphere for the whole model\r\n    const box = new THREE.Box3().setFromObject(currentModel);\r\n    const center = new THREE.Vector3();\r\n    box.getCenter(center);\r\n    const sphere = new THREE.Sphere();\r\n    box.getBoundingSphere(sphere);\r\n\r\n    // Compute object's world origin\r\n    const origin = new THREE.Vector3();\r\n    currentModel.getWorldPosition(origin);\r\n\r\n    // Fallback if box ended up empty (e.g., no meshes)\r\n    if (box.isEmpty()) {\r\n        box.set(\r\n            new THREE.Vector3(-1, -1, -1),\r\n            new THREE.Vector3(1, 1, 1)\r\n        );\r\n        center.set(0, 0, 0);\r\n        sphere.center.set(0, 0, 0);\r\n        sphere.radius = Math.sqrt(3);\r\n    }\r\n\r\n    // Send bounds and helpful metadata back to main thread\r\n    self.postMessage({\r\n        type: 'MODEL_BOUNDS',\r\n        data: {\r\n            min: { x: box.min.x, y: box.min.y, z: box.min.z },\r\n            max: { x: box.max.x, y: box.max.y, z: box.max.z },\r\n            center: { x: center.x, y: center.y, z: center.z },\r\n            sphereRadius: sphere.radius,\r\n            origin: { x: origin.x, y: origin.y, z: origin.z }\r\n        }\r\n    });\r\n}\r\n\r\nfunction sendRenderStats() {\r\n    if (!scene || !renderer) return;\r\n    \r\n    // Calculate scene statistics\r\n    let vertices = 0;\r\n    let triangles = 0;\r\n    \r\n    scene.traverse((object) => {\r\n        if (object.isMesh && object.geometry) {\r\n            const geom = object.geometry;\r\n            if (geom.index) {\r\n                triangles += geom.index.count / 3;\r\n            } else if (geom.attributes.position) {\r\n                triangles += geom.attributes.position.count / 3;\r\n            }\r\n            if (geom.attributes.position) {\r\n                vertices += geom.attributes.position.count;\r\n            }\r\n        }\r\n    });\r\n    \r\n    // Send render stats\r\n    self.postMessage({\r\n        type: 'RENDER_STATS',\r\n        data: {\r\n            vertices: vertices,\r\n            triangles: triangles,\r\n            drawCalls: renderer.info.render.calls || 0\r\n        }\r\n    });\r\n    \r\n    // Send scene stats\r\n    if (renderer.info && renderer.info.memory) {\r\n        self.postMessage({\r\n            type: 'SCENE_STATS',\r\n            data: {\r\n                memory: {\r\n                    geometries: renderer.info.memory.geometries || 0,\r\n                    textures: renderer.info.memory.textures || 0,\r\n                    programs: renderer.info.programs ? renderer.info.programs.length : 0\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n// Store initial positions for camera follow\r\nlet initialModelPosition = null;\r\nlet initialCameraOffset = null;\r\n\r\nfunction handleGizmoMouseDown(data) {\r\n    console.log('[Z3D Worker] handleGizmoMouseDown:', {\r\n        hasTransformGizmo: !!transformGizmo,\r\n        gizmoEnabled: gizmoEnabled,\r\n        hasCamera: !!camera,\r\n        mouseData: data\r\n    });\r\n    \r\n    if (!transformGizmo || !gizmoEnabled || !camera) {\r\n        console.warn('[Z3D Worker] Cannot handle gizmo mouse down - missing:', {\r\n            transformGizmo: !!transformGizmo,\r\n            gizmoEnabled: gizmoEnabled,\r\n            camera: !!camera\r\n        });\r\n        return;\r\n    }\r\n    \r\n    const mouse = new THREE.Vector2(data.x, data.y);\r\n    const isActive = transformGizmo.handleMouseDown(mouse, camera);\r\n    \r\n    // Store initial positions when starting a position drag\r\n    if (isActive && currentModel && transformGizmo.activeHandle?.type === 'position') {\r\n        initialModelPosition = currentModel.position.clone();\r\n        // Calculate camera offset from model\r\n        initialCameraOffset = camera.position.clone().sub(currentModel.position);\r\n        console.log('[Z3D Worker] Stored initial positions for camera follow');\r\n    // Hide only the local grid during position drag (keep axes visible)\r\n    if (localGrid) localGrid.visible = false;\r\n    }\r\n    \r\n    // Refresh snap config at drag start (WORLD grid: origin 0, step from worldGridCellPx)\r\n    if (isActive && transformGizmo && transformGizmo.setSnapConfig) {\r\n        transformGizmo.setSnapConfig({ enabled: snapEnabled, angleDeg: snapAngleDeg, localGridCellPx, unitsPerCell: unitsPerCell(worldGridCellPx), origin: { x: 0, y: 0, z: 0 } });\r\n    }\r\n    console.log('[Z3D Worker] Gizmo active after mouse down:', isActive);\r\n    \r\n    self.postMessage({\r\n        type: 'GIZMO_ACTIVE',\r\n        data: { active: isActive }\r\n    });\r\n}\r\n\r\nfunction handleGizmoMouseMove(data) {\r\n    if (!transformGizmo) return;\r\n    \r\n    const mouse = new THREE.Vector2(data.x, data.y);\r\n    const isActive = transformGizmo.handleMouseMove(mouse, camera);\r\n    \r\n    if (isActive) {\r\n        // If dragging position, keep the world grid updated to include the object + padding\r\n        if (transformGizmo.activeHandle && transformGizmo.activeHandle.type === 'position') {\r\n            const now = Date.now();\r\n            if (now - lastWorldGridRebuildTs > 100) { // throttle\r\n                rebuildWorldGrid();\r\n                lastWorldGridRebuildTs = now;\r\n            }\r\n        }\r\n        // Transform gizmo will send its own updates via postMessage\r\n        // We just need to update our local state\r\n        if (currentModel) {\r\n            // Convert Three.js position back to C3 coordinates\r\n            modelPosition.x = currentModel.position.x * unitScale;\r\n            modelPosition.y = -currentModel.position.y * unitScale;\r\n            modelPosition.z = currentModel.position.z * unitScale;\r\n            \r\n            // Convert rotation back to degrees\r\n            modelRotation.x = currentModel.rotation.x * 180 / Math.PI;\r\n            modelRotation.y = currentModel.rotation.y * 180 / Math.PI;\r\n            modelRotation.z = currentModel.rotation.z * 180 / Math.PI;\r\n            \r\n            // Update scale\r\n            // Reverse the scale calculation to get model scale from Three.js scale\r\n            modelScale.x = currentModel.scale.x / uniformScale;\r\n            modelScale.y = currentModel.scale.y / uniformScale;\r\n            modelScale.z = currentModel.scale.z / uniformScale;\r\n        }\r\n    }\r\n}\r\n\r\nfunction handleGizmoMouseUp(data) {\r\n    if (!transformGizmo) return;\r\n    \r\n    // Check if position was being dragged before releasing\r\n    const wasPositionDragged = transformGizmo.activeHandle && transformGizmo.activeHandle.type === 'position';\r\n    const currentPosition = currentModel ? currentModel.position.clone() : null;\r\n    \r\n    const wasActive = transformGizmo.handleMouseUp();\r\n\r\n    // Force final snap-to-grid on release (WORLD grid)\r\n    if (wasPositionDragged && currentModel && snapEnabled) {\r\n        const step = unitsPerCell(worldGridCellPx);\r\n        if (step > 0) {\r\n            currentModel.position.x = Math.round(currentModel.position.x / step) * step;\r\n            currentModel.position.y = Math.round(currentModel.position.y / step) * step;\r\n            currentModel.position.z = Math.round(currentModel.position.z / step) * step;\r\n            // Update internal state mirrors\r\n            modelPosition.x = currentModel.position.x * unitScale;\r\n            modelPosition.y = -currentModel.position.y * unitScale;\r\n            modelPosition.z = currentModel.position.z * unitScale;\r\n        }\r\n    }\r\n    \r\n    self.postMessage({\r\n        type: 'GIZMO_ACTIVE',\r\n        data: { active: false }\r\n    });\r\n    \r\n    // If position was dragged, update local grid and camera\r\n    if (wasPositionDragged && currentModel) {\r\n        // Update local grid position and show it again\r\n        if (localGridGroup) {\r\n            setLocalGridPosition(currentModel.position);\r\n            if (localGrid) localGrid.visible = true;\r\n        }\r\n        \r\n        // Update camera to maintain same view if follow is enabled\r\n        if (cameraFollowState.isEnabledForEditorChanges && initialModelPosition && initialCameraOffset) {\r\n            console.log('[Z3D Worker] Camera follow enabled, maintaining view');\r\n            \r\n            // Update camera position to maintain same offset\r\n            const newCameraPosition = currentModel.position.clone().add(initialCameraOffset);\r\n            camera.position.copy(newCameraPosition);\r\n            \r\n            // Update orbit target to model position\r\n            if (orbitTarget) {\r\n                orbitTarget.copy(currentModel.position);\r\n            }\r\n            \r\n            // Update camera to look at new target\r\n            camera.lookAt(currentModel.position);\r\n            \r\n            // Update orbit controls if they exist\r\n            if (orbitControls) {\r\n                orbitControls.target.copy(currentModel.position);\r\n                orbitControls.update();\r\n            }\r\n            \r\n            // Send message to main thread\r\n            self.postMessage({\r\n                type: 'UPDATE_CAMERA_FOLLOW',\r\n                data: {\r\n                    position: {\r\n                        x: camera.position.x,\r\n                        y: camera.position.y,\r\n                        z: camera.position.z\r\n                    },\r\n                    target: {\r\n                        x: currentModel.position.x,\r\n                        y: currentModel.position.y,\r\n                        z: currentModel.position.z\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        \r\n        // Clear stored positions\r\n        initialModelPosition = null;\r\n        initialCameraOffset = null;\r\n    }\r\n}\r\n\r\nfunction handlePositionDragEnded(data) {\r\n    if (!data || !data.position) return;\r\n    \r\n    // Update local grid position to match the new object position\r\n    if (localGridGroup) {\r\n        localGridGroup.position.set(\r\n            data.position.x,\r\n            data.position.y,\r\n            data.position.z\r\n        );\r\n    }\r\n    \r\n    // If camera follow is enabled and we have a delta, update camera\r\n    if (data.delta && cameraFollowState.isEnabledForEditorChanges && camera) {\r\n        console.log('[Z3D Worker] Camera follow enabled, moving camera by delta:', data.delta);\r\n        \r\n        // Move the camera by the same delta to maintain the view\r\n        camera.position.x += data.delta.x;\r\n        camera.position.y += data.delta.y;\r\n        camera.position.z += data.delta.z;\r\n        \r\n        // Update orbit target to the new object position\r\n        if (orbitTarget) {\r\n            orbitTarget.set(data.position.x, data.position.y, data.position.z);\r\n        }\r\n        \r\n        // Update orbit controls\r\n        if (orbitControls) {\r\n            orbitControls.target.set(data.position.x, data.position.y, data.position.z);\r\n            orbitControls.update();\r\n        }\r\n        \r\n        // Send the updated camera state to main thread\r\n        self.postMessage({\r\n            type: 'UPDATE_CAMERA_FOLLOW',\r\n            data: {\r\n                delta: data.delta,\r\n                target: data.position,\r\n                cameraPosition: {\r\n                    x: camera.position.x,\r\n                    y: camera.position.y,\r\n                    z: camera.position.z\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction animateCameraTo(data) {\r\n    if (!camera || !data) {\r\n        console.error('[Z3D Worker] Cannot animate camera - camera:', !!camera, 'data:', !!data);\r\n        return;\r\n    }\r\n    \r\n    const { position, target, upVector, duration, viewName } = data;\r\n    \r\n    // IMPORTANT: Use provided target, or current orbit target, or current model position\r\n    let cameraTarget;\r\n    if (target) {\r\n        // Explicit target provided (e.g., from viewport gizmo maintaining current target)\r\n        cameraTarget = target;\r\n    } else if (currentModel) {\r\n        // Use current model position as target\r\n        cameraTarget = [\r\n            currentModel.position.x,\r\n            currentModel.position.y,\r\n            currentModel.position.z\r\n        ];\r\n    } else if (orbitTarget) {\r\n        // Fall back to orbit target\r\n        cameraTarget = orbitTarget.toArray();\r\n    } else {\r\n        // Last resort: origin\r\n        cameraTarget = [0, 0, 0];\r\n    }\r\n    \r\n    console.log(`[Z3D Worker] Animating camera to ${viewName} view:`, {\r\n        position: position,\r\n        target: cameraTarget,\r\n        upVector: upVector\r\n    });\r\n    \r\n    // Set the camera up vector if provided (aligns screen-up for specific views like Top/Bottom)\r\n    if (upVector) {\r\n        camera.up.set(upVector[0], upVector[1], upVector[2]);\r\n    } else {\r\n        // Default up vector for C3 coordinate system\r\n        camera.up.set(0, 0, 1);\r\n    }\r\n    \r\n    // Set the new camera position (distance preserved by the caller)\r\n    if (position) {\r\n        camera.position.set(position[0], position[1], position[2]);\r\n    }\r\n    \r\n    // Update orbit target and camera look-at\r\n    const targetVec = new THREE.Vector3(cameraTarget[0], cameraTarget[1], cameraTarget[2]);\r\n    \r\n    if (orbitTarget) {\r\n        orbitTarget.copy(targetVec);\r\n    }\r\n    \r\n    // Make camera look at target\r\n    camera.lookAt(targetVec);\r\n    \r\n    // Update orbit controls if they exist\r\n    if (orbitControls) {\r\n        orbitControls.target.copy(targetVec);\r\n        orbitControls.update();\r\n    }\r\n    \r\n    camera.updateMatrixWorld();\r\n    \r\n    // Send message to main thread to update OrbitControls\r\n    self.postMessage({\r\n        type: 'CAMERA_SNAP_TO_VIEW',\r\n        data: {\r\n            position: position,\r\n            target: cameraTarget,  // Send the actual target used\r\n            upVector: upVector,\r\n            viewName: viewName\r\n        }\r\n    });\r\n    \r\n    // IMPORTANT: restore world Z-up after establishing the snapped orientation\r\n    camera.up.set(0, 0, 1);\r\n    if (orbitControls) {\r\n        orbitControls.object.up.set(0, 0, 1);\r\n        orbitControls.update();\r\n    }\r\n\r\n    self.postMessage({\r\n        type: 'CAMERA_ANIMATION_COMPLETE',\r\n        data: { viewName }\r\n    });\r\n}\r\n\r\n// Render loop\r\nfunction startRenderLoop() {\r\n    if (!renderer || !scene || !camera) return;\r\n    \r\n    let statsUpdateCounter = 0;\r\n    \r\n    function animate() {\r\n        animationId = requestAnimationFrame(animate);\r\n        \r\n        try {\r\n            // Update orbit controls FIRST (unless camera is animating)\r\n            if (orbitControls && !isCameraAnimating) {\r\n                orbitControls.update();\r\n            }\r\n\r\n            // Send camera quaternion to main thread for viewport gizmo\r\n            if (camera && !this._lastQuaternionUpdate || Date.now() - this._lastQuaternionUpdate > 16) {\r\n                this._lastQuaternionUpdate = Date.now();\r\n                self.postMessage({\r\n                    type: 'CAMERA_QUATERNION_UPDATE',\r\n                    data: { quaternion: camera.quaternion.toArray() }\r\n                });\r\n            }\r\n            \r\n            // Send render stats periodically (every 30 frames)\r\n            statsUpdateCounter++;\r\n            if (statsUpdateCounter >= 30) {\r\n                statsUpdateCounter = 0;\r\n                sendRenderStats();\r\n            }\r\n\r\n            // Update transform gizmo\r\n            if (transformGizmo) {\r\n                transformGizmo.update();\r\n            }\r\n\r\n            // Update animations\r\n            if (animationMixer && currentAnimationAction && isAnimationPlaying && !currentAnimationAction.paused) {\r\n                const delta = animationClock.getDelta();\r\n                const prevTime = currentAnimationAction.time;\r\n                const duration = currentAnimationAction.getClip().duration;\r\n                \r\n                animationMixer.update(delta);\r\n                \r\n                // Send skinned mesh update if enabled\r\n                if (skinnedMeshSyncEnabled) {\r\n                    sendSkinnedMeshUpdate();\r\n                }\r\n                \r\n                const newTime = currentAnimationAction.time;\r\n                \r\n                self.postMessage({\r\n                    type: 'ANIMATION_UPDATE',\r\n                    data: {\r\n                        currentTime: newTime,\r\n                        duration: duration,\r\n                        ended: false\r\n                    }\r\n                });\r\n                \r\n                if (!animationLoop && prevTime < duration && newTime >= duration - 0.001) {\r\n                    isAnimationPlaying = false;\r\n                    currentAnimationAction.paused = true;\r\n                    currentAnimationAction.time = duration;\r\n                    \r\n                    animationMixer.setTime(duration);\r\n                    animationMixer.update(0);\r\n                    \r\n                    self.postMessage({\r\n                        type: 'ANIMATION_UPDATE',\r\n                        data: {\r\n                            currentTime: duration,\r\n                            duration: duration,\r\n                            ended: true\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n            \r\n            \r\n            // Render scene\r\n            renderer.render(scene, camera);\r\n\r\n            // Render overlay HUD on top\r\n            if (overlayScene && overlayCamera) {\r\n                // Ensure depth buffer does not occlude overlay and avoid clearing color on second pass\r\n                const prevAutoClear = renderer.autoClear;\r\n                renderer.autoClear = false;\r\n                renderer.clearDepth();\r\n                renderer.render(overlayScene, overlayCamera);\r\n                renderer.autoClear = prevAutoClear;\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.error('[Z3D Worker] Render error:', error);\r\n        }\r\n    }\r\n    \r\n    animate();\r\n}\r\n\r\nfunction stopRenderLoop() {\r\n    if (animationId) {\r\n        cancelAnimationFrame(animationId);\r\n        animationId = null;\r\n    }\r\n}\r\n\r\n// Cleanup\r\n// Cleanup\r\nself.addEventListener('beforeunload', () => {\r\n    stopRenderLoop();\r\n    \r\n    // Cleanup transform gizmo only (viewport gizmo is in main thread)\r\n    \r\n    if (transformGizmo) {\r\n        transformGizmo.dispose();\r\n        transformGizmo = null;\r\n    }\r\n    \r\n    if (renderer) {\r\n        renderer.dispose();\r\n    }\r\n});\r\n\r\nconsole.log('[Z3D Worker] \u2705 Worker ready');\r\nself.postMessage({\r\n    type: 'WORKER_READY',\r\n    data: { timestamp: Date.now(), version: 'cleaned-unified' }\r\n});",
        "sceneDataCollector": "/* FILE: editor/z3d-object-editor/templates/scripts/workers/scene-data-collector.js */\r\n/* Scene Data Collection for Three.js - Fixed version with proper error handling */\r\n\r\n// Store the loaded GLTF data globally within this module\r\nlet loadedGLTF = null;\r\n\r\n/**\r\n * Set the GLTF data for collection\r\n */\r\nfunction setLoadedGLTF(gltf) {\r\n    loadedGLTF = gltf;\r\n    console.log('[SceneDataCollector] GLTF data stored');\r\n}\r\n\r\n/**\r\n * Collect complete scene data aligned with Three.js concepts\r\n * Removes Babylon.js specific concepts and adds Three.js specific ones\r\n */\r\n/**\r\n * Collect complete scene data aligned with Three.js concepts\r\n */\r\nfunction collectSceneData(scene, currentModel) {\r\n    console.log('[SceneDataCollector] Collecting complete scene data...');\r\n    \r\n    const data = {\r\n        nodes: null,\r\n        materials: new Map(),\r\n        textures: new Map(),\r\n        animations: [],\r\n        skeletons: [],\r\n        lights: [],\r\n        cameras: [],\r\n        geometries: new Map(),\r\n        meshes: [],\r\n        groups: [],\r\n        helpers: [],\r\n        fog: null,\r\n        environment: null,\r\n        postProcessing: [],\r\n    };\r\n    \r\n    try {\r\n        // Collect the main scene hierarchy\r\n        if (scene) {\r\n            data.nodes = collectNodeHierarchy(scene);\r\n            \r\n            // Collect scene-level properties\r\n            if (scene.fog) {\r\n                data.fog = {\r\n                    type: scene.fog.isFog ? 'Fog' : scene.fog.isFogExp2 ? 'FogExp2' : 'Unknown',\r\n                    color: scene.fog.color ? scene.fog.color.getHex() : null,\r\n                    near: scene.fog.near,\r\n                    far: scene.fog.far,\r\n                    density: scene.fog.density\r\n                };\r\n            }\r\n            \r\n            if (scene.environment) {\r\n                data.environment = {\r\n                    texture: scene.environment ? scene.environment.uuid : null,\r\n                    mapping: scene.environment ? scene.environment.mapping : null\r\n                };\r\n            }\r\n        }\r\n        \r\n        // Collect animations from GLTF\r\n        if (loadedGLTF && loadedGLTF.animations) {\r\n            data.animations = collectAnimations(loadedGLTF.animations);\r\n            console.log(`[SceneDataCollector] Found ${data.animations.length} animations`);\r\n        }\r\n        \r\n        // Also check for animations in the scene mixer\r\n        if (loadedGLTF && loadedGLTF.mixer) {\r\n            data.animationMixer = {\r\n                timeScale: loadedGLTF.mixer.timeScale,\r\n                clipCount: loadedGLTF.mixer._actions ? loadedGLTF.mixer._actions.length : 0\r\n            };\r\n        }\r\n        \r\n        // FIRST: Collect actual texture objects from the scene\r\n        const actualTextures = new Map();\r\n        \r\n        scene.traverse((object) => {\r\n            if (object.isMesh && object.material) {\r\n                const materials = Array.isArray(object.material) ? object.material : [object.material];\r\n                \r\n                materials.forEach(material => {\r\n                    // Check for actual texture objects\r\n                    const textureProps = [\r\n                        'map', 'normalMap', 'roughnessMap', 'metalnessMap',\r\n                        'emissiveMap', 'aoMap', 'bumpMap', 'displacementMap',\r\n                        'alphaMap', 'envMap', 'lightMap', 'specularMap',\r\n                        'clearcoatMap', 'clearcoatNormalMap', 'clearcoatRoughnessMap'\r\n                    ];\r\n                    \r\n                    textureProps.forEach(prop => {\r\n                        const texture = material[prop];\r\n                        // Check if it's an actual texture object (not a string UUID)\r\n                        if (texture && typeof texture === 'object' && texture.isTexture) {\r\n                            if (!actualTextures.has(texture.uuid)) {\r\n                                actualTextures.set(texture.uuid, {\r\n                                    texture: texture,\r\n                                    materialName: material.name,\r\n                                    property: prop\r\n                                });\r\n                                console.log(`[SceneDataCollector] Found actual texture: ${prop} from ${material.name}, UUID: ${texture.uuid}`);\r\n                            }\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        });\r\n        \r\n        // Convert actual textures to serializable data\r\n        actualTextures.forEach(({texture, materialName, property}, uuid) => {\r\n            try {\r\n                const textureData = {\r\n                    id: uuid,\r\n                    uuid: uuid,\r\n                    name: texture.name || `${materialName || 'Material'} - ${property}`,\r\n                    type: property,\r\n                    materialName: materialName || 'Unnamed Material',\r\n                    className: texture.constructor.name,\r\n                    image: null,\r\n                    // Texture properties\r\n                    wrapS: texture.wrapS || 1001,\r\n                    wrapT: texture.wrapT || 1001,\r\n                    repeat: texture.repeat ? {\r\n                        x: texture.repeat.x || 1,\r\n                        y: texture.repeat.y || 1\r\n                    } : { x: 1, y: 1 },\r\n                    offset: texture.offset ? {\r\n                        x: texture.offset.x || 0,\r\n                        y: texture.offset.y || 0\r\n                    } : { x: 0, y: 0 },\r\n                    center: texture.center ? {\r\n                        x: texture.center.x || 0,\r\n                        y: texture.center.y || 0\r\n                    } : { x: 0, y: 0 },\r\n                    rotation: texture.rotation || 0,\r\n                    magFilter: texture.magFilter || 1006,\r\n                    minFilter: texture.minFilter || 1008,\r\n                    anisotropy: texture.anisotropy || 1,\r\n                    format: texture.format || 1023,\r\n                    encoding: texture.encoding || 3000,\r\n                    generateMipmaps: texture.generateMipmaps !== undefined ? texture.generateMipmaps : true,\r\n                    flipY: texture.flipY !== undefined ? texture.flipY : true\r\n                };\r\n                \r\n                // Check for image data\r\n                if (texture.image) {\r\n                    textureData.image = {\r\n                        width: texture.image.width || 0,\r\n                        height: texture.image.height || 0,\r\n                        hasData: true\r\n                    };\r\n                    console.log(`[SceneDataCollector] Texture has image: ${textureData.image.width}x${textureData.image.height}`);\r\n                }\r\n                \r\n                data.textures.set(uuid, textureData);\r\n                console.log(`[SceneDataCollector] Added texture: ${textureData.name} (ID: ${uuid})`);\r\n                \r\n            } catch (err) {\r\n                console.error('[SceneDataCollector] Error processing texture:', err);\r\n            }\r\n        });\r\n        \r\n        // Traverse scene to collect other objects\r\n        scene.traverse((object) => {\r\n            try {\r\n                // Collect materials\r\n                if (object.isMesh && object.material) {\r\n                    const materials = Array.isArray(object.material) ? object.material : [object.material];\r\n                    materials.forEach(mat => {\r\n                        if (!data.materials.has(mat.uuid)) {\r\n                            data.materials.set(mat.uuid, collectMaterialData(mat));\r\n                        }\r\n                    });\r\n                    \r\n                    // Add to meshes array\r\n                    data.meshes.push({\r\n                        id: object.uuid,\r\n                        name: object.name,\r\n                        vertexCount: object.geometry ? \r\n                            (object.geometry.attributes.position ? object.geometry.attributes.position.count : 0) : 0,\r\n                        materialCount: materials.length\r\n                    });\r\n                }\r\n                \r\n                // Collect geometries\r\n                if (object.isMesh && object.geometry) {\r\n                    if (!data.geometries.has(object.geometry.uuid)) {\r\n                        data.geometries.set(object.geometry.uuid, collectGeometryData(object.geometry));\r\n                    }\r\n                }\r\n                \r\n                // Collect groups\r\n                if (object.isGroup && !object.isMesh && !object.isLight && !object.isCamera) {\r\n                    data.groups.push({\r\n                        id: object.uuid,\r\n                        name: object.name || 'Group',\r\n                        childCount: object.children.length\r\n                    });\r\n                }\r\n                \r\n                // Collect lights\r\n                if (object.isLight) {\r\n                    data.lights.push(collectLightData(object));\r\n                }\r\n                \r\n                // Collect cameras\r\n                if (object.isCamera) {\r\n                    data.cameras.push(collectCameraData(object));\r\n                }\r\n                \r\n                // Collect skeletons\r\n                if (object.isSkinnedMesh && object.skeleton) {\r\n                    const skeletonData = collectSkeletonData(object.skeleton);\r\n                    const exists = data.skeletons.some(s => s.id === skeletonData.id);\r\n                    if (!exists) {\r\n                        data.skeletons.push(skeletonData);\r\n                    }\r\n                }\r\n                \r\n                // Collect helpers\r\n                if (object.type && (\r\n                    object.type.includes('Helper') || \r\n                    object.type === 'GridHelper' || \r\n                    object.type === 'AxesHelper' ||\r\n                    object.type === 'BoxHelper' ||\r\n                    object.type === 'PlaneHelper' ||\r\n                    object.type === 'ArrowHelper'\r\n                )) {\r\n                    data.helpers.push({\r\n                        id: object.uuid,\r\n                        name: object.name || object.type,\r\n                        type: object.type,\r\n                        visible: object.visible\r\n                    });\r\n                }\r\n            } catch (err) {\r\n                console.warn(`[SceneDataCollector] Error processing object ${object.name}:`, err);\r\n            }\r\n        });\r\n        \r\n        // DON'T collect textures from materials anymore since they only have UUID strings\r\n        // Comment out or remove this:\r\n        /*\r\n        data.materials.forEach(material => {\r\n            console.log('[SceneDataCollector] Processing material:', {\r\n                name: material.name,\r\n                type: material.type,\r\n                hasMap: 'map' in material,\r\n                mapValue: material.map,\r\n                hasNormalMap: 'normalMap' in material,\r\n                normalMapValue: material.normalMap\r\n            });\r\n            collectTexturesFromMaterial(material, data.textures);\r\n        });\r\n        */\r\n        \r\n        // Add LOD information if present\r\n        const lodObjects = [];\r\n        scene.traverse((object) => {\r\n            if (object.isLOD) {\r\n                lodObjects.push({\r\n                    id: object.uuid,\r\n                    name: object.name || 'LOD',\r\n                    levels: object.levels.length\r\n                });\r\n            }\r\n        });\r\n        \r\n        if (lodObjects.length > 0) {\r\n            data.lods = lodObjects;\r\n        }\r\n        \r\n    } catch (error) {\r\n        console.error('[SceneDataCollector] Error during scene traversal:', error);\r\n    }\r\n    \r\n    // Convert Maps to Arrays for serialization\r\n    const serializedData = {\r\n        nodes: data.nodes,\r\n        materials: Array.from(data.materials.values()),\r\n        textures: Array.from(data.textures.values()),\r\n        animations: data.animations,\r\n        skeletons: data.skeletons,\r\n        lights: data.lights,\r\n        cameras: data.cameras,\r\n        geometries: Array.from(data.geometries.values()),\r\n        meshes: data.meshes,\r\n        groups: data.groups,\r\n        helpers: data.helpers,\r\n        lods: data.lods || [],\r\n        fog: data.fog,\r\n        environment: data.environment,\r\n        animationMixer: data.animationMixer,\r\n        stats: {\r\n            totalNodes: countNodes(data.nodes),\r\n            totalMaterials: data.materials.size,\r\n            totalTextures: data.textures.size,\r\n            totalAnimations: data.animations.length,\r\n            totalSkeletons: data.skeletons.length,\r\n            totalLights: data.lights.length,\r\n            totalCameras: data.cameras.length,\r\n            totalGeometries: data.geometries.size,\r\n            totalMeshes: data.meshes.length,\r\n            totalGroups: data.groups.length,\r\n            totalHelpers: data.helpers.length,\r\n            totalLODs: data.lods ? data.lods.length : 0,\r\n            totalVertices: calculateTotalVertices(data.geometries),\r\n            totalTriangles: calculateTotalTriangles(data.geometries)\r\n        }\r\n    };\r\n    \r\n    console.log('[SceneDataCollector] Scene data collected:', serializedData.stats);\r\n    return serializedData;\r\n}\r\n\r\n/**\r\n * Collect node hierarchy with proper classification\r\n */\r\nfunction collectNodeHierarchy(node, depth = 0) {\r\n    const nodeData = {\r\n        id: node.uuid,\r\n        name: node.name || 'Unnamed',\r\n        type: getNodeType(node),\r\n        className: node.constructor.name, // Actual Three.js class name\r\n        visible: node.visible,\r\n        castShadow: node.castShadow,\r\n        receiveShadow: node.receiveShadow,\r\n        frustumCulled: node.frustumCulled,\r\n        renderOrder: node.renderOrder,\r\n        layers: node.layers.mask, // Layer mask for selective rendering\r\n        position: {\r\n            x: node.position.x,\r\n            y: node.position.y,\r\n            z: node.position.z\r\n        },\r\n        rotation: {\r\n            x: node.rotation.x * 180 / Math.PI,\r\n            y: node.rotation.y * 180 / Math.PI,\r\n            z: node.rotation.z * 180 / Math.PI,\r\n            order: node.rotation.order\r\n        },\r\n        scale: {\r\n            x: node.scale.x,\r\n            y: node.scale.y,\r\n            z: node.scale.z\r\n        },\r\n        matrix: node.matrix.toArray(), // Local transform matrix\r\n        userData: JSON.parse(JSON.stringify(node.userData || {})),\r\n        children: [],\r\n        depth: depth,\r\n        // Additional properties based on type\r\n        meshInfo: null,\r\n        lightInfo: null,\r\n        cameraInfo: null,\r\n        // Reference IDs\r\n        materialId: null,\r\n        geometryId: null,\r\n        skeletonId: null\r\n    };\r\n    \r\n    // Add type-specific information\r\n    if (node.isMesh) {\r\n        nodeData.meshInfo = {\r\n            castShadow: node.castShadow,\r\n            receiveShadow: node.receiveShadow,\r\n            frustumCulled: node.frustumCulled,\r\n            renderOrder: node.renderOrder,\r\n            morphTargetInfluences: node.morphTargetInfluences ? node.morphTargetInfluences.length : 0,\r\n            morphTargetDictionary: node.morphTargetDictionary ? Object.keys(node.morphTargetDictionary).length : 0\r\n        };\r\n        \r\n        if (node.material) {\r\n            const materials = Array.isArray(node.material) ? node.material : [node.material];\r\n            nodeData.materialId = materials.map(m => m.uuid);\r\n        }\r\n        \r\n        if (node.geometry) {\r\n            nodeData.geometryId = node.geometry.uuid;\r\n            \r\n            // Add bounding box info\r\n            if (node.geometry.boundingBox) {\r\n                nodeData.meshInfo.boundingBox = {\r\n                    min: { ...node.geometry.boundingBox.min },\r\n                    max: { ...node.geometry.boundingBox.max }\r\n                };\r\n            }\r\n        }\r\n        \r\n        if (node.isSkinnedMesh && node.skeleton) {\r\n            nodeData.skeletonId = node.skeleton.uuid;\r\n        }\r\n    }\r\n    \r\n    if (node.isLight) {\r\n        nodeData.lightInfo = collectLightInfo(node);\r\n    }\r\n    \r\n    if (node.isCamera) {\r\n        nodeData.cameraInfo = collectCameraInfo(node);\r\n    }\r\n    \r\n    // Collect children and SORT them to put ModelWrapper first\r\n    if (node.children && node.children.length > 0) {\r\n        // Sort children: ModelWrapper first, then others alphabetically\r\n        const sortedChildren = [...node.children].sort((a, b) => {\r\n            // ModelWrapper always comes first\r\n            if (a.name === 'ModelWrapper') return -1;\r\n            if (b.name === 'ModelWrapper') return 1;\r\n            \r\n            // Then helpers and grids go last\r\n            const aIsHelper = a.name && (a.name.includes('Grid') || a.name.includes('Axes') || a.name.includes('Helper'));\r\n            const bIsHelper = b.name && (b.name.includes('Grid') || b.name.includes('Axes') || b.name.includes('Helper'));\r\n            \r\n            if (aIsHelper && !bIsHelper) return 1;\r\n            if (!aIsHelper && bIsHelper) return -1;\r\n            \r\n            // Everything else by name\r\n            return (a.name || '').localeCompare(b.name || '');\r\n        });\r\n        \r\n        nodeData.children = sortedChildren.map(child => \r\n            collectNodeHierarchy(child, depth + 1)\r\n        );\r\n    }\r\n    \r\n    return nodeData;\r\n}\r\n\r\n/**\r\n * Get user-friendly node type\r\n */\r\nfunction getNodeType(node) {\r\n    // Check for specific Three.js types\r\n    if (node.isScene) return 'Scene';\r\n    if (node.isSkinnedMesh) return 'SkinnedMesh';\r\n    if (node.isInstancedMesh) return 'InstancedMesh';\r\n    if (node.isMesh) return 'Mesh';\r\n    if (node.isBone) return 'Bone';\r\n    if (node.isLine) return 'Line';\r\n    if (node.isLineLoop) return 'LineLoop';\r\n    if (node.isLineSegments) return 'LineSegments';\r\n    if (node.isPoints) return 'Points';\r\n    if (node.isSprite) return 'Sprite';\r\n    if (node.isGroup) return 'Group';\r\n    if (node.isLOD) return 'LOD';\r\n    \r\n    // Lights\r\n    if (node.isLight) {\r\n        if (node.isDirectionalLight) return 'DirectionalLight';\r\n        if (node.isPointLight) return 'PointLight';\r\n        if (node.isSpotLight) return 'SpotLight';\r\n        if (node.isAmbientLight) return 'AmbientLight';\r\n        if (node.isHemisphereLight) return 'HemisphereLight';\r\n        if (node.isRectAreaLight) return 'RectAreaLight';\r\n        return 'Light';\r\n    }\r\n    \r\n    // Cameras\r\n    if (node.isCamera) {\r\n        if (node.isPerspectiveCamera) return 'PerspectiveCamera';\r\n        if (node.isOrthographicCamera) return 'OrthographicCamera';\r\n        if (node.isArrayCamera) return 'ArrayCamera';\r\n        if (node.isCubeCamera) return 'CubeCamera';\r\n        return 'Camera';\r\n    }\r\n    \r\n    // Check by constructor name\r\n    const className = node.constructor.name;\r\n    if (className === 'Object3D') return 'Object3D';\r\n    \r\n    return className || 'Unknown';\r\n}\r\n\r\n/**\r\n * Collect material data\r\n */\r\nfunction collectMaterialData(material) {\r\n    const data = {\r\n        id: material.uuid,\r\n        name: material.name || 'Unnamed Material',\r\n        type: material.type,\r\n        className: material.constructor.name,\r\n        // Common properties\r\n        visible: material.visible,\r\n        transparent: material.transparent,\r\n        opacity: material.opacity,\r\n        side: material.side,\r\n        blending: material.blending,\r\n        depthTest: material.depthTest,\r\n        depthWrite: material.depthWrite,\r\n        wireframe: material.wireframe,\r\n        vertexColors: material.vertexColors,\r\n        fog: material.fog,\r\n        // Color properties\r\n        color: material.color ? material.color.getHex() : null,\r\n        emissive: material.emissive ? material.emissive.getHex() : null,\r\n        emissiveIntensity: material.emissiveIntensity,\r\n        // PBR properties\r\n        metalness: material.metalness,\r\n        roughness: material.roughness,\r\n        // Standard properties\r\n        shininess: material.shininess,\r\n        specular: material.specular ? material.specular.getHex() : null,\r\n        // Maps\r\n        map: material.map ? material.map.uuid : null,\r\n        normalMap: material.normalMap ? material.normalMap.uuid : null,\r\n        roughnessMap: material.roughnessMap ? material.roughnessMap.uuid : null,\r\n        metalnessMap: material.metalnessMap ? material.metalnessMap.uuid : null,\r\n        emissiveMap: material.emissiveMap ? material.emissiveMap.uuid : null,\r\n        aoMap: material.aoMap ? material.aoMap.uuid : null,\r\n        bumpMap: material.bumpMap ? material.bumpMap.uuid : null,\r\n        displacementMap: material.displacementMap ? material.displacementMap.uuid : null,\r\n        alphaMap: material.alphaMap ? material.alphaMap.uuid : null,\r\n        envMap: material.envMap ? material.envMap.uuid : null,\r\n        lightMap: material.lightMap ? material.lightMap.uuid : null,\r\n        // Additional settings\r\n        alphaTest: material.alphaTest,\r\n        alphaToCoverage: material.alphaToCoverage,\r\n        userData: JSON.parse(JSON.stringify(material.userData || {}))\r\n    };\r\n    \r\n    // Shader-specific properties\r\n    if (material.isShaderMaterial) {\r\n        data.shaderInfo = {\r\n            uniforms: Object.keys(material.uniforms || {}),\r\n            vertexShader: material.vertexShader ? 'Custom' : 'Default',\r\n            fragmentShader: material.fragmentShader ? 'Custom' : 'Default'\r\n        };\r\n    }\r\n    \r\n    return data;\r\n}\r\n\r\n/**\r\n * Collect texture data from materials - FIXED VERSION\r\n */\r\nfunction collectTexturesFromMaterial(material, textureMap) {\r\n    const textureProperties = [\r\n        'map', 'normalMap', 'roughnessMap', 'metalnessMap', \r\n        'emissiveMap', 'aoMap', 'bumpMap', 'displacementMap',\r\n        'alphaMap', 'envMap', 'lightMap', 'specularMap',\r\n        'gradientMap', 'clearcoatMap', 'clearcoatNormalMap',\r\n        'clearcoatRoughnessMap'\r\n    ];\r\n    \r\n    console.log(`[SceneDataCollector] Checking material ${material.name} for textures`);\r\n    \r\n    textureProperties.forEach(prop => {\r\n        if (prop in material) {\r\n            const texture = material[prop];\r\n            console.log(`[SceneDataCollector] Material.${prop}:`, {\r\n                exists: !!texture,\r\n                value: texture,\r\n                isTexture: texture ? texture.isTexture : 'N/A',\r\n                type: texture ? typeof texture : 'N/A',\r\n                constructor: texture ? texture.constructor.name : 'N/A'\r\n            });\r\n            \r\n            if (texture) {\r\n                try {\r\n                    // Store texture with complete information\r\n                    const textureData = {\r\n                        id: textureId,  // Use the generated or existing ID\r\n                        uuid: textureId, // Also set uuid to the same value\r\n                        name: texture.name || `${material.name || 'Material'} - ${prop}`,\r\n                        type: prop,  // This should be the property name, not the texture.type\r\n                        materialName: material.name || 'Unnamed Material',\r\n                        className: texture.constructor.name,\r\n                        image: null,  // Initialize as null\r\n                        // Wrapping - with safe defaults\r\n                        wrapS: texture.wrapS || 1001,\r\n                        wrapT: texture.wrapT || 1001,\r\n                        // Safely access repeat, offset, center with defaults\r\n                        repeat: texture.repeat ? { \r\n                            x: texture.repeat.x || 1, \r\n                            y: texture.repeat.y || 1 \r\n                        } : { x: 1, y: 1 },\r\n                        offset: texture.offset ? { \r\n                            x: texture.offset.x || 0, \r\n                            y: texture.offset.y || 0 \r\n                        } : { x: 0, y: 0 },\r\n                        center: texture.center ? { \r\n                            x: texture.center.x || 0, \r\n                            y: texture.center.y || 0 \r\n                        } : { x: 0, y: 0 },\r\n                        rotation: texture.rotation || 0,\r\n                        // Filtering\r\n                        magFilter: texture.magFilter || 1006,\r\n                        minFilter: texture.minFilter || 1008,\r\n                        anisotropy: texture.anisotropy || 1,\r\n                        // Format\r\n                        format: texture.format || 1023,\r\n                        type: texture.type || 1009,  // This is the data type, keep it separate\r\n                        dataType: texture.type || 1009,  // Store as dataType to avoid confusion\r\n                        encoding: texture.encoding || 3000,\r\n                        // Mipmaps\r\n                        generateMipmaps: texture.generateMipmaps !== undefined ? texture.generateMipmaps : true,\r\n                        flipY: texture.flipY !== undefined ? texture.flipY : true,\r\n                        userData: JSON.parse(JSON.stringify(texture.userData || {}))\r\n                    };\r\n                    \r\n                    // Check if texture has image data and capture dimensions\r\n                    if (texture.image) {\r\n                        textureData.image = {\r\n                            width: texture.image.width || 0,\r\n                            height: texture.image.height || 0,\r\n                            src: texture.image.src || (texture.image.data ? 'data' : 'embedded'),\r\n                            hasData: true\r\n                        };\r\n                        \r\n                        console.log(`[SceneDataCollector] Texture ${prop} has image:`, \r\n                            `${textureData.image.width}x${textureData.image.height}`);\r\n                    }\r\n                    \r\n                    // Store the actual texture reference for later retrieval\r\n                    textureData._textureRef = texture;  // Store reference (won't be serialized)\r\n                    \r\n                    textureMap.set(textureId, textureData);\r\n                    \r\n                    console.log(`[SceneDataCollector] Added texture: ${textureData.name} (ID: ${textureData.id})`);\r\n                    \r\n                } catch (err) {\r\n                    console.warn(`[SceneDataCollector] Error collecting texture ${prop}:`, err);\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Collect geometry data\r\n */\r\nfunction collectGeometryData(geometry) {\r\n    const attributes = {};\r\n    \r\n    // Collect attribute information\r\n    for (const key in geometry.attributes) {\r\n        const attr = geometry.attributes[key];\r\n        attributes[key] = {\r\n            count: attr.count,\r\n            itemSize: attr.itemSize,\r\n            normalized: attr.normalized,\r\n            array: attr.array.constructor.name\r\n        };\r\n    }\r\n    \r\n    return {\r\n        id: geometry.uuid,\r\n        name: geometry.name || 'Unnamed Geometry',\r\n        type: geometry.type,\r\n        className: geometry.constructor.name,\r\n        attributes: attributes,\r\n        index: geometry.index ? {\r\n            count: geometry.index.count,\r\n            type: geometry.index.array.constructor.name\r\n        } : null,\r\n        groups: geometry.groups,\r\n        morphAttributes: Object.keys(geometry.morphAttributes || {}),\r\n        morphTargetsRelative: geometry.morphTargetsRelative,\r\n        boundingBox: geometry.boundingBox ? {\r\n            min: { ...geometry.boundingBox.min },\r\n            max: { ...geometry.boundingBox.max }\r\n        } : null,\r\n        boundingSphere: geometry.boundingSphere ? {\r\n            center: { ...geometry.boundingSphere.center },\r\n            radius: geometry.boundingSphere.radius\r\n        } : null,\r\n        drawRange: {\r\n            start: geometry.drawRange.start,\r\n            count: geometry.drawRange.count\r\n        },\r\n        userData: JSON.parse(JSON.stringify(geometry.userData || {}))\r\n    };\r\n}\r\n\r\n/**\r\n * Collect skeleton data\r\n */\r\nfunction collectSkeletonData(skeleton) {\r\n    return {\r\n        id: skeleton.uuid,\r\n        name: skeleton.name || 'Skeleton',\r\n        bones: skeleton.bones.map(bone => ({\r\n            id: bone.uuid,\r\n            name: bone.name || 'Bone',\r\n            type: 'Bone',\r\n            position: { x: bone.position.x, y: bone.position.y, z: bone.position.z },\r\n            rotation: { \r\n                x: bone.rotation.x * 180 / Math.PI, \r\n                y: bone.rotation.y * 180 / Math.PI, \r\n                z: bone.rotation.z * 180 / Math.PI,\r\n                order: bone.rotation.order\r\n            },\r\n            scale: { x: bone.scale.x, y: bone.scale.y, z: bone.scale.z },\r\n            parent: bone.parent ? bone.parent.name : null,\r\n            children: bone.children.map(c => c.name)\r\n        })),\r\n        boneInverses: skeleton.boneInverses.length,\r\n        boneMatrices: skeleton.boneMatrices ? skeleton.boneMatrices.length / 16 : 0, // 16 values per 4x4 matrix\r\n        userData: JSON.parse(JSON.stringify(skeleton.userData || {}))\r\n    };\r\n}\r\n\r\n/**\r\n * Collect animation data\r\n */\r\nfunction collectAnimations(animations) {\r\n    return animations.map(animation => ({\r\n        id: animation.uuid,\r\n        name: animation.name || 'Animation',\r\n        duration: animation.duration,\r\n        blendMode: animation.blendMode,\r\n        tracks: animation.tracks.map(track => ({\r\n            name: track.name,\r\n            type: track.constructor.name,\r\n            times: track.times.length,\r\n            values: track.values.length,\r\n            interpolation: track.getInterpolation ? track.getInterpolation() : 'linear',\r\n            // Parse track name to get target info\r\n            targetNode: track.name.split('.')[0],\r\n            targetProperty: track.name.split('.').slice(1).join('.')\r\n        })),\r\n        userData: JSON.parse(JSON.stringify(animation.userData || {}))\r\n    }));\r\n}\r\n\r\n/**\r\n * Collect light data\r\n */\r\nfunction collectLightData(light) {\r\n    const data = {\r\n        id: light.uuid,\r\n        name: light.name || 'Light',\r\n        type: getNodeType(light),\r\n        className: light.constructor.name,\r\n        color: light.color.getHex(),\r\n        intensity: light.intensity,\r\n        visible: light.visible,\r\n        castShadow: light.castShadow,\r\n        position: { x: light.position.x, y: light.position.y, z: light.position.z },\r\n        layers: light.layers.mask\r\n    };\r\n    \r\n    // Add type-specific properties\r\n    if (light.isDirectionalLight) {\r\n        data.target = light.target ? {\r\n            position: { \r\n                x: light.target.position.x, \r\n                y: light.target.position.y, \r\n                z: light.target.position.z \r\n            }\r\n        } : null;\r\n        data.shadow = collectShadowData(light.shadow);\r\n    }\r\n    \r\n    if (light.isSpotLight) {\r\n        data.angle = light.angle;\r\n        data.penumbra = light.penumbra;\r\n        data.decay = light.decay;\r\n        data.distance = light.distance;\r\n        data.target = light.target ? {\r\n            position: { \r\n                x: light.target.position.x, \r\n                y: light.target.position.y, \r\n                z: light.target.position.z \r\n            }\r\n        } : null;\r\n        data.shadow = collectShadowData(light.shadow);\r\n    }\r\n    \r\n    if (light.isPointLight) {\r\n        data.decay = light.decay;\r\n        data.distance = light.distance;\r\n        data.shadow = collectShadowData(light.shadow);\r\n    }\r\n    \r\n    if (light.isHemisphereLight) {\r\n        data.groundColor = light.groundColor ? light.groundColor.getHex() : null;\r\n    }\r\n    \r\n    if (light.isRectAreaLight) {\r\n        data.width = light.width;\r\n        data.height = light.height;\r\n    }\r\n    \r\n    return data;\r\n}\r\n\r\n/**\r\n * Collect light info for node\r\n */\r\nfunction collectLightInfo(light) {\r\n    return {\r\n        color: light.color ? light.color.getHex() : 0xffffff,\r\n        intensity: light.intensity,\r\n        castShadow: light.castShadow,\r\n        type: getNodeType(light)\r\n    };\r\n}\r\n\r\n/**\r\n * Collect shadow data\r\n */\r\nfunction collectShadowData(shadow) {\r\n    if (!shadow) return null;\r\n    \r\n    return {\r\n        enabled: shadow.enabled !== undefined ? shadow.enabled : true,\r\n        mapSize: {\r\n            width: shadow.mapSize.width,\r\n            height: shadow.mapSize.height\r\n        },\r\n        camera: {\r\n            near: shadow.camera.near,\r\n            far: shadow.camera.far\r\n        },\r\n        bias: shadow.bias,\r\n        normalBias: shadow.normalBias,\r\n        radius: shadow.radius,\r\n        blurSamples: shadow.blurSamples\r\n    };\r\n}\r\n\r\n/**\r\n * Collect camera data\r\n */\r\nfunction collectCameraData(camera) {\r\n    const data = {\r\n        id: camera.uuid,\r\n        name: camera.name || 'Camera',\r\n        type: getNodeType(camera),\r\n        className: camera.constructor.name,\r\n        position: { x: camera.position.x, y: camera.position.y, z: camera.position.z },\r\n        rotation: { \r\n            x: camera.rotation.x * 180 / Math.PI, \r\n            y: camera.rotation.y * 180 / Math.PI, \r\n            z: camera.rotation.z * 180 / Math.PI,\r\n            order: camera.rotation.order\r\n        },\r\n        layers: camera.layers.mask\r\n    };\r\n    \r\n    if (camera.isPerspectiveCamera) {\r\n        data.fov = camera.fov;\r\n        data.aspect = camera.aspect;\r\n        data.near = camera.near;\r\n        data.far = camera.far;\r\n        data.zoom = camera.zoom;\r\n        data.filmGauge = camera.filmGauge;\r\n        data.filmOffset = camera.filmOffset;\r\n        data.focus = camera.focus;\r\n    }\r\n    \r\n    if (camera.isOrthographicCamera) {\r\n        data.left = camera.left;\r\n        data.right = camera.right;\r\n        data.top = camera.top;\r\n        data.bottom = camera.bottom;\r\n        data.near = camera.near;\r\n        data.far = camera.far;\r\n        data.zoom = camera.zoom;\r\n    }\r\n    \r\n    return data;\r\n}\r\n\r\n/**\r\n * Collect camera info for node\r\n */\r\nfunction collectCameraInfo(camera) {\r\n    const info = {\r\n        type: getNodeType(camera)\r\n    };\r\n    \r\n    if (camera.isPerspectiveCamera) {\r\n        info.fov = camera.fov;\r\n        info.aspect = camera.aspect;\r\n        info.near = camera.near;\r\n        info.far = camera.far;\r\n    }\r\n    \r\n    if (camera.isOrthographicCamera) {\r\n        info.left = camera.left;\r\n        info.right = camera.right;\r\n        info.top = camera.top;\r\n        info.bottom = camera.bottom;\r\n        info.near = camera.near;\r\n        info.far = camera.far;\r\n    }\r\n    \r\n    return info;\r\n}\r\n\r\n/**\r\n * Calculate total vertices from all geometries\r\n */\r\nfunction calculateTotalVertices(geometries) {\r\n    let total = 0;\r\n    geometries.forEach(geo => {\r\n        if (geo.attributes && geo.attributes.position) {\r\n            total += geo.attributes.position.count;\r\n        }\r\n    });\r\n    return total;\r\n}\r\n\r\n/**\r\n * Calculate total triangles from all geometries\r\n */\r\nfunction calculateTotalTriangles(geometries) {\r\n    let total = 0;\r\n    geometries.forEach(geo => {\r\n        if (geo.index) {\r\n            total += geo.index.count / 3;\r\n        } else if (geo.attributes && geo.attributes.position) {\r\n            total += geo.attributes.position.count / 3;\r\n        }\r\n    });\r\n    return Math.floor(total);\r\n}\r\n\r\n/**\r\n * Count total nodes in hierarchy\r\n */\r\nfunction countNodes(node) {\r\n    if (!node) return 0;\r\n    let count = 1;\r\n    if (node.children) {\r\n        node.children.forEach(child => {\r\n            count += countNodes(child);\r\n        });\r\n    }\r\n    return count;\r\n}\r\n\r\n// Export functions for use in worker\r\nif (typeof self !== 'undefined') {\r\n    self.SceneDataCollector = {\r\n        setLoadedGLTF,\r\n        collectSceneData\r\n    };\r\n}",
        "viewportGizmo": "/* FILE: editor/z3d-object-editor/templates/scripts/workers/viewport-gizmo.js */\r\n/* Viewport Gizmo - Navigation cube for quick camera orientation */\r\n\r\nclass ViewportGizmo {\r\n    constructor() {\r\n        this.gizmoCanvas = null;\r\n        this.gizmoRenderer = null;\r\n        this.gizmoScene = null;\r\n        this.gizmoCamera = null;\r\n        this.gizmoGroup = null;\r\n        this.hoveredFace = null;\r\n        this.isDragging = false;\r\n        \r\n        // Face definitions for cube - C3 coordinate system (Z-up)\r\n        this.faces = {\r\n            front: { normal: [0, -1, 0], label: 'Front', color: 0x4CAF50 },\r\n            back: { normal: [0, 1, 0], label: 'Back', color: 0x2196F3 },\r\n            left: { normal: [-1, 0, 0], label: 'Left', color: 0xFF9800 },\r\n            right: { normal: [1, 0, 0], label: 'Right', color: 0xE91E63 },\r\n            top: { normal: [0, 0, 1], label: 'Top', color: 0x9C27B0 },\r\n            bottom: { normal: [0, 0, -1], label: 'Bottom', color: 0x795548 }\r\n        };\r\n        \r\n        // Corner positions for isometric views - C3 coordinate system (Z-up)\r\n        this.corners = {\r\n            frontTopRight: { position: [1, -1, 1], label: 'ISO 1' },\r\n            frontTopLeft: { position: [-1, -1, 1], label: 'ISO 2' },\r\n            backTopRight: { position: [1, 1, 1], label: 'ISO 3' },\r\n            backTopLeft: { position: [-1, 1, 1], label: 'ISO 4' }\r\n        };\r\n    }\r\n    \r\n    initialize(parentScene, parentCamera, parentRenderer) {\r\n        console.log('[ViewportGizmo] Initializing viewport gizmo as overlay...');\r\n        \r\n        // Store parent references\r\n        this.parentCamera = parentCamera;\r\n        \r\n        // Create offscreen canvas for gizmo rendering\r\n        if (typeof OffscreenCanvas !== 'undefined') {\r\n            this.gizmoCanvas = new OffscreenCanvas(196, 196);\r\n        } else {\r\n            console.warn('[ViewportGizmo] OffscreenCanvas not available, gizmo will not render');\r\n            return;\r\n        }\r\n        \r\n        // Setup gizmo's own Three.js scene\r\n        this.setupGizmoScene();\r\n        \r\n        console.log('[ViewportGizmo] \u2705 Viewport gizmo initialized (worker-side)');\r\n        \r\n        // Notify main thread to create UI overlay\r\n        self.postMessage({\r\n            type: 'VIEWPORT_GIZMO_READY',\r\n            data: { ready: true }\r\n        });\r\n    }\r\n    \r\n    setupGizmoScene() {\r\n        // Create renderer for offscreen canvas\r\n        this.gizmoRenderer = new THREE.WebGLRenderer({\r\n            canvas: this.gizmoCanvas,\r\n            alpha: true,\r\n            antialias: true\r\n        });\r\n        this.gizmoRenderer.setSize(240, 240);\r\n        this.gizmoRenderer.setClearColor(0x000000, 0);\r\n        \r\n        // Create scene\r\n        this.gizmoScene = new THREE.Scene();\r\n        \r\n        // Create camera - will be synced with main camera\r\n        this.gizmoCamera = new THREE.PerspectiveCamera(50, 1, 0.1, 100);\r\n        this.gizmoCamera.position.set(5, 5, 5);\r\n        this.gizmoCamera.up.set(0, 0, 1); // Z-up for C3 coordinate system\r\n        this.gizmoCamera.lookAt(0, 0, 0);\r\n        \r\n        // Create gizmo group\r\n        this.gizmoGroup = new THREE.Group();\r\n        this.gizmoScene.add(this.gizmoGroup);\r\n        \r\n        // Create cube faces\r\n        this.createCubeFaces();\r\n        \r\n        // Create corner spheres for isometric views\r\n        this.createCornerSpheres();\r\n        \r\n        // Create axes\r\n        this.createAxes();\r\n        \r\n        // Add lighting\r\n        const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);\r\n        this.gizmoScene.add(ambientLight);\r\n        \r\n        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.4);\r\n        directionalLight.position.set(5, -5, 5);\r\n        this.gizmoScene.add(directionalLight);\r\n    }\r\n    \r\n    createCubeFaces() {\r\n        const faceSize = 0.8;\r\n        const faceGeometry = new THREE.BoxGeometry(faceSize, 0.05, faceSize);\r\n        \r\n        Object.entries(this.faces).forEach(([key, face]) => {\r\n            const material = new THREE.MeshPhongMaterial({\r\n                color: face.color,\r\n                opacity: 0.8,\r\n                transparent: true,\r\n                emissive: face.color,\r\n                emissiveIntensity: 0.2\r\n            });\r\n            \r\n            const mesh = new THREE.Mesh(faceGeometry, material);\r\n            mesh.userData = { type: 'face', faceKey: key, ...face };\r\n            \r\n            // Position based on normal\r\n            if (face.normal[0] !== 0) {\r\n                mesh.rotation.z = Math.PI / 2;\r\n                mesh.position.x = face.normal[0] * 0.5;\r\n            } else if (face.normal[1] !== 0) {\r\n                mesh.position.y = face.normal[1] * 0.5;\r\n            } else if (face.normal[2] !== 0) {\r\n                mesh.rotation.x = Math.PI / 2;\r\n                mesh.position.z = face.normal[2] * 0.5;\r\n            }\r\n            \r\n            this.gizmoGroup.add(mesh);\r\n        });\r\n    }\r\n    \r\n    createCornerSpheres() {\r\n        const sphereGeometry = new THREE.SphereGeometry(0.12, 16, 16);\r\n        \r\n        Object.entries(this.corners).forEach(([key, corner]) => {\r\n            const material = new THREE.MeshPhongMaterial({\r\n                color: 0xFFD700,\r\n                emissive: 0xFFD700,\r\n                emissiveIntensity: 0.3\r\n            });\r\n            \r\n            const mesh = new THREE.Mesh(sphereGeometry, material);\r\n            mesh.userData = { type: 'corner', cornerKey: key, ...corner };\r\n            \r\n            // Normalize position\r\n            const pos = new THREE.Vector3(...corner.position).normalize().multiplyScalar(0.7);\r\n            mesh.position.copy(pos);\r\n            \r\n            this.gizmoGroup.add(mesh);\r\n        });\r\n    }\r\n    \r\n    createAxes() {\r\n        const axisLength = 1.2;\r\n        const axisRadius = 0.02;\r\n        \r\n        // X axis - Red\r\n        const xGeometry = new THREE.CylinderGeometry(axisRadius, axisRadius, axisLength, 8);\r\n        const xMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });\r\n        const xAxis = new THREE.Mesh(xGeometry, xMaterial);\r\n        xAxis.rotation.z = -Math.PI / 2;\r\n        xAxis.position.x = axisLength / 2;\r\n        this.gizmoGroup.add(xAxis);\r\n        \r\n        // Y axis - Green (negative for C3)\r\n        const yGeometry = new THREE.CylinderGeometry(axisRadius, axisRadius, axisLength, 8);\r\n        const yMaterial = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\r\n        const yAxis = new THREE.Mesh(yGeometry, yMaterial);\r\n        yAxis.position.y = -axisLength / 2;\r\n        this.gizmoGroup.add(yAxis);\r\n        \r\n        // Z axis - Blue\r\n        const zGeometry = new THREE.CylinderGeometry(axisRadius, axisRadius, axisLength, 8);\r\n        const zMaterial = new THREE.MeshBasicMaterial({ color: 0x0000ff });\r\n        const zAxis = new THREE.Mesh(zGeometry, zMaterial);\r\n        zAxis.rotation.x = Math.PI / 2;\r\n        zAxis.position.z = axisLength / 2;\r\n        this.gizmoGroup.add(zAxis);\r\n        \r\n        // Add axis labels\r\n        this.createAxisLabels();\r\n    }\r\n    \r\n    createAxisLabels() {\r\n        // Create sprite labels for axes\r\n        const createLabel = (text, color, position) => {\r\n            const canvas = new OffscreenCanvas(64, 64);\r\n            const ctx = canvas.getContext('2d');\r\n            \r\n            ctx.fillStyle = color;\r\n            ctx.font = 'bold 48px Arial';\r\n            ctx.textAlign = 'center';\r\n            ctx.textBaseline = 'middle';\r\n            ctx.fillText(text, 32, 32);\r\n            \r\n            const texture = new THREE.CanvasTexture(canvas);\r\n            const spriteMaterial = new THREE.SpriteMaterial({ map: texture });\r\n            const sprite = new THREE.Sprite(spriteMaterial);\r\n            sprite.scale.set(0.3, 0.3, 1);\r\n            sprite.position.copy(position);\r\n            \r\n            return sprite;\r\n        };\r\n        \r\n        this.gizmoGroup.add(createLabel('X', '#ff0000', new THREE.Vector3(1.5, 0, 0)));\r\n        this.gizmoGroup.add(createLabel('Y', '#00ff00', new THREE.Vector3(0, -1.5, 0)));\r\n        this.gizmoGroup.add(createLabel('Z', '#0000ff', new THREE.Vector3(0, 0, 1.5)));\r\n    }\r\n    \r\n    // Handle mouse events from main thread\r\n    handleMouseEvent(eventType, data) {\r\n        if (!this.gizmoScene || !this.gizmoCamera) return;\r\n        \r\n        const raycaster = new THREE.Raycaster();\r\n        const mouse = new THREE.Vector2(data.x, data.y);\r\n        \r\n        raycaster.setFromCamera(mouse, this.gizmoCamera);\r\n        const intersects = raycaster.intersectObjects(this.gizmoGroup.children);\r\n        \r\n        switch (eventType) {\r\n            case 'mousemove':\r\n                this.handleHover(intersects);\r\n                break;\r\n            case 'click':\r\n                this.handleClick(intersects);\r\n                break;\r\n            case 'mousedown':\r\n                if (!intersects.length) {\r\n                    this.isDragging = true;\r\n                }\r\n                break;\r\n            case 'mouseup':\r\n                this.isDragging = false;\r\n                break;\r\n            case 'drag':\r\n                if (this.isDragging) {\r\n                    this.gizmoGroup.rotation.z += data.deltaX * 0.01;\r\n                    this.gizmoGroup.rotation.x += data.deltaY * 0.01;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    \r\n    handleHover(intersects) {\r\n        // Reset all materials\r\n        this.gizmoGroup.children.forEach(child => {\r\n            if (child.material && child.material.emissiveIntensity !== undefined) {\r\n                child.material.emissiveIntensity = child.userData.type === 'corner' ? 0.3 : 0.2;\r\n            }\r\n        });\r\n        \r\n        // Highlight hovered object\r\n        if (intersects.length > 0) {\r\n            const object = intersects[0].object;\r\n            if (object.material && object.material.emissiveIntensity !== undefined) {\r\n                object.material.emissiveIntensity = 0.6;\r\n            }\r\n            this.hoveredFace = object.userData;\r\n            \r\n            // Notify main thread\r\n            self.postMessage({\r\n                type: 'VIEWPORT_GIZMO_HOVER',\r\n                data: { hovering: true, face: this.hoveredFace }\r\n            });\r\n        } else {\r\n            this.hoveredFace = null;\r\n            self.postMessage({\r\n                type: 'VIEWPORT_GIZMO_HOVER',\r\n                data: { hovering: false }\r\n            });\r\n        }\r\n    }\r\n    \r\n    handleClick(intersects) {\r\n        if (intersects.length > 0 && !this.isDragging) {\r\n            const object = intersects[0].object;\r\n            const clickedItem = object.userData;\r\n            \r\n            if (clickedItem.type === 'face') {\r\n                this.animateCameraToFace(clickedItem);\r\n            } else if (clickedItem.type === 'corner') {\r\n                this.animateCameraToCorner(clickedItem);\r\n            }\r\n        }\r\n    }\r\n    \r\n    animateCameraToFace(face) {\r\n        console.log(`[ViewportGizmo] Animating to ${face.label} view`);\r\n        \r\n        // Calculate target position based on face normal\r\n        const distance = 10;\r\n        const normal = new THREE.Vector3(...face.normal);\r\n        const targetPosition = normal.multiplyScalar(distance);\r\n        \r\n        // Send camera animation request (target will be preserved from current orbitTarget)\r\n        self.postMessage({\r\n            type: 'CAMERA_ANIMATE_TO',\r\n            data: {\r\n                position: targetPosition.toArray(),\r\n                // Don't specify target to use current orbit target\r\n                duration: 500,\r\n                viewName: face.label\r\n            }\r\n        });\r\n    }\r\n    \r\n    animateCameraToCorner(corner) {\r\n        console.log(`[ViewportGizmo] Animating to ${corner.label} view`);\r\n        \r\n        // Calculate isometric camera position\r\n        const distance = 10;\r\n        const pos = new THREE.Vector3(...corner.position).normalize().multiplyScalar(distance);\r\n        \r\n        self.postMessage({\r\n            type: 'CAMERA_ANIMATE_TO',\r\n            data: {\r\n                position: pos.toArray(),\r\n                // Don't specify target to use current orbit target\r\n                duration: 500,\r\n                viewName: corner.label\r\n            }\r\n        });\r\n    }\r\n    \r\n    update(parentCameraQuaternion) {\r\n        if (!this.gizmoGroup || !this.gizmoRenderer || !this.gizmoCamera) return;\r\n        \r\n        // Sync gizmo camera with main camera orientation\r\n        if (parentCameraQuaternion && this.parentCamera) {\r\n            // Copy the main camera's position relative to its target\r\n            const mainCameraDir = this.parentCamera.position.clone().normalize();\r\n            const distance = 5; // Fixed distance for gizmo camera\r\n            \r\n            // Set gizmo camera to match main camera's viewing angle\r\n            this.gizmoCamera.position.copy(mainCameraDir.multiplyScalar(distance));\r\n            this.gizmoCamera.up.copy(this.parentCamera.up);\r\n            this.gizmoCamera.lookAt(0, 0, 0);\r\n            \r\n            // Don't rotate the gizmo group - keep it aligned with world axes\r\n            this.gizmoGroup.quaternion.identity();\r\n        }\r\n        \r\n        // Render gizmo to offscreen canvas\r\n        if (this.gizmoRenderer && this.gizmoScene && this.gizmoCamera) {\r\n            this.gizmoRenderer.render(this.gizmoScene, this.gizmoCamera);\r\n            \r\n            // Get image data and send to main thread\r\n            if (this.gizmoCanvas && typeof this.gizmoCanvas.convertToBlob === 'function') {\r\n                // For browsers that support convertToBlob on OffscreenCanvas\r\n                // We'll render at a lower framerate to avoid overwhelming the message channel\r\n                if (!this._lastRenderTime || Date.now() - this._lastRenderTime > 33) { // ~30fps\r\n                    this._lastRenderTime = Date.now();\r\n                    \r\n                    // Instead of sending blob, we'll just notify that rendering is done\r\n                    // The main thread will handle its own rendering\r\n                    self.postMessage({\r\n                        type: 'VIEWPORT_GIZMO_UPDATED',\r\n                        data: { timestamp: Date.now() }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    dispose() {\r\n        if (this.gizmoRenderer) {\r\n            this.gizmoRenderer.dispose();\r\n        }\r\n        \r\n        // Dispose geometries and materials\r\n        this.gizmoGroup?.traverse((child) => {\r\n            if (child.geometry) child.geometry.dispose();\r\n            if (child.material) {\r\n                if (Array.isArray(child.material)) {\r\n                    child.material.forEach(mat => mat.dispose());\r\n                } else {\r\n                    child.material.dispose();\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n// Export for worker use\r\nif (typeof self !== 'undefined') {\r\n    self.ViewportGizmo = ViewportGizmo;\r\n}",
        "transformGizmo": "/* FILE: editor/z3d-object-editor/templates/scripts/workers/transform-gizmo.js */\r\n/* Transform Gizmo - Combined position, rotation, and scale controls */\r\n\r\nclass TransformGizmo {\r\n    constructor() {\r\n        this.gizmoGroup = null;\r\n        this.activeHandle = null;\r\n        this.isDragging = false;\r\n        this.hoveredHandle = null;\r\n        this.transformMode = 'all';\r\n        this.transformSpace = 'world';\r\n        \r\n        // Gizmo components\r\n        this.positionGizmo = null;\r\n        this.rotationGizmo = null;\r\n        this.scaleGizmo = null;\r\n        this.uniformScaleGizmo = null;\r\n        \r\n        // Rotation feedback visuals\r\n        this.rotationFeedbackGroup = null;\r\n        this.rotationStartLine = null;\r\n        this.rotationCurrentLine = null;\r\n        this.rotationPie = null;\r\n        \r\n        // Scale feedback visuals\r\n        this.scaleFeedbackGroup = null;\r\n        this.scaleFeedbackLine = null;\r\n        this.scalePlaceholderBox = null;\r\n        this.scaleInitialBoxPosition = null;\r\n        this.scaleInitialScale = null;\r\n        this.scaleClickDistance = null;\r\n        this.originalScaleBox = null;\r\n        \r\n        // Interaction state\r\n        this.dragStart = new THREE.Vector2();\r\n        this.dragCurrent = new THREE.Vector2();\r\n        this.initialTransform = {};\r\n        this.raycaster = new THREE.Raycaster();\r\n    this.positionDragStartWorld = null;\r\n        \r\n        // Rotation specific state\r\n        this.rotationStartAngle = 0;\r\n        this.rotationCurrentAngle = 0;\r\n        this.rotationAxis = null;\r\n        this.rotationPlane = null;\r\n        \r\n        // Visual settings - DOUBLED SIZE\r\n        this.colors = {\r\n            x: 0xff0000,\r\n            y: 0x00ff00,\r\n            z: 0x0000ff,\r\n            uniform: 0xffff00,\r\n            hover: 0xffffff,\r\n            inactive: 0x808080,\r\n            rotationFeedback: 0xffff00,\r\n            scaleFeedback: 0x00ffff\r\n        };\r\n        \r\n        // Optimized handle sizes - 20% larger than previous, thicker for easier selection\r\n        this.handleSize = {\r\n            position: 2.16,      // Increased by 20% from 1.8\r\n            rotation: 2.59,      // Increased by 20% from 2.16\r\n            scale: 0.22,         // Increased by 20% from 0.18\r\n            uniformScale: 0.36,  // Increased by 20% from 0.3\r\n            shaftThickness: 0.04,   // Significantly thicker for easier selection\r\n            coneSize: 0.12,      // Increased by 20% from 0.096\r\n            coneHeight: 0.29     // Increased by 20% from 0.24\r\n        };\r\n        \r\n        // Raycaster threshold for better picking\r\n        this.raycaster.params.Line = { threshold: 0.1 };\r\n\r\n        // Add position tracking for delta calculation\r\n        this.dragStartPosition = null;\r\n        this.dragEndPosition = null;\r\n\r\n        // Overlay (HUD) support\r\n        this.overlay = {\r\n            scene: null,\r\n            camera: null,\r\n            getViewportSize: null,\r\n            root: null,\r\n            group: null, // container for gizmo overlay visuals\r\n        };\r\n\r\n        // Delta label data\r\n        this.deltaLabelData = null;\r\n\r\n        // Unit conversion (C3 uses 64 pixels per world unit)\r\n        this.pixelsPerUnit = 64;\r\n\r\n        // Snap configuration (managed by worker via setSnapConfig)\r\n        this.snap = {\r\n            enabled: false,\r\n            angleDeg: 5,\r\n            snapScale: 0.1,\r\n            localGridCellPx: 32,\r\n            unitsPerCell: 1, // updated by worker using unit scale conversion\r\n            origin: new THREE.Vector3(0, 0, 0) // anchor for grid snapping in world space\r\n        };\r\n    }\r\n    \r\n    initialize(scene, camera, targetObject) {\r\n        console.log('[TransformGizmo] Initializing transform gizmo...');\r\n        \r\n        // Clean up any existing gizmos first\r\n        if (this.gizmoGroup && this.scene) {\r\n            this.dispose();\r\n        }\r\n        \r\n        this.scene = scene;\r\n        this.camera = camera;\r\n        this.targetObject = targetObject;\r\n        \r\n        // Create main gizmo group\r\n        this.gizmoGroup = new THREE.Group();\r\n        this.gizmoGroup.name = 'TransformGizmo';\r\n        \r\n        // Create rotation feedback group (separate for cleaner management)\r\n        this.rotationFeedbackGroup = new THREE.Group();\r\n        this.rotationFeedbackGroup.name = 'RotationFeedback';\r\n        this.rotationFeedbackGroup.visible = false;\r\n        \r\n        // Create scale feedback group\r\n        this.scaleFeedbackGroup = new THREE.Group();\r\n        this.scaleFeedbackGroup.name = 'ScaleFeedback';\r\n        this.scaleFeedbackGroup.visible = false;\r\n        \r\n        // Create all gizmo components\r\n        this.createPositionGizmo();\r\n        this.createRotationGizmo();\r\n        this.createScaleGizmo();\r\n        this.createUniformScaleGizmo();\r\n        this.createRotationFeedbackVisuals();\r\n        this.createScaleFeedbackVisuals();\r\n        \r\n        // Initialize delta label (doesn't require overlay)\r\n        this.createDeltaLabel();\r\n        \r\n        // Add to scene\r\n        scene.add(this.gizmoGroup);\r\n        scene.add(this.rotationFeedbackGroup);\r\n        scene.add(this.scaleFeedbackGroup);\r\n        \r\n        // Setup interaction\r\n        this.setupInteraction();\r\n        \r\n        // Update initial position\r\n        this.updateGizmoTransform();\r\n        \r\n        console.log('[TransformGizmo] \u2705 Transform gizmo initialized');\r\n    }\r\n\r\n    // Attach an overlay scene/camera for HUD drawing\r\n    setOverlay(overlayScene, overlayCamera, getViewportSize, overlayRoot) {\r\n        console.log('[Gizmo] setOverlay called:', {\r\n            overlayScene: !!overlayScene,\r\n            overlayCamera: !!overlayCamera,\r\n            getViewportSize: !!getViewportSize,\r\n            overlayRoot: !!overlayRoot\r\n        });\r\n        \r\n        this.overlay.scene = overlayScene || null;\r\n        this.overlay.camera = overlayCamera || null;\r\n        this.overlay.getViewportSize = getViewportSize || null;\r\n        this.overlay.root = overlayRoot || null;\r\n\r\n        if (this.overlay.scene && !this.overlay.group) {\r\n            this.overlay.group = new THREE.Group();\r\n            this.overlay.group.name = 'TransformGizmoOverlay';\r\n            (this.overlay.root || this.overlay.scene).add(this.overlay.group);\r\n            console.log('[Gizmo] Overlay group created and added to scene');\r\n        }\r\n    // Keep 3D feedback visible; overlay will only draw dashed line\r\n    }\r\n    \r\n    createDeltaLabel() {\r\n        // Initialize delta label data for HTML rendering in topbar\r\n        this.deltaLabelData = { text: '', visible: false };\r\n    }\r\n    \r\n    updateDeltaLabel(mouse) {\r\n        // If called with null or isDragging is false, hide the label\r\n        if (!mouse || !this.isDragging) {\r\n            // Hide the label\r\n            if (this.deltaLabelData) {\r\n                this.deltaLabelData.visible = false;\r\n                self.postMessage({\r\n                    type: 'UPDATE_DELTA_LABEL',\r\n                    data: { visible: false }\r\n                });\r\n            }\r\n            return;\r\n        }\r\n        \r\n        // Calculate deltas based on transform type\r\n        let deltaText = '';\r\n        \r\n        if (this.activeHandle.type === 'position' && this.initialTransform) {\r\n            // Convert world units to pixels and flip Y for C3 coordinates\r\n            const dx = (this.targetObject.position.x - this.initialTransform.position.x) * this.pixelsPerUnit;\r\n            const dy = -(this.targetObject.position.y - this.initialTransform.position.y) * this.pixelsPerUnit;\r\n            const dz = (this.targetObject.position.z - this.initialTransform.position.z) * this.pixelsPerUnit;\r\n            deltaText = `Position: \u0394x: ${dx.toFixed(0)}px, \u0394y: ${dy.toFixed(0)}px, \u0394z: ${dz.toFixed(0)}px`;\r\n        } else if (this.activeHandle.type === 'rotation' && this.initialTransform) {\r\n            const dx = ((this.targetObject.rotation.x - this.initialTransform.rotation.x) * 180 / Math.PI).toFixed(1);\r\n            const dy = ((this.targetObject.rotation.y - this.initialTransform.rotation.y) * 180 / Math.PI).toFixed(1);\r\n            const dz = ((this.targetObject.rotation.z - this.initialTransform.rotation.z) * 180 / Math.PI).toFixed(1);\r\n            const axis = this.activeHandle.axis;\r\n            if (axis === 'x') deltaText = `Rotation X: ${dx}\xB0`;\r\n            else if (axis === 'y') deltaText = `Rotation Y: ${dy}\xB0`;\r\n            else if (axis === 'z') deltaText = `Rotation Z: ${dz}\xB0`;\r\n        } else if (this.activeHandle.type === 'scale') {\r\n            if (this.activeHandle.axis === 'uniform') {\r\n                const scale = (this.targetObject.userData?.scale || 1.0).toFixed(3);\r\n                deltaText = `Scale: ${scale}`;\r\n            } else {\r\n                const axis = this.activeHandle.axis;\r\n                const scale = this.targetObject.scale[axis].toFixed(3);\r\n                deltaText = `Scale ${axis.toUpperCase()}: ${scale}`;\r\n            }\r\n        }\r\n        \r\n        // Send label data to main thread\r\n        this.deltaLabelData = {\r\n            text: deltaText,\r\n            visible: true\r\n        };\r\n        \r\n        self.postMessage({\r\n            type: 'UPDATE_DELTA_LABEL',\r\n            data: this.deltaLabelData\r\n        });\r\n    }\r\n    \r\n    createRotationFeedbackVisuals() {\r\n        // Start reference line (solid) - shows initial drag position\r\n        const startLineGeometry = new THREE.BufferGeometry();\r\n        const startLineVertices = new Float32Array([\r\n            0, 0, 0,  // Origin\r\n            1, 0, 0   // Will be updated to actual position\r\n        ]);\r\n        startLineGeometry.setAttribute('position', new THREE.BufferAttribute(startLineVertices, 3));\r\n        \r\n        const startLineMaterial = new THREE.LineBasicMaterial({\r\n            color: this.colors.rotationFeedback,\r\n            linewidth: 2,\r\n            depthTest: false,\r\n            depthWrite: false,\r\n            transparent: true,\r\n            opacity: 0.8\r\n        });\r\n        \r\n        this.rotationStartLine = new THREE.Line(startLineGeometry, startLineMaterial);\r\n        this.rotationStartLine.name = 'RotationStartLine';\r\n        this.rotationFeedbackGroup.add(this.rotationStartLine);\r\n        \r\n        // Current position line to circle (solid) - shows current drag position on circle\r\n        const currentLineGeometry = new THREE.BufferGeometry();\r\n        const currentLineVertices = new Float32Array([\r\n            0, 0, 0,  // Origin\r\n            1, 0, 0   // Will be updated to circle edge\r\n        ]);\r\n        currentLineGeometry.setAttribute('position', new THREE.BufferAttribute(currentLineVertices, 3));\r\n        \r\n        const currentLineMaterial = new THREE.LineBasicMaterial({\r\n            color: this.colors.rotationFeedback,\r\n            linewidth: 2,\r\n            depthTest: false,\r\n            depthWrite: false,\r\n            transparent: true,\r\n            opacity: 0.8\r\n        });\r\n        \r\n        this.rotationCurrentLine = new THREE.Line(currentLineGeometry, currentLineMaterial);\r\n        this.rotationCurrentLine.name = 'RotationCurrentLine';\r\n        this.rotationFeedbackGroup.add(this.rotationCurrentLine);\r\n        \r\n        // Pie slice (will be created dynamically)\r\n        this.rotationPie = null;\r\n        \r\n        // Note: Mouse indicator removed - now handled entirely by HUD overlay\r\n    }\r\n    \r\n    createScaleFeedbackVisuals() {\r\n        // Scale feedback line - bright line showing stretch\r\n        const lineGeometry = new THREE.BufferGeometry();\r\n        const lineVertices = new Float32Array([\r\n            0, 0, 0,  // Start position\r\n            1, 0, 0   // End position (will be updated)\r\n        ]);\r\n        lineGeometry.setAttribute('position', new THREE.BufferAttribute(lineVertices, 3));\r\n        \r\n        // Material will be updated with axis color when scale starts\r\n        const lineMaterial = new THREE.LineBasicMaterial({\r\n            color: 0xffffff,\r\n            linewidth: 3,\r\n            depthTest: false,\r\n            depthWrite: false,\r\n            transparent: true,\r\n            opacity: 0.9\r\n        });\r\n        \r\n        this.scaleFeedbackLine = new THREE.Line(lineGeometry, lineMaterial);\r\n        this.scaleFeedbackLine.name = 'ScaleFeedbackLine';\r\n        this.scaleFeedbackGroup.add(this.scaleFeedbackLine);\r\n        \r\n        // Create placeholder box that follows mouse\r\n        const boxGeometry = new THREE.BoxGeometry(\r\n            this.handleSize.scale * 1.2,  // Slightly larger than original\r\n            this.handleSize.scale * 1.2,\r\n            this.handleSize.scale * 1.2\r\n        );\r\n        const boxMaterial = new THREE.MeshBasicMaterial({\r\n            color: 0xffffff,\r\n            depthTest: false,\r\n            depthWrite: false,\r\n            transparent: true,\r\n            opacity: 1.0\r\n        });\r\n        \r\n        this.scalePlaceholderBox = new THREE.Mesh(boxGeometry, boxMaterial);\r\n        this.scalePlaceholderBox.name = 'ScalePlaceholderBox';\r\n        this.scaleFeedbackGroup.add(this.scalePlaceholderBox);\r\n        \r\n        // Create uniform scale feedback circles\r\n        // Start reference circle (where user clicked) - simple outline\r\n        this.uniformScaleStartCircle = new THREE.Line(\r\n            new THREE.BufferGeometry().setFromPoints(\r\n                new THREE.Path().absarc(0, 0, 0.5, 0, Math.PI * 2, false).getPoints(64)\r\n            ),\r\n            new THREE.LineBasicMaterial({\r\n                color: 0xffffff,\r\n                depthTest: false,\r\n                depthWrite: false,\r\n                transparent: true,\r\n                opacity: 0.3,  // Semi-transparent\r\n                linewidth: 1\r\n            })\r\n        );\r\n        this.uniformScaleStartCircle.name = 'UniformScaleStartCircle';\r\n        this.scaleFeedbackGroup.add(this.uniformScaleStartCircle);\r\n        \r\n        // Current reference circle (where mouse is) - more visible\r\n        this.uniformScaleCurrentCircle = new THREE.Line(\r\n            new THREE.BufferGeometry().setFromPoints(\r\n                new THREE.Path().absarc(0, 0, 0.5, 0, Math.PI * 2, false).getPoints(64)\r\n            ),\r\n            new THREE.LineBasicMaterial({\r\n                color: 0xffffff,\r\n                depthTest: false,\r\n                depthWrite: false,\r\n                transparent: true,\r\n                opacity: 0.7,  // More visible than start circle\r\n                linewidth: 2\r\n            })\r\n        );\r\n        this.uniformScaleCurrentCircle.name = 'UniformScaleCurrentCircle';\r\n        this.scaleFeedbackGroup.add(this.uniformScaleCurrentCircle);\r\n        \r\n        // Hide feedback circles initially\r\n        this.uniformScaleStartCircle.visible = false;\r\n        this.uniformScaleCurrentCircle.visible = false;\r\n        \r\n        // Hide entire feedback group initially\r\n        this.scaleFeedbackGroup.visible = false;\r\n    }\r\n    \r\n    updateRotationFeedback(startAngle, currentAngle, axis, radius, mouseWorldPos, mouseNDC) {\r\n        // Debug overlay state\r\n        console.log('[Gizmo] Overlay check:', {\r\n            hasScene: !!this.overlay.scene,\r\n            hasGroup: !!this.overlay.group,\r\n            hasCamera: !!this.overlay.camera\r\n        });\r\n        \r\n        // If overlay is available, draw dashed line in HUD space\r\n        if (this.overlay.scene && this.overlay.group && this.overlay.camera) {\r\n            this.updateRotationFeedbackOverlay(startAngle, currentAngle, axis, radius, mouseWorldPos, mouseNDC);\r\n        }\r\n        if (!this.rotationFeedbackGroup) return;\r\n        \r\n        // Adjust angles for left-handed coordinate system visual feedback\r\n        let visualStartAngle = startAngle;\r\n        let visualCurrentAngle = currentAngle;\r\n        \r\n        if (axis === 'x') {\r\n            // X rotation: Flip the angles to match left-handed visuals\r\n            visualStartAngle = -startAngle;\r\n            visualCurrentAngle = -currentAngle;\r\n        } else if (axis === 'y') {\r\n            // Y rotation: For left-handed system, we need to flip the angle\r\n            // and adjust by 90 degrees (PI/2) to match the click position\r\n            visualStartAngle = -startAngle + Math.PI/2;\r\n            visualCurrentAngle = -currentAngle + Math.PI/2;\r\n        } else if (axis === 'z') {\r\n            // Z rotation: Flip the angles to match left-handed visuals\r\n            visualStartAngle = -startAngle;\r\n            visualCurrentAngle = -currentAngle;\r\n        }\r\n        \r\n        // Calculate the angle difference\r\n        let angleDiff = visualCurrentAngle - visualStartAngle;\r\n        \r\n        // Normalize to [-PI, PI]\r\n        while (angleDiff > Math.PI) angleDiff -= 2 * Math.PI;\r\n        while (angleDiff < -Math.PI) angleDiff += 2 * Math.PI;\r\n        \r\n        // Update start line position\r\n        const startX = Math.cos(visualStartAngle) * radius;\r\n        const startY = Math.sin(visualStartAngle) * radius;\r\n        this.updateLinePosition(this.rotationStartLine, 0, 0, startX, startY, axis);\r\n        \r\n        // Update current line position (origin to circle)\r\n        const currentX = Math.cos(visualCurrentAngle) * radius;\r\n        const currentY = Math.sin(visualCurrentAngle) * radius;\r\n        this.updateLinePosition(this.rotationCurrentLine, 0, 0, currentX, currentY, axis);\r\n        \r\n        // Update or create pie slice\r\n        this.updatePieSlice(visualStartAngle, angleDiff, radius, axis);\r\n    }\r\n    \r\n    updateScaleFeedback(axis, currentMousePos) {\r\n        if (!this.scaleFeedbackGroup || !this.scaleFeedbackLine) return;\r\n        if (!this.scaleInitialBoxPosition || !this.targetObject) return;\r\n        \r\n        // The placeholder box should be at the mouse position\r\n        if (this.scalePlaceholderBox && currentMousePos) {\r\n            // Convert mouse position to local space of feedback group\r\n            const localBoxPos = currentMousePos.clone().sub(this.scaleFeedbackGroup.position);\r\n            const invScale = 1 / this.scaleFeedbackGroup.scale.x;\r\n            localBoxPos.multiplyScalar(invScale);\r\n            \r\n            this.scalePlaceholderBox.position.copy(localBoxPos);\r\n        }\r\n        \r\n        // Update feedback line from initial position (gizmo box click position) to mouse position\r\n        if (this.scaleFeedbackLine && currentMousePos) {\r\n            const positions = this.scaleFeedbackLine.geometry.attributes.position.array;\r\n            \r\n            // Convert positions to local space of the feedback group\r\n            const localStart = this.scaleInitialBoxPosition.clone().sub(this.scaleFeedbackGroup.position);\r\n            const localEnd = currentMousePos.clone().sub(this.scaleFeedbackGroup.position);\r\n            \r\n            // Apply inverse scale to get correct positions\r\n            const invScale = 1 / this.scaleFeedbackGroup.scale.x;\r\n            localStart.multiplyScalar(invScale);\r\n            localEnd.multiplyScalar(invScale);\r\n            \r\n            positions[0] = localStart.x;\r\n            positions[1] = localStart.y;\r\n            positions[2] = localStart.z;\r\n            positions[3] = localEnd.x;\r\n            positions[4] = localEnd.y;\r\n            positions[5] = localEnd.z;\r\n            \r\n            this.scaleFeedbackLine.geometry.attributes.position.needsUpdate = true;\r\n        }\r\n        \r\n        // Update overlay if available (dashed line from origin to mouse)\r\n        if (this.overlay.scene && this.overlay.group && this.overlay.camera) {\r\n            this.updateScaleFeedbackOverlay(axis);\r\n        }\r\n    }\r\n    \r\n    updateScaleFeedbackOverlay(axis) {\r\n        // Reuse the same overlay visualization as rotation (dashed line)\r\n        if (!this._overlayVis) {\r\n            this._overlayVis = {};\r\n            // Dashed line (center -> mouse) using LineDashedMaterial in screen-space (pixel units)\r\n            this._overlayVis.extGeom = new THREE.BufferGeometry().setAttribute(\r\n                'position', new THREE.Float32BufferAttribute([0,0,0, 0,0,0], 3)\r\n            );\r\n            this._overlayVis.extMat = new THREE.LineDashedMaterial({\r\n                color: 0x000000,\r\n                transparent: true,\r\n                opacity: 0.95,\r\n                depthTest: false,\r\n                depthWrite: false,\r\n                dashSize: .03, // pixels in overlay space\r\n                gapSize: .03,  // pixels in overlay space\r\n                scale: 1,\r\n                linewidth: 2\r\n            });\r\n            this._overlayVis.extLine = new THREE.Line(this._overlayVis.extGeom, this._overlayVis.extMat);\r\n            // Add only the dashed line to overlay group\r\n            this.overlay.group.add(this._overlayVis.extLine);\r\n        }\r\n        \r\n        const toScreen = (worldV3) => {\r\n            if (!this.camera) return new THREE.Vector3();\r\n            const v = worldV3.clone().project(this.camera);\r\n            const { width = 1, height = 1 } = (this.overlay.getViewportSize ? this.overlay.getViewportSize() : {});\r\n            const x = (v.x + 1) * 0.5 * width;\r\n            const y = (v.y + 1) * 0.5 * height;\r\n            return new THREE.Vector3(x, y, 0);\r\n        };\r\n        \r\n        // Get center and mouse positions in screen space\r\n        const centerWorld = this.gizmoGroup ? this.gizmoGroup.position.clone() : new THREE.Vector3();\r\n        const pCenter = toScreen(centerWorld);\r\n        \r\n        // Use current mouse NDC position\r\n        const { width = 1, height = 1 } = (this.overlay.getViewportSize ? this.overlay.getViewportSize() : {});\r\n        const pMouse = new THREE.Vector3(\r\n            (this.dragCurrent.x + 1) * 0.5 * width,\r\n            (this.dragCurrent.y + 1) * 0.5 * height,\r\n            0\r\n        );\r\n        \r\n        // Update dashed line\r\n        const arr = this._overlayVis.extGeom.attributes.position.array;\r\n        arr[0] = pCenter.x; arr[1] = pCenter.y; arr[2] = 0;\r\n        arr[3] = pMouse.x; arr[4] = pMouse.y; arr[5] = 0;\r\n        this._overlayVis.extGeom.attributes.position.needsUpdate = true;\r\n        this._overlayVis.extLine.computeLineDistances();\r\n        \r\n        // Ensure material is updated\r\n        this._overlayVis.extMat.needsUpdate = true;\r\n        \r\n        // Debug: Make line more visible\r\n        this._overlayVis.extLine.visible = true;\r\n        console.log('[Gizmo] Overlay line updated:', {center: [pCenter.x, pCenter.y], mouse: [pMouse.x, pMouse.y]});\r\n    }\r\n\r\n    // Draw dashed line from origin to mouse in overlay (HUD) space\r\n    updateRotationFeedbackOverlay(startAngle, currentAngle, axis, radius, mouseWorldPos, mouseNDC) {\r\n        // Use separate overlay for rotation to avoid conflicts with scale\r\n        if (!this._rotOverlay) {\r\n            this._rotOverlay = {};\r\n            // Dashed line (center -> mouse) using LineDashedMaterial in screen-space (pixel units)\r\n            this._rotOverlay.extGeom = new THREE.BufferGeometry().setAttribute(\r\n                'position', new THREE.Float32BufferAttribute([0,0,0, 0,0,0], 3)\r\n            );\r\n            this._rotOverlay.extMat = new THREE.LineDashedMaterial({\r\n                color: 0x000000,\r\n                transparent: true,\r\n                opacity: 0.95,\r\n                depthTest: false,\r\n                depthWrite: false,\r\n                dashSize: 0.03, // pixels in overlay space\r\n                gapSize: 0.03,  // pixels in overlay space\r\n                scale: 1,\r\n                linewidth: 2\r\n            });\r\n            this._rotOverlay.extLine = new THREE.Line(this._rotOverlay.extGeom, this._rotOverlay.extMat);\r\n            // Add only the dashed line to overlay group\r\n            this.overlay.group.add(this._rotOverlay.extLine);\r\n        }\r\n        \r\n        // Make sure the line is visible\r\n        this._rotOverlay.extLine.visible = true;\r\n\r\n        const toScreen = (worldV3) => {\r\n            // Project world position to NDC using 3D camera, then map to overlay pixel coords\r\n            if (!this.camera) return new THREE.Vector3();\r\n            const v = worldV3.clone().project(this.camera);\r\n            // NDC (-1..1) -> pixel (0..W, 0..H). Note overlayCamera has left=0,right=W, top=H, bottom=0\r\n            const { width = 1, height = 1 } = (this.overlay.getViewportSize ? this.overlay.getViewportSize() : {});\r\n            const x = (v.x + 1) * 0.5 * width;\r\n            const y = (v.y + 1) * 0.5 * height; // match overlay camera (bottom=0, top=height)\r\n            return new THREE.Vector3(x, y, 0);\r\n        };\r\n        const ndcToScreen = (ndc) => {\r\n            const { width = 1, height = 1 } = (this.overlay.getViewportSize ? this.overlay.getViewportSize() : {});\r\n            const x = ((ndc.x || 0) + 1) * 0.5 * width;\r\n            const y = ((ndc.y || 0) + 1) * 0.5 * height;\r\n            return new THREE.Vector3(x, y, 0);\r\n        };\r\n\r\n        // Compute world points for origin, start, current, and mouse\r\n        const centerWorld = this.gizmoGroup ? this.gizmoGroup.position.clone() : new THREE.Vector3();\r\n        // Build axis plane basis to place the arc on screen consistent with world ring\r\n        const angleToPoint = (ang) => {\r\n            // Unit circle in the ring plane, then transform to world\r\n            let dx=0, dy=0, dz=0;\r\n            const c = Math.cos(ang), s = Math.sin(ang);\r\n            if (axis === 'x') { dy = -s; dz = c; }\r\n            else if (axis === 'y') { dx = c; dz = s; }\r\n            else { dx = c; dy = s; }\r\n            return new THREE.Vector3(centerWorld.x + dx * radius, centerWorld.y + dy * radius, centerWorld.z + dz * radius);\r\n        };\r\n\r\n        // Compute mouse world point for overlay projection\r\n        const mouseWorld = mouseWorldPos ? mouseWorldPos.clone() : angleToPoint(currentAngle);\r\n\r\n        // Project to overlay pixel space\r\n        const pCenter = toScreen(centerWorld);\r\n        // Prefer the actual mouse NDC to ensure strict screen-space alignment\r\n        const pMouse = (mouseNDC && typeof mouseNDC.x === 'number' && typeof mouseNDC.y === 'number')\r\n            ? ndcToScreen(mouseNDC)\r\n            : toScreen(mouseWorld);\r\n\r\n        // Update overlay lines (positions are in overlay camera space: x,y in pixels)\r\n        const setLine = (geom, a, b) => {\r\n            const arr = geom.attributes.position.array;\r\n            arr[0]=a.x; arr[1]=a.y; arr[2]=0; arr[3]=b.x; arr[4]=b.y; arr[5]=0;\r\n            geom.attributes.position.needsUpdate = true;\r\n        };\r\n    // Dashed line from center to mouse (single line with dashed material)\r\n    setLine(this._rotOverlay.extGeom, pCenter, pMouse);\r\n    // Recompute line distances for dashed material\r\n    this._rotOverlay.extLine.computeLineDistances();\r\n    \r\n    // Ensure material is updated\r\n    this._rotOverlay.extMat.needsUpdate = true;\r\n    }\r\n    \r\n    updateLinePosition(line, startX, startY, endX, endY, axis) {\r\n        if (!line) return;\r\n        \r\n        const positions = line.geometry.attributes.position.array;\r\n        \r\n        // Start point\r\n        if (axis === 'x') {\r\n            positions[0] = 0;\r\n            positions[1] = -startY;  // Flip Y for C3 coordinate system\r\n            positions[2] = startX;\r\n        } else if (axis === 'y') {\r\n            positions[0] = startX;\r\n            positions[1] = 0;\r\n            positions[2] = startY;\r\n        } else { // z axis\r\n            positions[0] = startX;\r\n            positions[1] = startY;\r\n            positions[2] = 0;\r\n        }\r\n        \r\n        // End point\r\n        if (axis === 'x') {\r\n            positions[3] = 0;\r\n            positions[4] = -endY;  // Flip Y for C3 coordinate system\r\n            positions[5] = endX;\r\n        } else if (axis === 'y') {\r\n            positions[3] = endX;\r\n            positions[4] = 0;\r\n            positions[5] = endY;\r\n        } else { // z axis\r\n            positions[3] = endX;\r\n            positions[4] = endY;\r\n            positions[5] = 0;\r\n        }\r\n        \r\n        line.geometry.attributes.position.needsUpdate = true;\r\n    }\r\n    \r\n    updatePieSlice(startAngle, angleDiff, radius, axis) {\r\n        // Remove old pie if exists\r\n        if (this.rotationPie) {\r\n            this.rotationFeedbackGroup.remove(this.rotationPie);\r\n            if (this.rotationPie.geometry) this.rotationPie.geometry.dispose();\r\n            if (this.rotationPie.material) this.rotationPie.material.dispose();\r\n            this.rotationPie = null;\r\n        }\r\n        \r\n        // Don't create pie for very small angles\r\n        if (Math.abs(angleDiff) < 0.01) return;\r\n        \r\n        // Create pie geometry\r\n        const segments = Math.max(3, Math.floor(Math.abs(angleDiff) * 32 / Math.PI));\r\n        const geometry = new THREE.BufferGeometry();\r\n        const vertices = [];\r\n        \r\n        // Add center vertex\r\n        vertices.push(0, 0, 0);\r\n        \r\n        // Add arc vertices\r\n        for (let i = 0; i <= segments; i++) {\r\n            const angle = startAngle + (angleDiff * i / segments);\r\n            const x = Math.cos(angle) * radius;\r\n            const y = Math.sin(angle) * radius;\r\n            \r\n            if (axis === 'x') {\r\n                vertices.push(0, -y, x);  // Flip Y for C3 coordinate system\r\n            } else if (axis === 'y') {\r\n                vertices.push(x, 0, y);\r\n            } else { // z axis\r\n                vertices.push(x, y, 0);\r\n            }\r\n        }\r\n        \r\n        // Create faces\r\n        const indices = [];\r\n        for (let i = 1; i < vertices.length / 3 - 1; i++) {\r\n            indices.push(0, i, i + 1);\r\n        }\r\n        \r\n        geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\r\n        geometry.setIndex(indices);\r\n        geometry.computeVertexNormals();\r\n        \r\n        // Create material with appropriate color\r\n        const color = this.colors[axis] || this.colors.rotationFeedback;\r\n        const material = new THREE.MeshBasicMaterial({\r\n            color: color,\r\n            opacity: 0.3,\r\n            transparent: true,\r\n            side: THREE.DoubleSide,\r\n            depthTest: false,\r\n            depthWrite: false\r\n        });\r\n        \r\n        this.rotationPie = new THREE.Mesh(geometry, material);\r\n        this.rotationPie.name = 'RotationPie';\r\n        this.rotationFeedbackGroup.add(this.rotationPie);\r\n    }\r\n    \r\n    createPositionGizmo() {\r\n        const group = new THREE.Group();\r\n        group.name = 'PositionGizmo';\r\n        \r\n    // Create arrows for each axis\r\n    ['x', 'y', 'z'].forEach((axis, index) => {\r\n            const color = this.colors[axis];\r\n            const direction = new THREE.Vector3();\r\n            direction[axis] = 1;\r\n            \r\n            // Arrow shaft - thicker for better visibility\r\n            const shaftGeometry = new THREE.CylinderGeometry(\r\n                this.handleSize.shaftThickness, \r\n                this.handleSize.shaftThickness, \r\n                this.handleSize.position, \r\n                8\r\n            );\r\n            const shaftMaterial = new THREE.MeshBasicMaterial({ \r\n                color: color,\r\n                depthTest: false,\r\n                depthWrite: false,\r\n                transparent: true,\r\n                opacity: 0.8\r\n            });\r\n            const shaft = new THREE.Mesh(shaftGeometry, shaftMaterial);\r\n            \r\n            // Arrow cone - larger for better visibility\r\n            const coneGeometry = new THREE.ConeGeometry(\r\n                this.handleSize.coneSize, \r\n                this.handleSize.coneHeight, \r\n                8\r\n            );\r\n            const coneMaterial = new THREE.MeshBasicMaterial({ \r\n                color: color,\r\n                depthTest: false,\r\n                depthWrite: false,\r\n                transparent: true,\r\n                opacity: 0.9\r\n            });\r\n            const cone = new THREE.Mesh(coneGeometry, coneMaterial);\r\n            \r\n            // Position based on axis\r\n            if (axis === 'x') {\r\n                shaft.rotation.z = -Math.PI / 2;\r\n                shaft.position.x = this.handleSize.position / 2;\r\n                cone.rotation.z = -Math.PI / 2;\r\n                cone.position.x = this.handleSize.position + this.handleSize.coneHeight / 2;\r\n            } else if (axis === 'y') {\r\n                shaft.position.y = -this.handleSize.position / 2; // Negative for C3\r\n                cone.rotation.z = Math.PI;\r\n                cone.position.y = -this.handleSize.position - this.handleSize.coneHeight / 2;\r\n            } else {\r\n                shaft.rotation.x = Math.PI / 2;\r\n                shaft.position.z = this.handleSize.position / 2;\r\n                cone.rotation.x = Math.PI / 2;  // Flipped from -Math.PI / 2\r\n                cone.position.z = this.handleSize.position + this.handleSize.coneHeight / 2;\r\n            }\r\n            \r\n            // Store axis info\r\n            shaft.userData = { type: 'position', axis: axis, component: 'shaft' };\r\n            cone.userData = { type: 'position', axis: axis, component: 'cone' };\r\n            \r\n            group.add(shaft);\r\n            group.add(cone);\r\n            \r\n            // Add plane handles for 2-axis movement\r\n            // We want exactly three planes: XY, YZ, XZ. Build one plane at each axis index using the next axis in cycle.\r\n            const nextAxis = ['y', 'z', 'x'][index];\r\n            const planeSize = 0.8;     // Bigger squares\r\n            const planeOffset = 0.45;  // Spacing from the corner\r\n\r\n            const planeGeometry = new THREE.PlaneGeometry(planeSize, planeSize);\r\n            // Blend the two axis colors safely\r\n            const c1 = new THREE.Color(this.colors[axis]);\r\n            const c2 = new THREE.Color(this.colors[nextAxis]);\r\n            const blendedColor = c1.clone().lerp(c2, 0.5);\r\n            const planeMaterial = new THREE.MeshBasicMaterial({\r\n                color: blendedColor,\r\n                opacity: 0.35,\r\n                transparent: true,\r\n                side: THREE.DoubleSide,\r\n                depthTest: false,\r\n                depthWrite: false\r\n            });\r\n            const plane = new THREE.Mesh(planeGeometry, planeMaterial);\r\n\r\n            // Position plane between the two axes with a consistent sign convention (Y is negative in C3)\r\n            const signedOffset = (a) => (a === 'y' ? -planeOffset : planeOffset);\r\n            const planePos = new THREE.Vector3(0, 0, 0);\r\n            planePos[axis] = signedOffset(axis);\r\n            planePos[nextAxis] = signedOffset(nextAxis);\r\n            plane.position.copy(planePos);\r\n\r\n            // Rotate plane to face correct direction\r\n            // Default plane geometry lies in the XY plane (normal +Z)\r\n            if ((axis === 'x' && nextAxis === 'y') || (axis === 'y' && nextAxis === 'x')) {\r\n                // XY plane: no rotation needed\r\n                plane.rotation.set(0, 0, 0);\r\n                plane.userData = { type: 'position', axis: 'xy', component: 'plane' };\r\n            } else if ((axis === 'y' && nextAxis === 'z') || (axis === 'z' && nextAxis === 'y')) {\r\n                // YZ plane: rotate into YZ by 90deg around Y\r\n                plane.rotation.set(0, Math.PI / 2, 0);\r\n                plane.userData = { type: 'position', axis: 'yz', component: 'plane' };\r\n            } else {\r\n                // XZ plane: rotate into XZ by 90deg around X\r\n                plane.rotation.set(Math.PI / 2, 0, 0);\r\n                plane.userData = { type: 'position', axis: 'xz', component: 'plane' };\r\n            }\r\n\r\n            group.add(plane);\r\n        });\r\n        \r\n        this.positionGizmo = group;\r\n        this.gizmoGroup.add(group);\r\n    }\r\n    \r\n    createRotationGizmo() {\r\n        const group = new THREE.Group();\r\n        group.name = 'RotationGizmo';\r\n        \r\n        // Create rotation rings for each axis\r\n        ['x', 'y', 'z'].forEach(axis => {\r\n            const color = this.colors[axis];\r\n            const geometry = new THREE.TorusGeometry(\r\n                this.handleSize.rotation, \r\n                this.handleSize.shaftThickness, // Thicker rings\r\n                8, \r\n                32\r\n            );\r\n            const material = new THREE.MeshBasicMaterial({ \r\n                color: color,\r\n                depthTest: false,\r\n                depthWrite: false,\r\n                transparent: true,\r\n                opacity: 0.7\r\n            });\r\n            const ring = new THREE.Mesh(geometry, material);\r\n            \r\n            // Rotate ring based on axis\r\n            if (axis === 'x') {\r\n                ring.rotation.y = Math.PI / 2;\r\n            } else if (axis === 'y') {\r\n                ring.rotation.x = Math.PI / 2;\r\n            }\r\n            \r\n            ring.userData = { type: 'rotation', axis: axis };\r\n            group.add(ring);\r\n        });\r\n        \r\n        this.rotationGizmo = group;\r\n        this.gizmoGroup.add(group);\r\n    }\r\n    \r\n    createScaleGizmo() {\r\n        const group = new THREE.Group();\r\n        group.name = 'ScaleGizmo';\r\n        \r\n        // Create scale handles for each axis\r\n        ['x', 'y', 'z'].forEach(axis => {\r\n            const color = this.colors[axis];\r\n            \r\n            // Line - thicker\r\n            const lineGeometry = new THREE.CylinderGeometry(\r\n                this.handleSize.shaftThickness * 0.75, \r\n                this.handleSize.shaftThickness * 0.75, \r\n                this.handleSize.position * 0.8, \r\n                8\r\n            );\r\n            const lineMaterial = new THREE.MeshBasicMaterial({ \r\n                color: color,\r\n                depthTest: false,\r\n                depthWrite: false,\r\n                transparent: true,\r\n                opacity: 0.7\r\n            });\r\n            const line = new THREE.Mesh(lineGeometry, lineMaterial);\r\n            \r\n            // Box handle - larger\r\n            const boxGeometry = new THREE.BoxGeometry(\r\n                this.handleSize.scale, \r\n                this.handleSize.scale, \r\n                this.handleSize.scale\r\n            );\r\n            const boxMaterial = new THREE.MeshBasicMaterial({ \r\n                color: color,\r\n                depthTest: false,\r\n                depthWrite: false,\r\n                transparent: true,\r\n                opacity: 0.9\r\n            });\r\n            const box = new THREE.Mesh(boxGeometry, boxMaterial);\r\n            \r\n            // Position based on axis\r\n            if (axis === 'x') {\r\n                line.rotation.z = -Math.PI / 2;\r\n                line.position.x = this.handleSize.position * 0.4;\r\n                box.position.x = this.handleSize.position * 0.8;\r\n            } else if (axis === 'y') {\r\n                line.position.y = -this.handleSize.position * 0.4;\r\n                box.position.y = -this.handleSize.position * 0.8;\r\n            } else {\r\n                line.rotation.x = Math.PI / 2;\r\n                line.position.z = this.handleSize.position * 0.4;\r\n                box.position.z = this.handleSize.position * 0.8;\r\n            }\r\n            \r\n            line.userData = { type: 'scale', axis: axis, component: 'line' };\r\n            box.userData = { type: 'scale', axis: axis, component: 'box' };\r\n            \r\n            group.add(line);\r\n            group.add(box);\r\n        });\r\n        \r\n        this.scaleGizmo = group;\r\n        this.gizmoGroup.add(group);\r\n    }\r\n    \r\n    createUniformScaleGizmo() {\r\n        const group = new THREE.Group();\r\n        group.name = 'UniformScaleGizmo';\r\n        \r\n        // Create donut shape with two concentric circles - 2.5x larger\r\n        const outerRadius = this.handleSize.uniformScale * 3.0;\r\n        const innerRadius = this.handleSize.uniformScale * 1.75;\r\n        \r\n        // Create outer ring\r\n        const outerRingGeometry = new THREE.TorusGeometry(\r\n            outerRadius,\r\n            0.01, // Very thin tube for a circle appearance\r\n            4,\r\n            32\r\n        );\r\n        const ringMaterial = new THREE.MeshBasicMaterial({ \r\n            color: 0xffffff, // White\r\n            depthTest: false,\r\n            depthWrite: false,\r\n            transparent: true,\r\n            opacity: 0.5  // More transparent\r\n        });\r\n        const outerRing = new THREE.Mesh(outerRingGeometry, ringMaterial);\r\n        \r\n        // Create inner ring\r\n        const innerRingGeometry = new THREE.TorusGeometry(\r\n            innerRadius,\r\n            0.01, // Very thin tube\r\n            4,\r\n            32\r\n        );\r\n        const innerRing = new THREE.Mesh(innerRingGeometry, ringMaterial);\r\n        \r\n        // Create semi-transparent donut fill between the rings\r\n        const donutGeometry = new THREE.RingGeometry(innerRadius, outerRadius, 32);\r\n        const donutMaterial = new THREE.MeshBasicMaterial({\r\n            color: 0xffffff, // White\r\n            depthTest: false,\r\n            depthWrite: false,\r\n            transparent: true,\r\n            opacity: 0.15, // More transparent\r\n            side: THREE.DoubleSide\r\n        });\r\n        const donutFill = new THREE.Mesh(donutGeometry, donutMaterial);\r\n        \r\n        // Set user data for all parts\r\n        outerRing.userData = { type: 'scale', axis: 'uniform' };\r\n        innerRing.userData = { type: 'scale', axis: 'uniform' };\r\n        donutFill.userData = { type: 'scale', axis: 'uniform' };\r\n        \r\n        // Add all parts to group\r\n        group.add(outerRing);\r\n        group.add(innerRing);\r\n        group.add(donutFill);\r\n        \r\n        this.uniformScaleGizmo = group;\r\n        this.gizmoGroup.add(group);\r\n    }\r\n    \r\n    setupInteraction() {\r\n        // This will be called from the main worker's event handlers\r\n        console.log('[TransformGizmo] Interaction setup ready');\r\n    }\r\n    \r\n    handleMouseDown(mouse, camera) {\r\n        if (!this.targetObject) return false;\r\n        \r\n        this.raycaster.setFromCamera(mouse, camera);\r\n        const intersects = this.raycaster.intersectObjects(this.gizmoGroup.children, true);\r\n        \r\n        if (intersects.length > 0) {\r\n            const object = intersects[0].object;\r\n            if (object.userData.type) {\r\n                this.activeHandle = object.userData;\r\n                this.isDragging = true;\r\n                this.dragStart.copy(mouse);\r\n                this.dragCurrent.copy(mouse);  // Initialize dragCurrent\r\n                \r\n                // Store initial transform\r\n                this.initialTransform = {\r\n                    position: this.targetObject.position.clone(),\r\n                    rotation: this.targetObject.rotation.clone(),\r\n                    scale: this.targetObject.scale.clone()\r\n                };\r\n                \r\n                // ADDED: Store drag start position for delta calculation\r\n                if (this.activeHandle.type === 'position') {\r\n                    this.dragStartPosition = this.targetObject.position.clone();\r\n                    // Store start world position for overlay delta line AFTER any snapping\r\n                    // This will be set after snapping in the position initialization below\r\n                }\r\n                \r\n                // For position gizmo, store the initial click world point\r\n                if (this.activeHandle.type === 'position' && intersects.length > 0) {\r\n                    this.initialClickPoint = intersects[0].point.clone();\r\n                    // If snapping is enabled, snap the object immediately to the nearest WORLD grid point\r\n                    if (this.snap.enabled) {\r\n                        const step = this.snap.unitsPerCell || 0;\r\n                        if (step > 0) {\r\n                            const origin = this.snap.origin || new THREE.Vector3();\r\n                            const snapped = this.targetObject.position.clone();\r\n                            snapped.x = this.snapValueToGrid(snapped.x, step, origin.x);\r\n                            snapped.y = this.snapValueToGrid(snapped.y, step, origin.y);\r\n                            snapped.z = this.snapValueToGrid(snapped.z, step, origin.z);\r\n                            this.targetObject.position.copy(snapped);\r\n                            // DO NOT update initialTransform - keep the original position for delta calculation\r\n                            // this.initialTransform.position.copy(snapped); // REMOVED\r\n                            // Keep gizmo in sync\r\n                            this.updateGizmoTransform();\r\n                            // Send an immediate update so UI reflects the snapped start\r\n                            this.sendTransformUpdate();\r\n                        }\r\n                    }\r\n                    // Compute click offset relative to (possibly snapped) position\r\n                    this.initialClickOffset = this.initialClickPoint.clone().sub(this.targetObject.position);\r\n                    \r\n                    // Store the position after snapping for the overlay line\r\n                    this.positionDragStartWorld = this.targetObject.position.clone();\r\n                }\r\n                \r\n                // Special handling for rotation\r\n                if (this.activeHandle.type === 'rotation') {\r\n                    this.initializeRotation(mouse, camera);\r\n                }\r\n                \r\n                // Special handling for scale\r\n                if (this.activeHandle.type === 'scale') {\r\n                    this.initializeScale(mouse, camera, intersects[0]);\r\n                }\r\n                \r\n                // Highlight active handle\r\n                this.highlightHandle(object, true);\r\n                \r\n                // Hide other gizmo types when dragging\r\n                this.hideInactiveGizmos(this.activeHandle.type);\r\n                \r\n                // Send activation message\r\n                self.postMessage({\r\n                    type: 'GIZMO_ACTIVE',\r\n                    data: { active: true }\r\n                });\r\n\r\n                // Initialize position after snapping but before overlay setup\r\n                if (this.activeHandle.type === 'position') {\r\n                    // This will be updated after snapping if needed\r\n                    this.positionDragStartWorld = this.targetObject.position.clone();\r\n                }\r\n                \r\n                // Clean up any previous overlay visuals from other transform types\r\n                if (this.overlay.scene && this.overlay.group) {\r\n                    // Hide scale overlay if it exists\r\n                    if (this._overlayVis && this._overlayVis.extLine) {\r\n                        this._overlayVis.extLine.visible = false;\r\n                    }\r\n                    // Hide rotation overlay if it exists\r\n                    if (this._rotOverlay && this._rotOverlay.extLine) {\r\n                        this._rotOverlay.extLine.visible = false;\r\n                    }\r\n                    \r\n                    // Prepare dashed delta line for position drag\r\n                    if (this.activeHandle.type === 'position' && this.overlay.camera) {\r\n                        if (!this._posOverlay) {\r\n                            this._posOverlay = {};\r\n                            this._posOverlay.geom = new THREE.BufferGeometry().setAttribute('position', new THREE.Float32BufferAttribute([0,0,0, 0,0,0], 3));\r\n                            this._posOverlay.mat = new THREE.LineDashedMaterial({ color: 0x000000, transparent: true, opacity: 0.95, depthTest: false, depthWrite: false, dashSize: 0.03, gapSize: 0.03, scale: 1, linewidth: 2 });\r\n                            this._posOverlay.line = new THREE.Line(this._posOverlay.geom, this._posOverlay.mat);\r\n                            this.overlay.group.add(this._posOverlay.line);\r\n                        }\r\n                        this._posOverlay.line.visible = true;\r\n                        this.overlay.group.visible = true;\r\n                        \r\n                        // Initialize the line positions immediately\r\n                        if (this.positionDragStartWorld) {\r\n                            const toScreen = (worldV3) => {\r\n                                const v = worldV3.clone().project(this.camera);\r\n                                const { width = 1, height = 1 } = (this.overlay.getViewportSize ? this.overlay.getViewportSize() : {});\r\n                                const x = (v.x + 1) * 0.5 * width;\r\n                                const y = (v.y + 1) * 0.5 * height;\r\n                                return new THREE.Vector3(x, y, 0);\r\n                            };\r\n                            const startScreen = toScreen(this.positionDragStartWorld);\r\n                            const arr = this._posOverlay.geom.attributes.position.array;\r\n                            // Both points start at the same position initially\r\n                            arr[0] = startScreen.x; arr[1] = startScreen.y; arr[2] = 0;\r\n                            arr[3] = startScreen.x; arr[4] = startScreen.y; arr[5] = 0;\r\n                            this._posOverlay.geom.attributes.position.needsUpdate = true;\r\n                            this._posOverlay.line.computeLineDistances();\r\n                        }\r\n                    }\r\n                }\r\n                \r\n                return true; // Indicate gizmo is active\r\n            }\r\n        }\r\n        \r\n        return false;\r\n    }\r\n    \r\n    initializeRotation(mouse, camera) {\r\n        if (!this.activeHandle || this.activeHandle.type !== 'rotation') return;\r\n        \r\n        // Hide other overlays\r\n        if (this._posOverlay && this._posOverlay.line) {\r\n            this._posOverlay.line.visible = false;\r\n        }\r\n        // Hide scale overlay if it was being used\r\n        if (this._overlayVis && this._overlayVis.extLine) {\r\n            this._overlayVis.extLine.visible = false;\r\n        }\r\n        \r\n        // Show rotation overlay\r\n        if (this.overlay.scene && this.overlay.group) {\r\n            this.overlay.group.visible = true;\r\n            // The rotation overlay will be created on first use in updateRotationFeedbackOverlay\r\n        }\r\n        \r\n        const axis = this.activeHandle.axis;\r\n        this.rotationAxis = axis;\r\n        \r\n        // Calculate the initial angle on the rotation plane\r\n        this.rotationStartAngle = this.calculateRotationAngle(mouse, camera, axis);\r\n        this.rotationCurrentAngle = this.rotationStartAngle;\r\n        \r\n        // Show 3D rotation feedback\r\n        this.rotationFeedbackGroup.visible = true;\r\n        this.rotationFeedbackGroup.position.copy(this.gizmoGroup.position);\r\n        this.rotationFeedbackGroup.quaternion.copy(this.gizmoGroup.quaternion);\r\n        this.rotationFeedbackGroup.scale.copy(this.gizmoGroup.scale);\r\n        \r\n        // Get mouse world position for feedback visuals\r\n        const mouseWorldPos = this.getMouseWorldPosition(mouse, camera, axis);\r\n        \r\n        // Show overlay feedback if available\r\n        if (this.overlay.scene && this.overlay.group) {\r\n            this.updateRotationFeedbackOverlay(this.rotationStartAngle, this.rotationCurrentAngle, axis, this.handleSize.rotation, mouseWorldPos, mouse);\r\n            this.overlay.group.visible = true;\r\n        }\r\n        \r\n        // Initialize 3D feedback visuals\r\n        this.updateRotationFeedback(\r\n            this.rotationStartAngle,\r\n            this.rotationCurrentAngle,\r\n            axis,\r\n            this.handleSize.rotation,\r\n            mouseWorldPos,\r\n            mouse\r\n        );\r\n    }\r\n    \r\n    initializeScale(mouse, camera, intersection) {\r\n        if (!this.activeHandle || this.activeHandle.type !== 'scale') return;\r\n        \r\n        // Hide other overlays\r\n        if (this._posOverlay && this._posOverlay.line) {\r\n            this._posOverlay.line.visible = false;\r\n        }\r\n        if (this._rotOverlay && this._rotOverlay.extLine) {\r\n            this._rotOverlay.extLine.visible = false;\r\n        }\r\n        \r\n        const axis = this.activeHandle.axis;\r\n        \r\n        if (axis === 'uniform') {\r\n            // For uniform scale, track initial mouse world position\r\n            this.raycaster.setFromCamera(mouse, camera);\r\n            const intersectPoint = new THREE.Vector3();\r\n            const plane = new THREE.Plane(new THREE.Vector3(0, 0, 1), 0);\r\n            plane.translate(this.gizmoGroup.position);\r\n            \r\n            // If camera is looking along Z, use Y plane instead\r\n            const cameraDir = new THREE.Vector3();\r\n            camera.getWorldDirection(cameraDir);\r\n            if (Math.abs(cameraDir.z) > 0.9) {\r\n                plane.normal.set(0, 1, 0);\r\n            }\r\n            \r\n            this.raycaster.ray.intersectPlane(plane, intersectPoint);\r\n            \r\n            const initialDistance = intersectPoint.distanceTo(this.gizmoGroup.position);\r\n            this.uniformScaleInitialDistance = initialDistance;\r\n            this.uniformScaleInitialScale = this.targetObject.userData?.scale || 1.0;\r\n            \r\n            // Store the base scale values (individual scale components)\r\n            // These are the scale values WITHOUT the uniform scale applied\r\n            const currentUniformScale = this.targetObject.userData?.scale || 1.0;\r\n            this.baseScaleValues = {\r\n                x: this.targetObject.scale.x / currentUniformScale,\r\n                y: this.targetObject.scale.y / currentUniformScale,\r\n                z: this.targetObject.scale.z / currentUniformScale\r\n            };\r\n            \r\n            // Show feedback group\r\n            this.scaleFeedbackGroup.visible = true;\r\n            this.scaleFeedbackGroup.position.copy(this.gizmoGroup.position);\r\n            this.scaleFeedbackGroup.quaternion.copy(this.gizmoGroup.quaternion);\r\n            this.scaleFeedbackGroup.scale.copy(this.gizmoGroup.scale);\r\n            \r\n            // Setup reference circles\r\n            if (this.uniformScaleStartCircle && this.uniformScaleCurrentCircle) {\r\n                // Set circle sizes based on click distance in local space\r\n                const localRadius = initialDistance / this.scaleFeedbackGroup.scale.x;\r\n                const circlePoints = new THREE.Path().absarc(0, 0, localRadius, 0, Math.PI * 2, false).getPoints(64);\r\n                this.uniformScaleStartCircle.geometry.setFromPoints(circlePoints);\r\n                this.uniformScaleCurrentCircle.geometry.setFromPoints(circlePoints);\r\n                \r\n                this.uniformScaleStartCircle.visible = true;\r\n                this.uniformScaleCurrentCircle.visible = true;\r\n                \r\n                // Hide regular scale feedback\r\n                if (this.scaleFeedbackLine) this.scaleFeedbackLine.visible = false;\r\n                if (this.scalePlaceholderBox) this.scalePlaceholderBox.visible = false;\r\n            }\r\n            \r\n            // Hide the entire donut (rings and fill) during dragging to see the model better\r\n            if (this.uniformScaleGizmo) {\r\n                // Store references and hide all children\r\n                this.uniformScaleGizmoChildren = [];\r\n                this.uniformScaleGizmo.traverse(child => {\r\n                    if (child.isMesh) {\r\n                        this.uniformScaleGizmoChildren.push({\r\n                            mesh: child,\r\n                            wasVisible: child.visible\r\n                        });\r\n                        child.visible = false;\r\n                    }\r\n                });\r\n            }\r\n            \r\n            // Show overlay feedback if available\r\n            if (this.overlay.scene && this.overlay.group) {\r\n                this.overlay.group.visible = true;\r\n                this.dragCurrent = mouse.clone();\r\n                this.updateScaleFeedbackOverlay(axis);\r\n            }\r\n            \r\n            return;\r\n        }\r\n        \r\n        // Store the initial scale for this drag operation\r\n        this.scaleInitialScale = this.targetObject.scale[axis];\r\n        \r\n        // The VISUAL position of the gizmo box (not affected by object scale)\r\n        // This is where we're clicking in world space and where the feedback line should start\r\n        const visualBoxOffset = this.handleSize.position * 0.8;\r\n        const visualBoxPos = new THREE.Vector3();\r\n        visualBoxPos[axis] = (axis === 'y') ? -visualBoxOffset : visualBoxOffset;\r\n        visualBoxPos.applyMatrix4(this.gizmoGroup.matrixWorld);\r\n        \r\n        // Store this as the initial position for the feedback line\r\n        this.scaleInitialBoxPosition = visualBoxPos;\r\n        \r\n        // Store the distance from origin where we're clicking (visual position)\r\n        const origin = this.targetObject.position.clone();\r\n        this.scaleClickDistance = visualBoxPos.distanceTo(origin);\r\n        \r\n        // Hide the original scale box\r\n        if (intersection.object.userData.component === 'box') {\r\n            this.originalScaleBox = intersection.object;\r\n            this.originalScaleBox.visible = false;\r\n        }\r\n        \r\n        // Set colors to match axis\r\n        const axisColor = this.colors[axis];\r\n        this.scaleFeedbackLine.material.color.setHex(axisColor);\r\n        this.scalePlaceholderBox.material.color.setHex(axisColor);\r\n        \r\n        // Show scale feedback\r\n        this.scaleFeedbackGroup.visible = true;\r\n        this.scaleFeedbackGroup.position.copy(this.gizmoGroup.position);\r\n        this.scaleFeedbackGroup.quaternion.copy(this.gizmoGroup.quaternion);\r\n        this.scaleFeedbackGroup.scale.copy(this.gizmoGroup.scale);\r\n        \r\n        // Ensure feedback line and box are visible for individual axis scaling\r\n        if (this.scaleFeedbackLine) this.scaleFeedbackLine.visible = true;\r\n        if (this.scalePlaceholderBox) this.scalePlaceholderBox.visible = true;\r\n        \r\n        // Show overlay feedback if available\r\n        if (this.overlay.scene && this.overlay.group) {\r\n            this.overlay.group.visible = true;\r\n        }\r\n        \r\n        // Update dragCurrent with the current mouse position for overlay\r\n        this.dragCurrent = mouse.clone();\r\n        \r\n        // Get the current mouse position on the axis\r\n        const currentMousePos = this.getScaleMousePosition(mouse, camera, axis);\r\n        \r\n        // Initialize feedback line from box to mouse position\r\n        if (this.scaleFeedbackLine) {\r\n            const positions = this.scaleFeedbackLine.geometry.attributes.position.array;\r\n            \r\n            // Start at box position, end at mouse position\r\n            const localBoxPos = this.scaleInitialBoxPosition.clone().sub(this.scaleFeedbackGroup.position);\r\n            const localMousePos = currentMousePos.clone().sub(this.scaleFeedbackGroup.position);\r\n            const invScale = 1 / this.scaleFeedbackGroup.scale.x;\r\n            localBoxPos.multiplyScalar(invScale);\r\n            localMousePos.multiplyScalar(invScale);\r\n            \r\n            // Set line from box to mouse\r\n            positions[0] = localBoxPos.x;\r\n            positions[1] = localBoxPos.y;\r\n            positions[2] = localBoxPos.z;\r\n            positions[3] = localMousePos.x;\r\n            positions[4] = localMousePos.y;\r\n            positions[5] = localMousePos.z;\r\n            \r\n            this.scaleFeedbackLine.geometry.attributes.position.needsUpdate = true;\r\n        }\r\n        \r\n        // Initialize feedback visuals with current mouse position\r\n        this.updateScaleFeedback(axis, currentMousePos);\r\n        \r\n        // Force immediate overlay update to ensure dashed line is positioned correctly\r\n        if (this.overlay.scene && this.overlay.group && this.overlay.camera) {\r\n            this.updateScaleFeedbackOverlay(axis);\r\n        }\r\n    }\r\n    \r\n    getScaleMousePosition(mouse, camera, axis) {\r\n        // Get the axis direction in world space\r\n        const axisVector = new THREE.Vector3();\r\n        axisVector[axis] = 1;\r\n        \r\n        // Invert Y axis for C3 coordinate system\r\n        if (axis === 'y') {\r\n            axisVector.y = -1;\r\n        }\r\n        \r\n        // Transform to world space if needed\r\n        if (this.transformSpace === 'local' && this.targetObject) {\r\n            axisVector.applyQuaternion(this.targetObject.quaternion);\r\n        }\r\n        \r\n        // Create a ray from camera through mouse\r\n        this.raycaster.setFromCamera(mouse, camera);\r\n        const ray = this.raycaster.ray;\r\n        \r\n        // Find closest point on axis line to mouse ray\r\n        const axisOrigin = this.scaleInitialBoxPosition || this.targetObject.position.clone();\r\n        const axisDirection = axisVector.normalize();\r\n        \r\n        // Using the formula for closest points between two skew lines\r\n        const rayDir = ray.direction;\r\n        const rayOrigin = ray.origin;\r\n        \r\n        const a = rayDir.dot(rayDir);\r\n        const b = rayDir.dot(axisDirection);\r\n        const c = axisDirection.dot(axisDirection);\r\n        const d = rayDir.dot(rayOrigin.clone().sub(axisOrigin));\r\n        const e = axisDirection.dot(rayOrigin.clone().sub(axisOrigin));\r\n        \r\n        const denominator = a * c - b * b;\r\n        \r\n        if (Math.abs(denominator) > 0.00001) {\r\n            const s = (a * e - b * d) / denominator; // Distance along axis\r\n            return axisOrigin.clone().add(axisDirection.clone().multiplyScalar(s));\r\n        }\r\n        \r\n        return axisOrigin.clone();\r\n    }\r\n    \r\n    getMouseWorldPosition(mouse, camera, axis) {\r\n        // Create a plane perpendicular to the rotation axis\r\n        const planeNormal = new THREE.Vector3();\r\n        if (axis === 'x') planeNormal.set(1, 0, 0);\r\n        else if (axis === 'y') planeNormal.set(0, 1, 0);\r\n        else planeNormal.set(0, 0, 1);\r\n        \r\n        if (this.transformSpace === 'local' && this.targetObject) {\r\n            planeNormal.applyQuaternion(this.targetObject.quaternion);\r\n        }\r\n        \r\n        const plane = new THREE.Plane(planeNormal, 0);\r\n        plane.translate(this.gizmoGroup.position);\r\n        \r\n        this.raycaster.setFromCamera(mouse, camera);\r\n        const intersection = new THREE.Vector3();\r\n        this.raycaster.ray.intersectPlane(plane, intersection);\r\n        \r\n        return intersection;\r\n    }\r\n    \r\n    calculateRotationAngle(mouse, camera, axis) {\r\n        // Create a plane perpendicular to the rotation axis\r\n        const planeNormal = new THREE.Vector3();\r\n        if (axis === 'x') planeNormal.set(1, 0, 0);\r\n        else if (axis === 'y') planeNormal.set(0, 1, 0);\r\n        else planeNormal.set(0, 0, 1);\r\n        \r\n        // Transform plane normal to world space if needed\r\n        if (this.transformSpace === 'local' && this.targetObject) {\r\n            planeNormal.applyQuaternion(this.targetObject.quaternion);\r\n        }\r\n        \r\n        const plane = new THREE.Plane(planeNormal, 0);\r\n        plane.translate(this.gizmoGroup.position);\r\n        \r\n        // Cast ray and find intersection with plane\r\n        this.raycaster.setFromCamera(mouse, camera);\r\n        const intersection = new THREE.Vector3();\r\n        this.raycaster.ray.intersectPlane(plane, intersection);\r\n        \r\n        if (!intersection) return 0;\r\n        \r\n        // Convert intersection point to local space of gizmo\r\n        const localPoint = intersection.sub(this.gizmoGroup.position);\r\n        \r\n        // Calculate angle based on axis\r\n        // For left-handed coordinate system with Y-flipped\r\n        let angle = 0;\r\n        if (axis === 'x') {\r\n            // Rotation around X axis: YZ plane\r\n            // In left-handed system, looking from +X (right), clockwise is positive\r\n            angle = Math.atan2(localPoint.y, localPoint.z);\r\n        } else if (axis === 'y') {\r\n            // Rotation around Y axis: XZ plane\r\n            // In left-handed system with Y down, looking from +Y (down), clockwise is positive\r\n            angle = Math.atan2(localPoint.x, localPoint.z);\r\n        } else { // z axis\r\n            // Rotation around Z axis: XY plane\r\n            // In left-handed system, looking from +Z (out), clockwise is positive\r\n            angle = Math.atan2(-localPoint.y, localPoint.x);\r\n        }\r\n        \r\n        return angle;\r\n    }\r\n    \r\n    handleMouseMove(mouse, camera) {\r\n        if (!this.isDragging || !this.activeHandle) {\r\n            // Just hover effect\r\n            return this.updateHover(mouse, camera);\r\n        }\r\n        \r\n        this.dragCurrent.copy(mouse);\r\n        const delta = new THREE.Vector2().subVectors(this.dragCurrent, this.dragStart);\r\n        \r\n        // Apply transformation based on handle type\r\n        switch (this.activeHandle.type) {\r\n            case 'position':\r\n                this.applyPositionTransform(delta, camera);\r\n                break;\r\n            case 'rotation':\r\n                this.applyRotationTransform(mouse, camera);\r\n                break;\r\n            case 'scale':\r\n                this.applyScaleTransform(delta, camera);\r\n                break;\r\n        }\r\n        \r\n        // Update gizmo position to follow object\r\n        this.updateGizmoTransform();\r\n        \r\n        // Update delta label\r\n        this.updateDeltaLabel(mouse);\r\n\r\n        // Update position delta overlay line\r\n        if (this.isDragging && this.activeHandle && this.activeHandle.type === 'position' && this.overlay.scene && this.overlay.group && this.overlay.camera && this._posOverlay && this.positionDragStartWorld) {\r\n            const toScreen = (worldV3) => {\r\n                const v = worldV3.clone().project(this.camera);\r\n                const { width = 1, height = 1 } = (this.overlay.getViewportSize ? this.overlay.getViewportSize() : {});\r\n                const x = (v.x + 1) * 0.5 * width;\r\n                const y = (v.y + 1) * 0.5 * height;\r\n                return new THREE.Vector3(x, y, 0);\r\n            };\r\n            const startScreen = toScreen(this.positionDragStartWorld);\r\n            const currScreen = toScreen(this.targetObject.position);\r\n            const arr = this._posOverlay.geom.attributes.position.array;\r\n            arr[0] = startScreen.x; arr[1] = startScreen.y; arr[2] = 0;\r\n            arr[3] = currScreen.x;  arr[4] = currScreen.y;  arr[5] = 0;\r\n            this._posOverlay.geom.attributes.position.needsUpdate = true;\r\n            this._posOverlay.line.computeLineDistances();\r\n            this._posOverlay.mat.needsUpdate = true;\r\n        }\r\n        \r\n        // Send transform update to main worker\r\n        this.sendTransformUpdate();\r\n        \r\n        return true;\r\n    }\r\n\r\n    // Called from worker to update snap settings\r\n    setSnapConfig(cfg) {\r\n        if (!cfg) return;\r\n        if (typeof cfg.enabled === 'boolean') this.snap.enabled = cfg.enabled;\r\n        if (typeof cfg.angleDeg === 'number') this.snap.angleDeg = cfg.angleDeg;\r\n        if (typeof cfg.snapScale === 'number') this.snap.snapScale = cfg.snapScale;\r\n        if (typeof cfg.localGridCellPx === 'number') this.snap.localGridCellPx = cfg.localGridCellPx;\r\n        // unitsPerCell is derived in worker; if available, set it\r\n        if (typeof cfg.unitsPerCell === 'number') this.snap.unitsPerCell = cfg.unitsPerCell;\r\n        if (cfg.origin && typeof cfg.origin.x === 'number') {\r\n            this.snap.origin.set(cfg.origin.x, cfg.origin.y || 0, cfg.origin.z || 0);\r\n        }\r\n    }\r\n\r\n    // Snap helpers\r\n    snapValueToGrid(v, step, origin = 0) {\r\n        if (!step || step <= 0) return v;\r\n        return Math.round((v - origin) / step) * step + origin;\r\n    }\r\n    snapAngle(angleRad, stepDeg) {\r\n        if (!stepDeg || stepDeg <= 0) return angleRad;\r\n        const step = THREE.MathUtils.degToRad(stepDeg);\r\n        return Math.round(angleRad / step) * step;\r\n    }\r\n    \r\n    applyRotationTransform(mouse, camera) {\r\n        if (!this.activeHandle || !this.targetObject) return;\r\n        \r\n        const axis = this.activeHandle.axis;\r\n        \r\n        // Calculate current angle\r\n        this.rotationCurrentAngle = this.calculateRotationAngle(mouse, camera, axis);\r\n        \r\n        // Calculate angle difference\r\n        let angleDiff = this.rotationCurrentAngle - this.rotationStartAngle;\r\n        \r\n        // Normalize to [-PI, PI]\r\n        while (angleDiff > Math.PI) angleDiff -= 2 * Math.PI;\r\n        while (angleDiff < -Math.PI) angleDiff += 2 * Math.PI;\r\n        \r\n        // Snap angle if enabled\r\n        let appliedAngle = angleDiff;\r\n        if (this.snap.enabled) {\r\n            appliedAngle = this.snapAngle(angleDiff, this.snap.angleDeg);\r\n        }\r\n\r\n        // Apply rotation - angleDiff/appliedAngle is in radians\r\n        // For left-handed coordinate system:\r\n        // X and Z rotations: clockwise (from viewer perspective) should increase the value\r\n        // Y rotation: clockwise (from top-down) should increase the value\r\n        // The calculated angle diff needs to be inverted for X and Z to match this\r\n        if (axis === 'x') {\r\n            // Invert the angle diff for X to make clockwise positive\r\n            this.targetObject.rotation.x = this.initialTransform.rotation.x - appliedAngle;\r\n        } else if (axis === 'y') {\r\n            // Y rotation stays as is\r\n            this.targetObject.rotation.y = this.initialTransform.rotation.y + appliedAngle;\r\n        } else if (axis === 'z') {\r\n            // Invert the angle diff for Z to make clockwise positive\r\n            this.targetObject.rotation.z = this.initialTransform.rotation.z - appliedAngle;\r\n        }\r\n        \r\n        // Get mouse world position for extended line\r\n        const mouseWorldPos = this.getMouseWorldPosition(mouse, camera, axis);\r\n        \r\n        // Update rotation feedback visuals\r\n        // Use snapped angle for 3D visuals (lines and pie), keep overlay dashed line following mouse\r\n        const visualCurrent = (this.snap.enabled ? (this.rotationStartAngle + appliedAngle) : this.rotationCurrentAngle);\r\n        const savedCurrent = this.rotationCurrentAngle; // preserve for overlay\r\n        const prevRotationCurrentAngle = this.rotationCurrentAngle;\r\n        this.rotationCurrentAngle = visualCurrent;\r\n        this.updateRotationFeedback(\r\n            this.rotationStartAngle,\r\n            this.rotationCurrentAngle,\r\n            axis,\r\n            this.handleSize.rotation,\r\n            mouseWorldPos,\r\n            mouse\r\n        );\r\n        // Restore actual (unsnapped) current angle for continued computation; overlay uses mouseNDC already\r\n        this.rotationCurrentAngle = prevRotationCurrentAngle;\r\n        \r\n        // Make sure rotation order is preserved\r\n        this.targetObject.rotation.order = this.initialTransform.rotation.order || 'XYZ';\r\n    }\r\n    \r\n    handleMouseUp() {\r\n        if (this.isDragging) {\r\n            const wasPositionDragged = this.activeHandle && this.activeHandle.type === 'position';\r\n            \r\n            // ADDED: Calculate position delta before resetting\r\n            let positionDelta = null;\r\n            if (wasPositionDragged && this.dragStartPosition && this.targetObject) {\r\n                this.dragEndPosition = this.targetObject.position.clone();\r\n                positionDelta = {\r\n                    x: this.dragEndPosition.x - this.dragStartPosition.x,\r\n                    y: this.dragEndPosition.y - this.dragStartPosition.y,\r\n                    z: this.dragEndPosition.z - this.dragStartPosition.z\r\n                };\r\n            }\r\n            \r\n            // Reset drag state first\r\n            this.isDragging = false;\r\n            this.activeHandle = null;\r\n            \r\n            // Then hide delta label\r\n            this.updateDeltaLabel(null);\r\n            \r\n            // Hide rotation feedback\r\n            if (this.rotationFeedbackGroup) {\r\n                this.rotationFeedbackGroup.visible = false;\r\n            }\r\n            \r\n            // Hide scale feedback\r\n            if (this.scaleFeedbackGroup) {\r\n                this.scaleFeedbackGroup.visible = false;\r\n            }\r\n            \r\n            // Hide individual scale feedback elements\r\n            if (this.scaleFeedbackLine) {\r\n                this.scaleFeedbackLine.visible = false;\r\n            }\r\n            if (this.scalePlaceholderBox) {\r\n                this.scalePlaceholderBox.visible = false;\r\n            }\r\n            \r\n            // Hide uniform scale circles\r\n            if (this.uniformScaleStartCircle) {\r\n                this.uniformScaleStartCircle.visible = false;\r\n            }\r\n            if (this.uniformScaleCurrentCircle) {\r\n                this.uniformScaleCurrentCircle.visible = false;\r\n            }\r\n            \r\n            // Restore original scale box visibility\r\n            if (this.originalScaleBox) {\r\n                this.originalScaleBox.visible = true;\r\n                this.originalScaleBox = null;\r\n            }\r\n            \r\n            // Clean up uniform scale tracking\r\n            this.baseScaleValues = null;\r\n            \r\n            // Restore donut visibility (rings and fill)\r\n            if (this.uniformScaleGizmoChildren) {\r\n                this.uniformScaleGizmoChildren.forEach(item => {\r\n                    item.mesh.visible = item.wasVisible;\r\n                });\r\n                this.uniformScaleGizmoChildren = null;\r\n            }\r\n            \r\n            if (this.overlay && this.overlay.group) {\r\n                // Hide overlay visuals after drag\r\n                this.overlay.group.visible = false;\r\n                \r\n                // Hide all overlay lines instead of removing them\r\n                if (this._posOverlay && this._posOverlay.line) {\r\n                    this._posOverlay.line.visible = false;\r\n                }\r\n                if (this._overlayVis && this._overlayVis.extLine) {\r\n                    this._overlayVis.extLine.visible = false;\r\n                }\r\n                if (this._rotOverlay && this._rotOverlay.extLine) {\r\n                    this._rotOverlay.extLine.visible = false;\r\n                }\r\n            }\r\n            \r\n            // Clear scale tracking\r\n            this.scaleInitialBoxPosition = null;\r\n            this.scaleInitialScale = null;\r\n            this.scaleClickDistance = null;\r\n            \r\n            // Reset highlights\r\n            this.gizmoGroup.traverse(child => {\r\n                if (child.material) {\r\n                    this.highlightHandle(child, false);\r\n                }\r\n            });\r\n            \r\n            // Show all gizmos again after dragging\r\n            this.showAllGizmos();\r\n            \r\n            // Send deactivation message\r\n            self.postMessage({\r\n                type: 'GIZMO_ACTIVE',\r\n                data: { active: false }\r\n            });\r\n            \r\n            // If position was dragged, send a message with delta to update camera\r\n            if (wasPositionDragged && this.targetObject && positionDelta) {\r\n                self.postMessage({\r\n                    type: 'POSITION_DRAG_ENDED',\r\n                    data: {\r\n                        position: {\r\n                            x: this.targetObject.position.x,\r\n                            y: this.targetObject.position.y,\r\n                            z: this.targetObject.position.z\r\n                        },\r\n                        delta: positionDelta  // Include the delta for camera follow\r\n                    }\r\n                });\r\n            }\r\n            \r\n            // Clear position tracking\r\n            this.dragStartPosition = null;\r\n            this.dragEndPosition = null;\r\n            this.positionDragStartWorld = null;\r\n            \r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n    \r\n    updateHover(mouse, camera) {\r\n        this.raycaster.setFromCamera(mouse, camera);\r\n        const intersects = this.raycaster.intersectObjects(this.gizmoGroup.children, true);\r\n        \r\n        // Track previous hover state\r\n        const wasHovering = this.hoveredHandle !== null;\r\n        \r\n        // Reset all highlights\r\n        this.gizmoGroup.traverse(child => {\r\n            if (child.material && !this.isDragging) {\r\n                this.resetHandleMaterial(child);\r\n            }\r\n        });\r\n        \r\n        // Highlight hovered object\r\n        if (intersects.length > 0 && !this.isDragging) {\r\n            const object = intersects[0].object;\r\n            if (object.userData.type) {\r\n                this.highlightHandle(object, true);\r\n                this.hoveredHandle = object.userData;\r\n                \r\n                // Send hover message if state changed\r\n                if (!wasHovering) {\r\n                    self.postMessage({\r\n                        type: 'GIZMO_HOVER',\r\n                        data: { hovering: true }\r\n                    });\r\n                }\r\n                \r\n                return true;\r\n            }\r\n        } else {\r\n            this.hoveredHandle = null;\r\n            \r\n            // Send unhover message if state changed\r\n            if (wasHovering) {\r\n                self.postMessage({\r\n                    type: 'GIZMO_HOVER',\r\n                    data: { hovering: false }\r\n                });\r\n            }\r\n        }\r\n        \r\n        return false;\r\n    }\r\n    \r\n    highlightHandle(object, highlight) {\r\n        if (!object.material) return;\r\n        \r\n        if (highlight) {\r\n            // Store original color if not already stored\r\n            if (!object.userData.originalColor) {\r\n                object.userData.originalColor = object.material.color.getHex();\r\n                object.userData.originalOpacity = object.material.opacity;\r\n            }\r\n            \r\n            // Apply highlight\r\n            object.material.color = new THREE.Color(this.colors.hover);\r\n            object.material.opacity = 1.0;\r\n            \r\n            if (object.material.emissive) {\r\n                object.material.emissive = new THREE.Color(this.colors.hover);\r\n                object.material.emissiveIntensity = 0.3;\r\n            }\r\n        } else {\r\n            this.resetHandleMaterial(object);\r\n        }\r\n    }\r\n    \r\n    resetHandleMaterial(object) {\r\n        if (!object.material) return;\r\n        \r\n        // Restore original color\r\n        if (object.userData.originalColor !== undefined) {\r\n            object.material.color.setHex(object.userData.originalColor);\r\n            object.material.opacity = object.userData.originalOpacity || 0.8;\r\n        }\r\n        \r\n        if (object.material.emissive) {\r\n            object.material.emissive = new THREE.Color(0x000000);\r\n            object.material.emissiveIntensity = 0;\r\n        }\r\n    }\r\n    \r\n    applyPositionTransform(delta, camera) {\r\n        if (!this.activeHandle || !this.targetObject) return;\r\n        \r\n        const axis = this.activeHandle.axis;\r\n        \r\n        // Use the current mouse position to find where the initial click point should be\r\n        const mouse = this.dragCurrent;\r\n        \r\n    if (axis.length === 1) {\r\n            // Single axis movement - find closest point on axis line to mouse ray\r\n            const axisVector = new THREE.Vector3();\r\n            axisVector[axis] = 1;\r\n            \r\n            // Invert Y axis for C3 coordinate system\r\n            if (axis === 'y') {\r\n                axisVector.y = -1;\r\n            }\r\n            \r\n            // Transform to world space if needed\r\n            if (this.transformSpace === 'local') {\r\n                axisVector.applyQuaternion(this.targetObject.quaternion);\r\n            }\r\n            \r\n            // Create a ray from camera through mouse position\r\n            this.raycaster.setFromCamera(mouse, camera);\r\n            const ray = this.raycaster.ray;\r\n            \r\n            // The axis line passes through the initial click point, not the object origin\r\n            const axisOrigin = this.initialClickPoint || this.initialTransform.position.clone();\r\n            const axisDirection = axisVector.normalize();\r\n            \r\n            // Find closest points between ray and axis line\r\n            // Using the formula for closest points between two skew lines\r\n            const rayDir = ray.direction;\r\n            const rayOrigin = ray.origin;\r\n            \r\n            const a = rayDir.dot(rayDir);\r\n            const b = rayDir.dot(axisDirection);\r\n            const c = axisDirection.dot(axisDirection);\r\n            const d = rayDir.dot(rayOrigin.clone().sub(axisOrigin));\r\n            const e = axisDirection.dot(rayOrigin.clone().sub(axisOrigin));\r\n            \r\n            const denominator = a * c - b * b;\r\n            \r\n            if (Math.abs(denominator) > 0.00001) {\r\n                // Lines are not parallel\r\n                const t = (b * e - c * d) / denominator; // Distance along ray\r\n                const s = (a * e - b * d) / denominator; // Distance along axis\r\n                \r\n                // Get the closest point on the axis to the mouse\r\n                const targetClickPoint = axisOrigin.clone().add(axisDirection.clone().multiplyScalar(s));\r\n                \r\n                // Calculate where the object should be to put the click point at the target\r\n                const objectOffset = this.initialClickOffset || new THREE.Vector3();\r\n                const newPosition = targetClickPoint.clone().sub(objectOffset);\r\n                \r\n                // Snap to grid on the active single axis only\r\n                if (this.snap.enabled) {\r\n                    const step = this.snap.unitsPerCell || 0; // fallback 0 = no snap\r\n                    if (step > 0) {\r\n                        if (axis === 'x') newPosition.x = this.snapValueToGrid(newPosition.x, step, this.snap.origin.x);\r\n                        else if (axis === 'y') newPosition.y = this.snapValueToGrid(newPosition.y, step, this.snap.origin.y);\r\n                        else if (axis === 'z') newPosition.z = this.snapValueToGrid(newPosition.z, step, this.snap.origin.z);\r\n                    }\r\n                }\r\n                this.targetObject.position.copy(newPosition);\r\n            }\r\n            \r\n        } else {\r\n            // Plane movement (2 axes)\r\n            const axes = axis.split('');\r\n            \r\n            // Create plane normal (perpendicular to the two axes)\r\n            const planeNormal = new THREE.Vector3();\r\n            if (axes.includes('x') && axes.includes('y')) {\r\n                planeNormal.set(0, 0, 1);\r\n            } else if (axes.includes('y') && axes.includes('z')) {\r\n                planeNormal.set(1, 0, 0);\r\n            } else if (axes.includes('x') && axes.includes('z')) {\r\n                planeNormal.set(0, 1, 0);\r\n            }\r\n            \r\n            // Transform to world space if needed\r\n            if (this.transformSpace === 'local') {\r\n                planeNormal.applyQuaternion(this.targetObject.quaternion);\r\n            }\r\n            \r\n            // Create plane at initial click position\r\n            const plane = new THREE.Plane(planeNormal, 0);\r\n            const planePoint = this.initialClickPoint || this.initialTransform.position.clone();\r\n            plane.setFromNormalAndCoplanarPoint(planeNormal, planePoint);\r\n            \r\n            // Cast ray and find intersection with plane\r\n            this.raycaster.setFromCamera(mouse, camera);\r\n            const intersection = new THREE.Vector3();\r\n            this.raycaster.ray.intersectPlane(plane, intersection);\r\n            \r\n            if (intersection) {\r\n                // Calculate where the object should be to put the click point at the intersection\r\n                const objectOffset = this.initialClickOffset || new THREE.Vector3();\r\n                const targetPosition = intersection.clone().sub(objectOffset);\r\n                \r\n                // Constrain movement to the allowed axes\r\n                const newPosition = this.targetObject.position.clone();\r\n                \r\n                if (axes.includes('x')) {\r\n                    newPosition.x = targetPosition.x;\r\n                }\r\n                if (axes.includes('y')) {\r\n                    newPosition.y = targetPosition.y;\r\n                }\r\n                if (axes.includes('z')) {\r\n                    newPosition.z = targetPosition.z;\r\n                }\r\n                \r\n                // Snap to grid on the two allowed axes\r\n                if (this.snap.enabled) {\r\n                    const step = this.snap.unitsPerCell || 0;\r\n                    if (step > 0) {\r\n                        if (axes.includes('x')) newPosition.x = this.snapValueToGrid(newPosition.x, step, this.snap.origin.x);\r\n                        if (axes.includes('y')) newPosition.y = this.snapValueToGrid(newPosition.y, step, this.snap.origin.y);\r\n                        if (axes.includes('z')) newPosition.z = this.snapValueToGrid(newPosition.z, step, this.snap.origin.z);\r\n                    }\r\n                }\r\n                this.targetObject.position.copy(newPosition);\r\n            }\r\n        }\r\n    }\r\n    \r\n    applyScaleTransform(delta, camera) {\r\n        if (!this.activeHandle || !this.targetObject) return;\r\n        \r\n        const axis = this.activeHandle.axis;\r\n        const mouse = this.dragCurrent;\r\n        \r\n        if (axis === 'uniform') {\r\n            // Calculate current mouse position in world space\r\n            this.raycaster.setFromCamera(mouse, camera);\r\n            const intersectPoint = new THREE.Vector3();\r\n            const plane = new THREE.Plane(new THREE.Vector3(0, 0, 1), 0);\r\n            plane.translate(this.gizmoGroup.position);\r\n            \r\n            // If camera is looking along Z, use Y plane instead\r\n            const cameraDir = new THREE.Vector3();\r\n            camera.getWorldDirection(cameraDir);\r\n            if (Math.abs(cameraDir.z) > 0.9) {\r\n                plane.normal.set(0, 1, 0);\r\n            }\r\n            \r\n            this.raycaster.ray.intersectPlane(plane, intersectPoint);\r\n            \r\n            const currentDistance = intersectPoint.distanceTo(this.gizmoGroup.position);\r\n            const scaleRatio = currentDistance / this.uniformScaleInitialDistance;\r\n            \r\n            // Update SCALE property (not x/y/z)\r\n            let newScale = this.uniformScaleInitialScale * scaleRatio;\r\n            \r\n            // Apply snapping if enabled\r\n            if (this.snap.enabled && this.snap.snapScale) {\r\n                newScale = Math.round(newScale / this.snap.snapScale) * this.snap.snapScale;\r\n            }\r\n            \r\n            this.targetObject.userData = this.targetObject.userData || {};\r\n            this.targetObject.userData.scale = Math.max(0.01, newScale);\r\n            \r\n            // Also update visual scale uniformly to see the change\r\n            // Apply uniform scale while maintaining the base scale values\r\n            this.targetObject.scale.x = this.baseScaleValues.x * newScale;\r\n            this.targetObject.scale.y = this.baseScaleValues.y * newScale;\r\n            this.targetObject.scale.z = this.baseScaleValues.z * newScale;\r\n            \r\n            // Update visual feedback circles in local space\r\n            if (this.uniformScaleCurrentCircle && this.scaleFeedbackGroup) {\r\n                const localRadius = currentDistance / this.scaleFeedbackGroup.scale.x;\r\n                const circlePoints = new THREE.Path().absarc(0, 0, localRadius, 0, Math.PI * 2, false).getPoints(64);\r\n                this.uniformScaleCurrentCircle.geometry.setFromPoints(circlePoints);\r\n            }\r\n            \r\n            // Update overlay\r\n            if (this.overlay.scene && this.overlay.group) {\r\n                this.dragCurrent = mouse.clone();\r\n                this.updateScaleFeedbackOverlay(axis);\r\n            }\r\n        } else {\r\n            // Get current mouse position projected onto the axis\r\n            const currentMousePos = this.getScaleMousePosition(mouse, camera, axis);\r\n            \r\n            // Calculate the distance from origin to current mouse position\r\n            const origin = this.targetObject.position.clone();\r\n            const currentMouseDistance = currentMousePos.distanceTo(origin);\r\n            \r\n            // Avoid division by zero\r\n            if (this.scaleClickDistance < 0.001) return;\r\n            \r\n            // Calculate scale ratio: if we click at distance D and drag to 2D, scale doubles\r\n            const scaleRatio = currentMouseDistance / this.scaleClickDistance;\r\n            \r\n            // Apply this ratio to the initial scale\r\n            let newScale = this.scaleInitialScale * scaleRatio;\r\n            \r\n            // Apply snapping if enabled\r\n            if (this.snap.enabled && this.snap.snapScale) {\r\n                newScale = Math.round(newScale / this.snap.snapScale) * this.snap.snapScale;\r\n            }\r\n            \r\n            // Apply scale to the specific axis\r\n            this.targetObject.scale[axis] = newScale;\r\n            \r\n            // Update the base scale value for this axis (scale without uniform multiplier)\r\n            const currentUniformScale = this.targetObject.userData?.scale || 1.0;\r\n            if (!this.targetObject.userData) this.targetObject.userData = {};\r\n            if (!this.targetObject.userData.baseScale) {\r\n                this.targetObject.userData.baseScale = { x: 1, y: 1, z: 1 };\r\n            }\r\n            this.targetObject.userData.baseScale[axis] = newScale / currentUniformScale;\r\n            \r\n            // Update scale feedback with current mouse position\r\n            this.updateScaleFeedback(axis, currentMousePos);\r\n        }\r\n        \r\n        // Clamp minimum scale\r\n        this.targetObject.scale.x = Math.max(0.01, this.targetObject.scale.x);\r\n        this.targetObject.scale.y = Math.max(0.01, this.targetObject.scale.y);\r\n        this.targetObject.scale.z = Math.max(0.01, this.targetObject.scale.z);\r\n    }\r\n    \r\n    updateGizmoTransform() {\r\n        if (!this.targetObject || !this.gizmoGroup) return;\r\n        \r\n        // Update gizmo position to match target\r\n        this.gizmoGroup.position.copy(this.targetObject.position);\r\n        \r\n        // Update rotation if in local space\r\n        if (this.transformSpace === 'local') {\r\n            this.gizmoGroup.quaternion.copy(this.targetObject.quaternion);\r\n        } else {\r\n            this.gizmoGroup.quaternion.identity();\r\n        }\r\n        \r\n        // Make uniform scale gizmo face camera\r\n        if (this.uniformScaleGizmo && this.camera) {\r\n            // Calculate look direction from gizmo to camera\r\n            const lookDir = new THREE.Vector3();\r\n            lookDir.subVectors(this.camera.position, this.gizmoGroup.position).normalize();\r\n            \r\n            // Create a rotation that makes the donut face the camera\r\n            const up = new THREE.Vector3(0, 1, 0);\r\n            const rotationMatrix = new THREE.Matrix4();\r\n            rotationMatrix.lookAt(this.gizmoGroup.position, this.camera.position, up);\r\n            \r\n            const quaternion = new THREE.Quaternion();\r\n            quaternion.setFromRotationMatrix(rotationMatrix);\r\n            \r\n            // Apply to uniform scale gizmo within the group\r\n            this.uniformScaleGizmo.quaternion.copy(quaternion);\r\n        }\r\n        \r\n        // Scale gizmo based on camera distance for consistent size\r\n        if (this.camera) {\r\n            const distance = this.camera.position.distanceTo(this.gizmoGroup.position);\r\n            const scale = distance * 0.108; // Increased by 20% from 0.09\r\n            this.gizmoGroup.scale.setScalar(scale);\r\n            \r\n            // Also scale rotation feedback group\r\n            if (this.rotationFeedbackGroup && this.rotationFeedbackGroup.visible) {\r\n                this.rotationFeedbackGroup.position.copy(this.gizmoGroup.position);\r\n                this.rotationFeedbackGroup.quaternion.copy(this.gizmoGroup.quaternion);\r\n                this.rotationFeedbackGroup.scale.setScalar(scale);\r\n            }\r\n            \r\n            // Also scale scale feedback group\r\n            if (this.scaleFeedbackGroup && this.scaleFeedbackGroup.visible) {\r\n                this.scaleFeedbackGroup.position.copy(this.gizmoGroup.position);\r\n                \r\n                // Make feedback circles face camera too when uniform scale is active\r\n                if (this.uniformScaleStartCircle && this.uniformScaleStartCircle.visible && this.uniformScaleGizmo) {\r\n                    // Use same quaternion as uniform scale gizmo to face camera\r\n                    this.scaleFeedbackGroup.quaternion.copy(this.uniformScaleGizmo.quaternion);\r\n                } else {\r\n                    this.scaleFeedbackGroup.quaternion.copy(this.gizmoGroup.quaternion);\r\n                }\r\n                \r\n                this.scaleFeedbackGroup.scale.setScalar(scale);\r\n            }\r\n        }\r\n    }\r\n    \r\n    sendTransformUpdate() {\r\n        if (!this.targetObject) return;\r\n        \r\n        // Convert Three.js transforms to C3 coordinates\r\n        const c3Position = {\r\n            x: this.targetObject.position.x * 64, // Convert to pixels\r\n            y: -this.targetObject.position.y * 64, // Flip Y\r\n            z: this.targetObject.position.z * 64\r\n        };\r\n        \r\n        // Convert Three.js rotation (right-handed) to C3 rotation (left-handed)\r\n        // This is the inverse of convertC3ToThree\r\n        const c3Rotation = {\r\n            x: -(this.targetObject.rotation.x * 180 / Math.PI), // Invert X\r\n            y: this.targetObject.rotation.y * 180 / Math.PI,    // Y stays same\r\n            z: -(this.targetObject.rotation.z * 180 / Math.PI)  // Invert Z\r\n        };\r\n        \r\n        // Build the update message\r\n        const updateData = {\r\n            position: c3Position,\r\n            rotation: c3Rotation,\r\n            source: 'gizmo'\r\n        };\r\n        \r\n        // IMPORTANT: Only send scale data if scale handle was actually used\r\n        if (this.activeHandle && this.activeHandle.type === 'scale') {\r\n            if (this.activeHandle.axis === 'uniform') {\r\n                // Donut was dragged - send SCALE value only\r\n                updateData.uniformScale = this.targetObject.userData?.scale || 1.0;\r\n                // DO NOT send individual x/y/z scale values when uniform scale is used\r\n            } else {\r\n                // Individual axis scale - send ONLY the scale values\r\n                updateData.scale = {\r\n                    x: this.targetObject.scale.x,\r\n                    y: this.targetObject.scale.y,\r\n                    z: this.targetObject.scale.z\r\n                };\r\n                // DO NOT send uniformScale when individual axes are used\r\n                // C3 should maintain its own uniform scale value independently\r\n            }\r\n        }\r\n        \r\n        self.postMessage({\r\n            type: 'GIZMO_TRANSFORM_UPDATE',\r\n            data: updateData\r\n        });\r\n    }\r\n    \r\n    hideInactiveGizmos(activeType) {\r\n        // Get the active axis from the handle\r\n        const activeAxis = this.activeHandle ? this.activeHandle.axis : null;\r\n        \r\n        // Hide all gizmos except the active type\r\n        if (this.positionGizmo) {\r\n            if (activeType === 'position') {\r\n                // Show only the active axis/plane for position\r\n                this.positionGizmo.traverse(child => {\r\n                    if (child.userData && child.userData.axis) {\r\n                        // For single axis, show only that axis\r\n                        // For plane (2 axes), show the plane and its component axes\r\n                        if (activeAxis.length === 1) {\r\n                            // Single axis - hide everything except this axis\r\n                            child.visible = (child.userData.axis === activeAxis);\r\n                        } else {\r\n                            // Plane movement - show the plane and its component axes\r\n                            child.visible = (child.userData.axis === activeAxis || \r\n                                          activeAxis.includes(child.userData.axis));\r\n                        }\r\n                    }\r\n                });\r\n            } else {\r\n                this.positionGizmo.visible = false;\r\n            }\r\n        }\r\n        \r\n        if (this.rotationGizmo) {\r\n            if (activeType === 'rotation') {\r\n                // Show only the active rotation ring\r\n                this.rotationGizmo.traverse(child => {\r\n                    if (child.userData && child.userData.axis) {\r\n                        child.visible = (child.userData.axis === activeAxis);\r\n                    }\r\n                });\r\n            } else {\r\n                this.rotationGizmo.visible = false;\r\n            }\r\n        }\r\n        \r\n        if (this.scaleGizmo) {\r\n            if (activeType === 'scale' && activeAxis !== 'uniform') {\r\n                // Show only the active scale axis\r\n                this.scaleGizmo.traverse(child => {\r\n                    if (child.userData && child.userData.axis) {\r\n                        child.visible = (child.userData.axis === activeAxis);\r\n                    }\r\n                });\r\n            } else {\r\n                this.scaleGizmo.visible = (activeType === 'scale' && activeAxis !== 'uniform');\r\n            }\r\n        }\r\n        \r\n        if (this.uniformScaleGizmo) {\r\n            // Show uniform scale only if it's the active handle\r\n            this.uniformScaleGizmo.visible = (activeType === 'scale' && activeAxis === 'uniform');\r\n        }\r\n    }\r\n    \r\n    showAllGizmos() {\r\n        // Restore visibility based on current mode\r\n        this.setMode(this.transformMode);\r\n        \r\n        // Make sure all children of visible gizmos are also visible\r\n        if (this.positionGizmo && this.positionGizmo.visible) {\r\n            this.positionGizmo.traverse(child => {\r\n                child.visible = true;\r\n            });\r\n        }\r\n        \r\n        if (this.rotationGizmo && this.rotationGizmo.visible) {\r\n            this.rotationGizmo.traverse(child => {\r\n                child.visible = true;\r\n            });\r\n        }\r\n        \r\n        if (this.scaleGizmo && this.scaleGizmo.visible) {\r\n            this.scaleGizmo.traverse(child => {\r\n                child.visible = true;\r\n            });\r\n        }\r\n    }\r\n    \r\n    setMode(mode) {\r\n        this.transformMode = mode;\r\n        \r\n        // Show/hide appropriate gizmos\r\n        if (this.positionGizmo) this.positionGizmo.visible = (mode === 'position' || mode === 'all');\r\n        if (this.rotationGizmo) this.rotationGizmo.visible = (mode === 'rotation' || mode === 'all');\r\n        if (this.scaleGizmo) this.scaleGizmo.visible = (mode === 'scale' || mode === 'all');\r\n        if (this.uniformScaleGizmo) this.uniformScaleGizmo.visible = (mode === 'scale' || mode === 'all');\r\n    }\r\n    \r\n    setSpace(space) {\r\n        this.transformSpace = space;\r\n        this.updateGizmoTransform();\r\n    }\r\n    \r\n    setTarget(object) {\r\n        this.targetObject = object;\r\n        this.updateGizmoTransform();\r\n    }\r\n    \r\n    setVisible(visible) {\r\n        if (this.gizmoGroup) {\r\n            this.gizmoGroup.visible = visible;\r\n        }\r\n        // Rotation feedback visibility is managed during drag operations\r\n        // No need to manage it here since it's only shown during active rotation\r\n    }\r\n    \r\n    update() {\r\n        // Update gizmo each frame\r\n        this.updateGizmoTransform();\r\n    }\r\n    \r\n    dispose() {\r\n        // Dispose main gizmo group\r\n        if (this.gizmoGroup && this.scene) {\r\n            this.scene.remove(this.gizmoGroup);\r\n            \r\n            // Dispose geometries and materials\r\n            this.gizmoGroup.traverse(child => {\r\n                if (child.geometry) child.geometry.dispose();\r\n                if (child.material) {\r\n                    if (Array.isArray(child.material)) {\r\n                        child.material.forEach(mat => mat.dispose());\r\n                    } else {\r\n                        child.material.dispose();\r\n                    }\r\n                }\r\n            });\r\n            \r\n            this.gizmoGroup = null;\r\n        }\r\n        \r\n        // Dispose rotation feedback group\r\n        if (this.rotationFeedbackGroup && this.scene) {\r\n            this.scene.remove(this.rotationFeedbackGroup);\r\n            \r\n            this.rotationFeedbackGroup.traverse(child => {\r\n                if (child.geometry) child.geometry.dispose();\r\n                if (child.material) {\r\n                    if (Array.isArray(child.material)) {\r\n                        child.material.forEach(mat => mat.dispose());\r\n                    } else {\r\n                        child.material.dispose();\r\n                    }\r\n                }\r\n            });\r\n            \r\n            this.rotationFeedbackGroup = null;\r\n        }\r\n        \r\n        // Dispose scale feedback group\r\n        if (this.scaleFeedbackGroup && this.scene) {\r\n            this.scene.remove(this.scaleFeedbackGroup);\r\n            \r\n            this.scaleFeedbackGroup.traverse(child => {\r\n                if (child.geometry) child.geometry.dispose();\r\n                if (child.material) {\r\n                    if (Array.isArray(child.material)) {\r\n                        child.material.forEach(mat => mat.dispose());\r\n                    } else {\r\n                        child.material.dispose();\r\n                    }\r\n                }\r\n            });\r\n            \r\n            this.scaleFeedbackGroup = null;\r\n        }\r\n        \r\n        // Clear component references\r\n        this.positionGizmo = null;\r\n        this.rotationGizmo = null;\r\n        this.scaleGizmo = null;\r\n        this.uniformScaleGizmo = null;\r\n        this.rotationPie = null;\r\n        this.rotationStartLine = null;\r\n        this.rotationCurrentLine = null;\r\n        this.scaleFeedbackLine = null;\r\n        this.scalePlaceholderBox = null;\r\n    }\r\n    \r\n    // Add method to properly clean up existing gizmos\r\n    disposeGroup(group) {\r\n        if (!group) return;\r\n        \r\n        group.traverse((child) => {\r\n            if (child.geometry) child.geometry.dispose();\r\n            if (child.material) {\r\n                if (Array.isArray(child.material)) {\r\n                    child.material.forEach(mat => mat.dispose());\r\n                } else {\r\n                    child.material.dispose();\r\n                }\r\n            }\r\n        });\r\n        \r\n        if (group.parent) {\r\n            group.parent.remove(group);\r\n        }\r\n    }\r\n}\r\n\r\n// Export for worker use\r\nif (typeof self !== 'undefined') {\r\n    self.TransformGizmo = TransformGizmo;\r\n}"
      },
      "utils": {
        "cameraSetup": '// MAIN THREAD: camera-setup.js - C3-Style Camera Controls\r\nfunction setupCameraControls() {\r\n    console.log("[Z3D Editor] \u{1F504} Setting up C3-style camera controls...");\r\n    updateStatus("\u{1F504} Setting up camera controls...", "loading");\r\n    \r\n    const canvas = document.getElementById("three-canvas");\r\n    if (!canvas) {\r\n        console.error("[Z3D Editor] \u274C Canvas not found");\r\n        return false;\r\n    }\r\n    \r\n    try {\r\n        // \u2705 FIXED: Create camera with C3-style orientation (Z up)\r\n        window.camera = new THREE.PerspectiveCamera(75, canvas.clientWidth / canvas.clientHeight, 0.1, 1000);\r\n        \r\n        // \u2705 TEMPORARY: Set initial position (will be updated by worker)\r\n        window.camera.position.set(0, -5, 5); // Along NEGATIVE Y-axis\r\n        window.camera.up.set(0, 0, 1); // Z up vector like C3\r\n        window.camera.lookAt(0, 0, 0);\r\n        \r\n        // \u2705 CRITICAL: Make orbitControls global so worker message handler can access it\r\n        window.orbitControls = null; // Initialize as global\r\n        \r\n        if (THREE.OrbitControls) {\r\n            window.orbitControls = new THREE.OrbitControls(window.camera, canvas); // \u2705 Assign to global\r\n            window.orbitControls.enabled = true;\r\n            window.orbitControls.enableDamping = true;\r\n            window.orbitControls.dampingFactor = 0.05;\r\n            window.orbitControls.target.set(0, 0, 0);\r\n            \r\n            // \u2705 FIXED: Configure orbit controls for C3-style navigation\r\n            window.orbitControls.screenSpacePanning = false; // Important for Z-up\r\n            window.orbitControls.maxPolarAngle = Math.PI; // Allow full rotation\r\n            window.orbitControls.minDistance = 0.1;\r\n            window.orbitControls.maxDistance = 1000;\r\n            \r\n            // \u2705 ENHANCED: Update camera AND notify worker of target changes\r\n            let lastTargetUpdate = 0;\r\n            const TARGET_UPDATE_THROTTLE = 100; // ms\r\n            \r\n            window.orbitControls.addEventListener("change", () => {\r\n                console.log("[ORBIT CHANGE] Camera moved!"); // ADD THIS\r\n                const now = Date.now();\r\n                \r\n                if (window.worker) {\r\n                    console.log("[ORBIT CHANGE] Sending to worker"); // ADD THIS\r\n                    \r\n                    // Always send camera updates\r\n                    window.worker.postMessage({\r\n                        type: "CAMERA_UPDATE",\r\n                        data: {\r\n                            position: window.camera.position.toArray(),\r\n                            quaternion: window.camera.quaternion.toArray(),\r\n                            target: window.orbitControls.target.toArray()\r\n                        }\r\n                    });\r\n                    \r\n                    // Throttled target updates\r\n                    if (now - lastTargetUpdate > TARGET_UPDATE_THROTTLE) {\r\n                        window.worker.postMessage({\r\n                            type: "CAMERA_TARGET_UPDATE",\r\n                            data: {\r\n                                target: window.orbitControls.target.toArray(),\r\n                                timestamp: now\r\n                            }\r\n                        });\r\n                        lastTargetUpdate = now;\r\n                    }\r\n                } else {\r\n                    console.warn("[ORBIT CHANGE] No worker available!"); // ADD THIS\r\n                }\r\n            });\r\n            \r\n            // \u2705 NEW: Function to update camera target (called when model moves)\r\n            window.updateCameraTarget = function(newTarget) {\r\n                if (window.orbitControls && newTarget) {\r\n                    console.log("[Z3D Editor] Updating camera target to:", newTarget);\r\n                    window.orbitControls.target.set(newTarget.x || 0, newTarget.y || 0, newTarget.z || 0);\r\n                    window.orbitControls.update();\r\n                }\r\n            };\r\n            \r\n            // \u2705 NEW: Function to sync OrbitControls with worker camera state\r\n            window.syncOrbitControlsToCamera = function(cameraState) {\r\n                if (window.orbitControls && cameraState) {\r\n                    console.log("[Z3D Editor] Syncing OrbitControls to worker camera state:", cameraState);\r\n                    \r\n                    // Temporarily disable events to prevent feedback loop\r\n                    const originalEnabled = window.orbitControls.enabled;\r\n                    window.orbitControls.enabled = false;\r\n                    \r\n                    // Update camera position and target\r\n                    if (cameraState.position) {\r\n                        window.camera.position.fromArray(cameraState.position);\r\n                    }\r\n                    if (cameraState.target) {\r\n                        window.orbitControls.target.fromArray(cameraState.target);\r\n                        window.camera.lookAt(window.orbitControls.target);\r\n                    }\r\n                    if (cameraState.up) {\r\n                        window.camera.up.fromArray(cameraState.up);\r\n                    }\r\n                    \r\n                    // Force OrbitControls to update its internal state\r\n                    window.orbitControls.update();\r\n                    \r\n                    // Re-enable controls after a brief delay to prevent jump\r\n                    setTimeout(() => {\r\n                        window.orbitControls.enabled = true;\r\n                        console.log("[Z3D Editor] OrbitControls sync complete, controls re-enabled");\r\n                    }, 50);\r\n                }\r\n            };\r\n            \r\n            console.log("[Z3D Editor] \u2705 C3-style OrbitControls created and made global");\r\n\r\n            console.log("[Z3D Editor] Canvas for OrbitControls:", canvas);\r\n            console.log("[Z3D Editor] Canvas id:", canvas.id);\r\n            console.log("[Z3D Editor] Canvas in DOM:", document.body.contains(canvas));\r\n            console.log("[Z3D Editor] OrbitControls created:", window.orbitControls);\r\n            console.log("[Z3D Editor] OrbitControls enabled:", window.orbitControls.enabled);\r\n\r\n            // Also check after a delay\r\n            setTimeout(() => {\r\n                console.log("[Z3D Editor] After 1s - OrbitControls enabled:", window.orbitControls?.enabled);\r\n                console.log("[Z3D Editor] After 1s - Canvas in DOM:", document.body.contains(canvas));\r\n                \r\n                // FORCE ENABLE if still disabled\r\n                if (window.orbitControls && !window.orbitControls.enabled) {\r\n                    console.warn("[Z3D Editor] OrbitControls still disabled after 1s, forcing enable!");\r\n                    window.orbitControls.enabled = true;\r\n                }\r\n            }, 1000);\r\n        }\r\n        \r\n        // \u2705 ENHANCED: Animation loop with C3-style camera updates\r\n        function animate() {\r\n            if (window.orbitControls) {\r\n                window.orbitControls.update();\r\n                \r\n                // \u2705 Ensure camera up vector stays Z (in case it drifts)\r\n                if (window.camera.up.z < 0.9) { // Tolerance for drift\r\n                    window.camera.up.set(0, 0, 1);\r\n                    console.log("[Z3D Editor] Corrected camera up vector to Z");\r\n                }\r\n            }\r\n            requestAnimationFrame(animate);\r\n        }\r\n        animate();\r\n        \r\n        console.log("[Z3D Editor] \u2705 C3-style camera controls ready");\r\n        return true;\r\n        \r\n    } catch (error) {\r\n        console.error("[Z3D Editor] \u274C Camera setup failed:", error);\r\n        updateStatus("\u274C Camera setup failed: " + error.message, "error");\r\n        return false;\r\n    }\r\n}\r\n\r\n// \u2705 NEW: Function to handle model position changes\r\nfunction handleModelPositionChange(newPosition) {\r\n    console.log("[Z3D Editor] Model position changed:", newPosition);\r\n    \r\n    // Update camera target to follow the model\r\n    if (window.updateCameraTarget) {\r\n        window.updateCameraTarget(newPosition);\r\n    }\r\n}\r\n\r\n// \u2705 NEW: Global function to reset camera view\r\nfunction resetCameraView() {\r\n    if (window.camera) {\r\n        window.camera.position.set(5, -5, 5);\r\n        window.camera.up.set(0, 0, 1);\r\n        window.camera.lookAt(0, 0, 0);\r\n        \r\n        // Update orbit controls target if available\r\n        if (window.updateCameraTarget) {\r\n            window.updateCameraTarget({ x: 0, y: 0, z: 0 });\r\n        }\r\n        \r\n        console.log("[Z3D Editor] Camera view reset to C3-style default");\r\n    }\r\n}',
        "canvasManager": "/* FILE: templates/scripts/utils/canvas-manager.js */\r\n/* Manages canvas sizing for both offscreen and regular modes */\r\n\r\nclass CanvasManager {\r\n    constructor() {\r\n        this.canvas = null;\r\n        this.mode = 'regular'; // 'offscreen' or 'regular'\r\n        this.worker = null;\r\n        this.lastSize = { width: 0, height: 0 };\r\n        this.resizeObserver = null;\r\n    }\r\n\r\n    /**\r\n     * Initialize with worker reference\r\n     */\r\n    initialize(worker) {\r\n        this.worker = worker;\r\n        this.canvas = document.getElementById('three-canvas');\r\n        \r\n        if (!this.canvas) {\r\n            console.error('[CanvasManager] Canvas element not found');\r\n            return false;\r\n        }\r\n\r\n        console.log('[CanvasManager] Initializing...');\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Setup canvas for rendering (called from model-loader.js)\r\n     */\r\n    setupCanvas(config = {}) {\r\n        if (!this.canvas || !this.worker) {\r\n            console.error('[CanvasManager] Not properly initialized');\r\n            return false;\r\n        }\r\n\r\n        // Get initial size from viewport\r\n        const viewport = document.getElementById('viewport-area') || this.canvas.parentElement;\r\n        const rect = viewport.getBoundingClientRect();\r\n        const width = Math.max(1, Math.floor(rect.width));\r\n        const height = Math.max(1, Math.floor(rect.height));\r\n\r\n        console.log(`[CanvasManager] Setting up canvas at ${width}x${height}`);\r\n\r\n        // Check if offscreen is supported\r\n        if (typeof this.canvas.transferControlToOffscreen === 'function') {\r\n            return this.setupOffscreenCanvas(width, height, config);\r\n        } else {\r\n            return this.setupRegularCanvas(width, height, config);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup offscreen canvas (preferred for performance)\r\n     */\r\n    setupOffscreenCanvas(width, height, config) {\r\n        try {\r\n            console.log('[CanvasManager] Using OffscreenCanvas mode');\r\n            \r\n            // CRITICAL: Set dimensions BEFORE transfer\r\n            this.canvas.width = width;\r\n            this.canvas.height = height;\r\n            \r\n            // Remove any inline styles\r\n            this.cleanCanvasStyles();\r\n            \r\n            // Transfer to offscreen\r\n            const offscreen = this.canvas.transferControlToOffscreen();\r\n            this.mode = 'offscreen';\r\n            \r\n            // Send to worker with config\r\n            this.worker.postMessage({\r\n                type: 'SETUP_CANVAS',\r\n                data: {\r\n                    canvas: offscreen,\r\n                    width: width,\r\n                    height: height,\r\n                    mode: 'offscreen',\r\n                    cameraParams: config.cameraParams || {\r\n                        position: [5, -5, 5],\r\n                        target: [0, 0, 0]\r\n                    },\r\n                    initialState: config.initialState || {}\r\n                }\r\n            }, [offscreen]);\r\n            \r\n            // Setup resize monitoring\r\n            this.setupResizeMonitoring();\r\n            \r\n            this.lastSize = { width, height };\r\n            console.log('[CanvasManager] OffscreenCanvas setup complete');\r\n            return true;\r\n            \r\n        } catch (error) {\r\n            console.error('[CanvasManager] OffscreenCanvas setup failed:', error);\r\n            // Fall back to regular canvas\r\n            return this.setupRegularCanvas(width, height, config);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup regular canvas (fallback)\r\n     */\r\n    setupRegularCanvas(width, height, config) {\r\n        console.log('[CanvasManager] Using regular canvas mode (fallback)');\r\n        \r\n        this.mode = 'regular';\r\n        \r\n        // Set dimensions\r\n        this.canvas.width = width;\r\n        this.canvas.height = height;\r\n        \r\n        // Clean styles\r\n        this.cleanCanvasStyles();\r\n        \r\n        // Send setup message\r\n        this.worker.postMessage({\r\n            type: 'SETUP_CANVAS_FALLBACK',\r\n            data: {\r\n                canvasId: 'three-canvas',\r\n                width: width,\r\n                height: height,\r\n                mode: 'regular',\r\n                cameraParams: config.cameraParams || {\r\n                    position: [5, -5, 5],\r\n                    target: [0, 0, 0]\r\n                },\r\n                initialState: config.initialState || {}\r\n            }\r\n        });\r\n        \r\n        // Setup resize monitoring\r\n        this.setupResizeMonitoring();\r\n        \r\n        this.lastSize = { width, height };\r\n        console.log('[CanvasManager] Regular canvas setup complete');\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Clean canvas inline styles\r\n     */\r\n    cleanCanvasStyles() {\r\n        if (!this.canvas) return;\r\n        \r\n        // Remove size-related inline styles\r\n        this.canvas.style.removeProperty('width');\r\n        this.canvas.style.removeProperty('height');\r\n        this.canvas.style.removeProperty('position');\r\n        this.canvas.style.removeProperty('top');\r\n        this.canvas.style.removeProperty('left');\r\n        this.canvas.style.removeProperty('right');\r\n        this.canvas.style.removeProperty('bottom');\r\n        \r\n        // Keep only touch-action and ensure canvas is below topbar\r\n        this.canvas.style.touchAction = 'none';\r\n        this.canvas.style.zIndex = '0';\r\n    }\r\n\r\n    /**\r\n     * Setup resize monitoring\r\n     */\r\n    setupResizeMonitoring() {\r\n        const viewport = document.getElementById('viewport-area') || this.canvas.parentElement;\r\n        \r\n        // Use ResizeObserver for reliable size detection\r\n        this.resizeObserver = new ResizeObserver((entries) => {\r\n            if (entries.length === 0) return;\r\n            \r\n            const entry = entries[0];\r\n            const rect = entry.contentRect;\r\n            const width = Math.max(1, Math.floor(rect.width));\r\n            const height = Math.max(1, Math.floor(rect.height));\r\n            \r\n            // Skip if size hasn't changed\r\n            if (width === this.lastSize.width && height === this.lastSize.height) {\r\n                return;\r\n            }\r\n            \r\n            this.updateSize(width, height);\r\n        });\r\n        \r\n        this.resizeObserver.observe(viewport);\r\n        console.log('[CanvasManager] Resize monitoring active');\r\n    }\r\n\r\n    /**\r\n     * Update canvas size\r\n     */\r\n    updateSize(width, height) {\r\n        if (!this.worker) return;\r\n        \r\n        console.log(`[CanvasManager] Updating size to ${width}x${height} (mode: ${this.mode})`);\r\n        \r\n        if (this.mode === 'offscreen') {\r\n            // For offscreen canvas, we can ONLY send a message\r\n            // DO NOT touch canvas.width or canvas.height!\r\n            this.worker.postMessage({\r\n                type: 'UPDATE_RENDER_SIZE',\r\n                data: { width, height }\r\n            });\r\n        } else {\r\n            // For regular canvas, we can update dimensions\r\n            this.canvas.width = width;\r\n            this.canvas.height = height;\r\n            \r\n            // Clean any inline styles that might have been added\r\n            this.cleanCanvasStyles();\r\n            \r\n            // Also notify worker\r\n            this.worker.postMessage({\r\n                type: 'UPDATE_RENDER_SIZE',\r\n                data: { width, height }\r\n            });\r\n        }\r\n        \r\n        this.lastSize = { width, height };\r\n    }\r\n\r\n    /**\r\n     * Force immediate resize (called by resizers)\r\n     */\r\n    forceResize() {\r\n        const viewport = document.getElementById('viewport-area') || this.canvas.parentElement;\r\n        const rect = viewport.getBoundingClientRect();\r\n        const width = Math.max(1, Math.floor(rect.width));\r\n        const height = Math.max(1, Math.floor(rect.height));\r\n        \r\n        if (width !== this.lastSize.width || height !== this.lastSize.height) {\r\n            this.updateSize(width, height);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Cleanup\r\n     */\r\n    dispose() {\r\n        if (this.resizeObserver) {\r\n            this.resizeObserver.disconnect();\r\n            this.resizeObserver = null;\r\n        }\r\n        this.canvas = null;\r\n        this.worker = null;\r\n        console.log('[CanvasManager] Disposed');\r\n    }\r\n}\r\n\r\n// Create global instance\r\nwindow.canvasManager = new CanvasManager();",
        "commonFunctions": '// FILE: templates/scripts/utils/common-functions.js (NEW FILE TO CREATE)\r\n// Global variables\r\nlet camera = null;\r\nlet worker = null;\r\nlet uiManager = null;\r\n\r\nfunction waitForThreeJS() {\r\n    return new Promise((resolve, reject) => {\r\n        let attempts = 0;\r\n        const maxAttempts = 50;\r\n        \r\n        function check() {\r\n            attempts++;\r\n            \r\n            if (typeof THREE !== "undefined") {\r\n                console.log("[Z3D Editor] \u2705 THREE.js detected, version:", THREE.REVISION);\r\n                console.log("[Z3D Editor] Available extensions:", {\r\n                    GLTFLoader: typeof THREE.GLTFLoader !== "undefined" || typeof GLTFLoader !== "undefined",\r\n                    OrbitControls: typeof THREE.OrbitControls !== "undefined"\r\n                });\r\n                resolve(THREE);\r\n            } else if (attempts >= maxAttempts) {\r\n                reject(new Error("THREE.js failed to load within timeout"));\r\n            } else {\r\n                setTimeout(check, 100);\r\n            }\r\n        }\r\n        \r\n        check();\r\n    });\r\n}\r\n\r\nfunction updateStatus(message, type) {\r\n    console.log("[Z3D Editor]", message);\r\n    \r\n    const statusEl = document.getElementById("status-message");\r\n    if (statusEl) {\r\n        statusEl.className = "status-message " + (type || "info");\r\n        statusEl.innerHTML = "<strong>" + message + "</strong>";\r\n    }\r\n}\r\n\r\nfunction hideLoadingIndicator() {\r\n    const loading = document.getElementById("loading-indicator");\r\n    if (loading) {\r\n        loading.classList.add("hidden");\r\n        setTimeout(() => loading.style.display = "none", 500);\r\n    }\r\n}\r\n\r\nfunction getConfig() {\r\n    let config = {};\r\n    \r\n    // Try multiple methods to get the config\r\n    try {\r\n        // Method 1: Try from hidden div (most reliable)\r\n        const configEl = document.getElementById("z3d-config");\r\n        if (configEl && configEl.textContent) {\r\n            config = JSON.parse(configEl.textContent);\r\n            console.log("[Z3D Editor] Config loaded from z3d-config element");\r\n        }\r\n    } catch (error) {\r\n        console.warn("[Z3D Editor] Failed to parse z3d-config:", error);\r\n    }\r\n    \r\n    // Method 2: Try from script tag\r\n    if (!config.instanceId) {\r\n        try {\r\n            const buildConfigEl = document.getElementById("build-config");\r\n            if (buildConfigEl && buildConfigEl.textContent) {\r\n                const buildConfig = JSON.parse(buildConfigEl.textContent);\r\n                config = { ...config, ...buildConfig };\r\n                console.log("[Z3D Editor] Config loaded from build-config element");\r\n            }\r\n        } catch (error) {\r\n            console.warn("[Z3D Editor] Failed to parse build-config:", error);\r\n        }\r\n    }\r\n    \r\n    // Method 3: Fallback with reasonable defaults\r\n    if (!config.instanceId) {\r\n        console.warn("[Z3D Editor] No config found, using fallback");\r\n        config = {\r\n            instanceId: 0,\r\n            modelPath: "",\r\n            debugMode: false,\r\n            timestamp: Date.now()\r\n        };\r\n    }\r\n    \r\n    // Ensure required properties exist\r\n    config.instanceId = config.instanceId || 0;\r\n    config.modelPath = config.modelPath || "";\r\n    config.debugMode = config.debugMode || false;\r\n    \r\n    console.log("[Z3D Editor] Final config:", config);\r\n    return config;\r\n}',
        "parentCommunication": `/**\r
 * Parent Communication - COMPLETE VERSION\r
 */\r
\r
// Global state\r
let editorInitialized = false;\r
let editorIsDragging = false;\r
let pendingUpdate = null;\r
let updateTimeout = null;\r
\r
function setupParentCommunication() {\r
    console.log('[Z3D Editor] Setting up parent communication');\r
    \r
    window.addEventListener('message', function(event) {\r
        if (event.source !== window.opener) return;\r
        \r
        const { type, data } = event.data;\r
        console.log('[Z3D Editor] Received message:', type);\r
        \r
        switch (type) {\r
            case 'INITIAL_STATE':\r
                handleInitialState(data);\r
                break;\r
                \r
            case 'STATE_UPDATE':\r
                handleStateUpdate(data);\r
                break;\r
                \r
            case 'MODEL_DATA_RESPONSE':\r
                handleModelDataResponse(data);\r
                break;\r
        }\r
    });\r
    \r
    // Listen for drag events from object controls\r
    window.addEventListener('z3d-drag-state', (e) => {\r
        editorIsDragging = !!e.detail?.dragging;\r
        \r
        if (!editorIsDragging && pendingUpdate) {\r
            setTimeout(() => {\r
                if (pendingUpdate) {\r
                    handleStateUpdate(pendingUpdate);\r
                    pendingUpdate = null;\r
                }\r
            }, 50);\r
        }\r
    });\r
    \r
    // Notify parent that editor is ready\r
    if (window.opener && !window.opener.closed) {\r
        window.opener.postMessage({\r
            type: 'EDITOR_READY',\r
            data: { timestamp: Date.now() }\r
        }, '*');\r
    }\r
    \r
    console.log('[Z3D Editor] Parent communication ready');\r
}\r
\r
function handleInitialState(data) {\r
    if (editorInitialized) {\r
        console.log('[Z3D Editor] Already initialized, ignoring');\r
        return;\r
    }\r
    \r
    console.log('[Z3D Editor] Initial state received:', data);\r
    editorInitialized = true;\r
    \r
    // Store animation state for later use (only if it has actual data)\r
    if (data.animation) {\r
        console.log('[Z3D Editor] Received animation state:', data.animation);\r
        // Only store if there's an actual animation selected (not null/undefined)\r
        if (data.animation.currentAnimation !== null && data.animation.currentAnimation !== undefined) {\r
            window.initialAnimationState = data.animation;\r
            console.log('[Z3D Editor] Stored initial animation state:', data.animation);\r
        } else {\r
            console.log('[Z3D Editor] Animation state is default/empty, not storing');\r
        }\r
    }\r
    \r
    // Store node visibility state\r
    if (data.nodeVisibility) {\r
        window.initialNodeVisibility = data.nodeVisibility;\r
        console.log('[Z3D Editor] Stored initial node visibility:', data.nodeVisibility);\r
    }\r
    \r
    // Apply to UI\r
    if (window.objectControls) {\r
        window.objectControls.setState(data);\r
        console.log('[Z3D Editor] Applied initial state to UI');\r
    }\r
    \r
    // Send to worker if ready\r
    if (window.worker) {\r
        window.worker.postMessage({\r
            type: 'UPDATE_STATE',\r
            data: {\r
                ...data,\r
                source: 'initial'\r
            }\r
        });\r
    }\r
    \r
    // Request model if we have a path\r
    if (data.modelPath) {\r
        requestModelData(data.modelPath);\r
    }\r
    \r
    // Confirm initialization\r
    if (window.opener && !window.opener.closed) {\r
        window.opener.postMessage({\r
            type: 'INITIALIZATION_COMPLETE',\r
            data: { timestamp: Date.now() }\r
        }, '*');\r
    }\r
}\r
\r
function handleStateUpdate(data) {\r
    if (!editorInitialized) {\r
        console.log('[Z3D Editor] Not initialized, queuing update');\r
        pendingUpdate = data;\r
        return;\r
    }\r
    \r
    // Debounce rapid updates\r
    if (updateTimeout) {\r
        clearTimeout(updateTimeout);\r
    }\r
    \r
    updateTimeout = setTimeout(() => {\r
        if (editorIsDragging) {\r
            console.log('[Z3D Editor] Dragging, queuing update');\r
            pendingUpdate = data;\r
            return;\r
        }\r
        \r
        console.log('[Z3D Editor] Applying state update');\r
        \r
        // Update UI\r
        if (window.objectControls) {\r
            window.objectControls.setState(data);\r
        }\r
        \r
        // Update worker\r
        if (window.worker) {\r
            window.worker.postMessage({\r
                type: 'UPDATE_STATE',\r
                data: {\r
                    ...data,\r
                    source: 'c3'\r
                }\r
            });\r
        }\r
    }, 10);\r
}\r
\r
function handleModelDataResponse(data) {\r
    console.log('[Z3D Editor] Model data response received');\r
    \r
    if (data && data.success && data.modelData && window.worker) {\r
        try {\r
            updateStatus("Loading 3D model...", "loading");\r
            \r
            const modelBlob = new Blob([data.modelData], { type: "model/gltf-binary" });\r
            const modelUrl = URL.createObjectURL(modelBlob);\r
            \r
            window.worker.postMessage({ \r
                type: "LOAD_MODEL", \r
                data: { \r
                    modelUrl: modelUrl,\r
                    modelPath: data.modelPath \r
                } \r
            });\r
            \r
            setTimeout(() => {\r
                try {\r
                    URL.revokeObjectURL(modelUrl);\r
                } catch {}\r
            }, 10000);\r
            \r
        } catch (error) {\r
            console.error('[Z3D Editor] Error processing model:', error);\r
            updateStatus("Model processing failed: " + error.message, "error");\r
        }\r
    } else if (data && !data.success) {\r
        updateStatus("Model loading failed: " + (data.error || "Unknown error"), "error");\r
    }\r
}\r
\r
function requestModelData(modelPath) {\r
    if (!modelPath || !window.opener) return;\r
    \r
    console.log('[Z3D Editor] Requesting model data:', modelPath);\r
    \r
    window.opener.postMessage({\r
        type: 'REQUEST_MODEL_DATA',\r
        data: { modelPath: modelPath }\r
    }, '*');\r
}\r
\r
function sendTransformsToParent(transform, deltaTransform) {\r
    if (!window.opener || window.opener.closed) return;\r
    \r
    console.log('[Z3D Editor] Sending transforms to parent');\r
    \r
    window.opener.postMessage({\r
        type: 'TRANSFORMS_UPDATE',\r
        data: {\r
            transform: transform,\r
            deltaTransform: deltaTransform\r
        }\r
    }, '*');\r
}\r
\r
function sendSkinnedMeshToParent(skinnedMeshData) {\r
    if (!window.opener || window.opener.closed) return;\r
    \r
    console.log('[Z3D Editor] Sending skinned mesh update to parent');\r
    \r
    window.opener.postMessage({\r
        type: 'SKINNED_MESH_UPDATE',\r
        data: skinnedMeshData\r
    }, '*');\r
}\r
\r
function updateStatus(message, type) {\r
    const statusElement = document.getElementById('status-message');\r
    if (statusElement) {\r
        statusElement.textContent = message;\r
        statusElement.className = type || '';\r
    }\r
}\r
\r
// Make functions globally available\r
window.setupParentCommunication = setupParentCommunication;\r
window.sendTransformsToParent = sendTransformsToParent;\r
window.sendSkinnedMeshToParent = sendSkinnedMeshToParent;\r
window.requestModelData = requestModelData;\r
window.editorInitialized = editorInitialized;\r
\r
// Auto-setup\r
if (document.readyState === 'loading') {\r
    document.addEventListener('DOMContentLoaded', setupParentCommunication);\r
} else {\r
    setupParentCommunication();\r
}`,
        "workerInitialization": `// FILE: templates/scripts/utils/worker-initialization.js\r
\r
let modelRequested = false;\r
let canvasSetupComplete = false;\r
\r
function initializeWorker() {\r
    console.log("[Z3D Editor] \u{1F504} Initializing worker with Three.js support...");\r
    updateStatus("\u{1F504} Starting 3D renderer...", "loading");\r
    \r
    const workerCode = createWorkerCodeWithThreeJS();\r
    \r
    try {\r
        const workerBlob = new Blob([workerCode], { type: "application/javascript" });\r
        const workerUrl = URL.createObjectURL(workerBlob);\r
        window.worker = new Worker(workerUrl);\r
        \r
        window.worker.addEventListener("message", function(event) {\r
            const { type, data } = event.data;\r
            \r
            switch (type) {\r
                case "WORKER_READY":\r
                    console.log("[Z3D Editor] \u2705 Worker initialized with Three.js");\r
                    \r
                    // Attach ViewerManager to worker\r
                    if (window.viewerManager) {\r
                        window.viewerManager.attachToWorker();\r
                        console.log("[Z3D Editor] \u2705 ViewerManager attached to worker");\r
                    }\r
                    \r
                    // Setup canvas with initial state\r
                    setupCanvasInWorker();\r
                    break;\r
                    \r
                case "CANVAS_READY":\r
                    console.log("[Z3D Editor] \u2705 3D Scene ready");\r
                    canvasSetupComplete = true;\r
                    hideLoadingIndicator();\r
                    updateStatus("\u2705 3D Scene ready with camera controls", "success");\r
                    \r
                    // Mark canvas as ready for parent communication\r
                    if (window.markCanvasReady) {\r
                        window.markCanvasReady();\r
                    }\r
                    \r
                    // Request model ONLY ONCE after canvas is ready\r
                    if (!modelRequested) {\r
                        const config = getConfig();\r
                        if (config && config.modelPath) {\r
                            console.log("[Z3D Editor] Requesting model:", config.modelPath);\r
                            modelRequested = true;\r
                            requestModelFromParent(config.modelPath);\r
                        }\r
                    }\r
                    break;\r
                    \r
                case "MODEL_LOADED":\r
                    if (data && data.success) {\r
                        console.log("[Z3D Editor] \u2705 Model loaded successfully");\r
                        const config = getConfig();\r
                        updateStatus("\u2705 Model loaded: " + (config ? config.modelPath : "unknown"), "success");\r
                    } else {\r
                        console.error("[Z3D Editor] \u274C Model load failed:", data ? data.error : "unknown");\r
                        updateStatus("\u274C Model load failed", "error");\r
                    }\r
                    break;\r
                \r
                case 'INITIAL_CAMERA_STATE':\r
                    console.log("[Z3D Editor] Initial camera state received:", data);\r
                    if (window.syncOrbitControlsToCamera) {\r
                        window.syncOrbitControlsToCamera(data);\r
                    }\r
                    break;\r
\r
                case 'CAMERA_FOLLOW_REQUEST':\r
                    if (window.orbitControls && data.deltaPosition) {\r
                        const delta = data.deltaPosition;\r
                        if (!window._cameraFollowPendingOffset) {\r
                            window._cameraFollowPendingOffset = new THREE.Vector3();\r
                        }\r
                        \r
                        // First follow: apply instantly\r
                        if (!window._cameraFollowFirstApplied) {\r
                            window.camera.position.x += delta.x;\r
                            window.camera.position.y += delta.y;\r
                            window.camera.position.z += delta.z;\r
                            window.orbitControls.target.x += delta.x;\r
                            window.orbitControls.target.y += delta.y;\r
                            window.orbitControls.target.z += delta.z;\r
                            window.orbitControls.update();\r
                            window._cameraFollowFirstApplied = true;\r
                            break;\r
                        }\r
                        \r
                        // Subsequent follows: smooth\r
                        window._cameraFollowPendingOffset.x += delta.x;\r
                        window._cameraFollowPendingOffset.y += delta.y;\r
                        window._cameraFollowPendingOffset.z += delta.z;\r
\r
                        if (!window._cameraFollowSmoothingActive) {\r
                            window._cameraFollowSmoothingActive = true;\r
                            const SMOOTH_FACTOR = 0.25;\r
                            const EPS = 1e-4;\r
                            const applySmoothing = () => {\r
                                const off = window._cameraFollowPendingOffset;\r
                                const len = Math.abs(off.x) + Math.abs(off.y) + Math.abs(off.z);\r
                                if (len < EPS) {\r
                                    off.x = off.y = off.z = 0;\r
                                    window._cameraFollowSmoothingActive = false;\r
                                    return;\r
                                }\r
                                const stepX = off.x * SMOOTH_FACTOR;\r
                                const stepY = off.y * SMOOTH_FACTOR;\r
                                const stepZ = off.z * SMOOTH_FACTOR;\r
                                window.camera.position.x += stepX;\r
                                window.camera.position.y += stepY;\r
                                window.camera.position.z += stepZ;\r
                                window.orbitControls.target.x += stepX;\r
                                window.orbitControls.target.y += stepY;\r
                                window.orbitControls.target.z += stepZ;\r
                                off.x -= stepX;\r
                                off.y -= stepY;\r
                                off.z -= stepZ;\r
                                window.orbitControls.update();\r
                                requestAnimationFrame(applySmoothing);\r
                            };\r
                            requestAnimationFrame(applySmoothing);\r
                        }\r
                    }\r
                    break;\r
\r
                case 'CAMERA_FOLLOW_SETTING_CHANGED':\r
                    console.log('[Z3D Editor] Camera follow settings changed:', data);\r
                    break;\r
                    \r
                case "MODEL_ERROR":\r
                    console.error("[Z3D Editor] \u274C Model loading error:", data ? data.error : "unknown");\r
                    updateStatus("\u274C Model loading failed: " + (data ? data.error : "unknown"), "error");\r
                    break;\r
                    \r
                case "ERROR":\r
                    console.error("[Z3D Editor] \u274C Worker error:", data ? data.error : "unknown");\r
                    updateStatus("\u274C Worker error: " + (data ? data.error : "unknown"), "error");\r
                    break;\r
            }\r
        });\r
        \r
        setTimeout(() => URL.revokeObjectURL(workerUrl), 5000);\r
        return true;\r
        \r
    } catch (error) {\r
        console.error("[Z3D Editor] \u274C Worker creation failed:", error);\r
        updateStatus("\u274C Worker creation failed", "error");\r
        return false;\r
    }\r
}\r
\r
function setupCanvasInWorker() {\r
    console.log("[Z3D Editor] Setting up canvas in worker...");\r
    \r
    let config = null;\r
    if (typeof getConfig === 'function') {\r
        try {\r
            config = getConfig();\r
        } catch (error) {\r
            console.error("[Z3D Editor] Error calling getConfig():", error);\r
        }\r
    }\r
    \r
    if (!config) {\r
        const configElement = document.getElementById('z3d-config');\r
        if (configElement) {\r
            try {\r
                config = JSON.parse(configElement.textContent);\r
            } catch (parseError) {\r
                console.error("[Z3D Editor] Failed to parse config:", parseError);\r
            }\r
        }\r
    }\r
    \r
    if (!config) {\r
        console.error("[Z3D Editor] No configuration available");\r
        return;\r
    }\r
    \r
    // USE CANVAS MANAGER for setup\r
    if (window.canvasManager && window.worker) {\r
        console.log("[Z3D Editor] Using canvas manager for setup");\r
        \r
        // \u2705 FIX: Use the correct path to the initial state!\r
        const setupConfig = {\r
            cameraParams: {\r
                position: [5, -5, 5],\r
                target: [0, 0, 0]\r
            },\r
            initialState: config.initialState || {\r
                transform: {\r
                    position: { x: 0, y: 0, z: 0 },\r
                    rotation: { x: 0, y: 0, z: 0 },\r
                    scale: { x: 1, y: 1, z: 1 },\r
                    uniformScale: 1,\r
                    unitScale: 64,\r
                    rotationOrder: 'ZXY'\r
                },\r
                deltaTransform: {\r
                    position: { x: 0, y: 0, z: 0 },\r
                    rotation: { x: 0, y: 0, z: 0 },\r
                    scale: { x: 1, y: 1, z: 1 }\r
                },\r
                wireframe: false\r
            }\r
        };\r
        \r
        console.log("[Z3D Editor] Sending to canvas manager:", setupConfig);\r
        \r
        // Let canvas manager handle the setup\r
        window.canvasManager.setupCanvas(setupConfig);\r
    } else {\r
        console.error("[Z3D Editor] Canvas manager or worker not available");\r
    }\r
}\r
\r
// Request model data from parent window\r
function requestModelFromParent(modelPath) {\r
    if (window.opener && !window.opener.closed) {\r
        updateStatus("\u{1F504} Requesting model data...", "loading");\r
        window.opener.postMessage({\r
            type: "REQUEST_MODEL_DATA",\r
            data: { modelPath: modelPath }\r
        }, "*");\r
    } else {\r
        console.error("[Z3D Editor] No parent window available");\r
        updateStatus("\u274C No parent window available", "error");\r
    }\r
}\r
\r
// This function will be populated by template-builder with actual Three.js code\r
function createWorkerCodeWithThreeJS() {\r
    // This will be replaced by template-builder with the actual worker code\r
    console.error("[Z3D Editor] createWorkerCodeWithThreeJS not implemented - should be injected by template-builder");\r
    return "";\r
}`
      },
      "mainInitialization": `/* FILE: editor/z3d-object-editor/templates/scripts/main-initialization.js */\r
\r
async function initialize() {\r
    console.log("[Z3D Editor] Initializing...");\r
    updateStatus("\u{1F504} Waiting for Three.js...", "loading");\r
    \r
    try {\r
        await waitForThreeJS();\r
        updateStatus("\u2705 Three.js loaded successfully", "success");\r
        \r
        // Setup camera controls FIRST (creates the camera and OrbitControls)\r
        const cameraSetup = setupCameraControls();\r
        if (!cameraSetup) {\r
            console.error("[Z3D Editor] Camera setup failed");\r
            return;\r
        }\r
        \r
        // Initialize worker SECOND\r
        const workerSetup = initializeWorker();\r
        if (!workerSetup) {\r
            console.error("[Z3D Editor] Worker setup failed");\r
            return;\r
        }\r
        \r
        // Initialize canvas manager THIRD (just initialize, don't setup)\r
        if (window.canvasManager && window.worker) {\r
            console.log("[Z3D Editor] Initializing canvas manager...");\r
            const canvasReady = window.canvasManager.initialize(window.worker);\r
            \r
            if (canvasReady) {\r
                console.log("[Z3D Editor] \u2705 Canvas manager initialized");\r
                // DON'T call setupCanvas here - it's called from setupCanvasInWorker\r
            }\r
        }\r
        \r
        // Setup UI controls\r
        updateStatus("\u{1F504} Setting up UI controls...", "loading");\r
        uiManager = new UIManager(getConfig());\r
        await uiManager.initialize();\r
        \r
        // Setup parent communication\r
        setupParentCommunication();\r
        \r
        console.log("[Z3D Editor] \u2705 Initialization complete!");\r
        \r
        // Notify parent that editor is ready\r
        if (window.opener && !window.opener.closed) {\r
            const config = getConfig();\r
            window.opener.postMessage({\r
                type: 'EDITOR_READY',\r
                data: { \r
                    instanceId: config ? config.instanceId : 0, \r
                    timestamp: Date.now(),\r
                    editorVersion: '1.0.0'\r
                }\r
            }, '*');\r
        }\r
        \r
    } catch (error) {\r
        console.error("[Z3D Editor] \u274C Initialization failed:", error);\r
        updateStatus("\u274C Initialization failed: " + error.message, "error");\r
    }\r
}\r
\r
// Start initialization\r
if (document.readyState === "loading") {\r
    document.addEventListener("DOMContentLoaded", initialize);\r
} else {\r
    initialize();\r
}`
    },
    "config": {
      "editorConfig": {
        "version": "1.0.0",
        "editor": {
          "title": "Z3D Object Editor",
          "theme": "dark",
          "panels": {
            "transform": {
              "enabled": true,
              "collapsed": false,
              "order": 1
            },
            "material": {
              "enabled": true,
              "collapsed": false,
              "order": 2
            },
            "viewport": {
              "enabled": true,
              "collapsed": false,
              "order": 3
            },
            "animation": {
              "enabled": true,
              "collapsed": true,
              "order": 4
            }
          }
        },
        "viewport": {
          "defaultCamera": {
            "position": [
              5,
              5,
              5
            ],
            "target": [
              0,
              0,
              0
            ]
          },
          "controls": {
            "enableDamping": true,
            "dampingFactor": 0.05,
            "enableZoom": true,
            "enableRotate": true,
            "enablePan": true
          },
          "rendering": {
            "antialias": true,
            "shadows": true,
            "shadowMapSize": 2048
          }
        },
        "shortcuts": {
          "resetView": "r",
          "toggleWireframe": "w",
          "toggleFullscreen": "f",
          "focusTransform": "t",
          "focusMaterial": "m"
        },
        "performance": {
          "maxVertices": 1e5,
          "enableFrustumCulling": true,
          "enableOcclusion": false
        }
      }
    }
  };
  console.log("[Z3DObjectEditor] \u{1F680} Real template assets loaded from build script injection");
  console.log("[Z3DObjectEditor] Asset sizes:", {
    html: "8KB",
    styles: "66KB",
    scripts: "606KB",
    config: "1KB"
  });
  var TemplateBuilder = class {
    constructor() {
      this._assets = EMBEDDED_TEMPLATE_ASSETS;
      console.log("[Z3DObjectEditor] Using embedded template assets");
      this._logAssetStats();
    }
    /**
     * Build the complete HTML template for the Z3D Object Editor
     */
    async build(config) {
      console.log(`[Z3DObjectEditor] Building editor for instance ${config.instanceId}`);
      try {
        const threeJsResources = await this._loadThreeJSResources();
        console.log("[Z3DObjectEditor] Resources loaded:", {
          threeJs: Math.round(threeJsResources.threeJs.length / 1024) + "KB",
          gltf: Math.round(threeJsResources.gltfLoader.length / 1024) + "KB",
          orbit: Math.round(threeJsResources.orbitControls.length / 1024) + "KB"
        });
        const scriptUrls = await this._createScriptBlobs(threeJsResources, config);
        const html = this._buildHTMLWithScripts({
          title: `Z3D Object Editor - Instance ${config.instanceId}`,
          styles: this._combineStyles(),
          scriptUrls,
          config: JSON.stringify(config),
          editorConfig: JSON.stringify(this._assets.config.editorConfig)
        });
        setTimeout(() => {
          scriptUrls.forEach((url) => URL.revokeObjectURL(url));
        }, 1e4);
        const sizeKB = Math.round(html.length / 1024);
        console.log(`[Z3DObjectEditor] \u2705 Template built successfully (${sizeKB}KB)`);
        return html;
      } catch (error) {
        console.error("[Z3DObjectEditor] \u274C Build failed:", error);
        throw error;
      }
    }
    /**
     * Load Three.js resources
     */
    async _loadThreeJSResources() {
      console.log("[Z3DObjectEditor] Loading Three.js resources...");
      try {
        const [threeJs, gltfLoader, orbitControls] = await Promise.all([
          ThreeJSLoader.loadThreeJS(),
          ThreeJSLoader.loadGLTFLoader(),
          ThreeJSLoader.loadOrbitControls()
        ]);
        return { threeJs, gltfLoader, orbitControls };
      } catch (error) {
        console.warn("[Z3DObjectEditor] ThreeJSLoader not available:", error);
        return { threeJs: "", gltfLoader: "", orbitControls: "" };
      }
    }
    _combineStyles() {
      return [
        this._assets.styles.base,
        this._assets.styles.components,
        this._assets.styles.layout,
        this._assets.styles["object-controls"],
        this._assets.styles["outliner"],
        this._assets.styles["animation"] || "",
        this._assets.styles["texture"] || ""
      ].join("\n\n/* ===== NEXT SECTION ===== */\n\n");
    }
    async _createScriptBlobs(threeJsResources, config) {
      const scriptUrls = [];
      const combinedThreeJS = this._createCombinedThreeJSScript(threeJsResources);
      if (combinedThreeJS) {
        const threeBlob = new Blob([combinedThreeJS], { type: "application/javascript" });
        scriptUrls.push(URL.createObjectURL(threeBlob));
      }
      const mainScript = this._generateMainScript(config, threeJsResources);
      const mainBlob = new Blob([mainScript], { type: "application/javascript" });
      scriptUrls.push(URL.createObjectURL(mainBlob));
      return scriptUrls;
    }
    _createCombinedThreeJSScript(threeJsResources) {
      if (!threeJsResources.threeJs)
        return null;
      let combinedScript = "";
      combinedScript += "(function() {\n";
      combinedScript += '    "use strict";\n';
      combinedScript += "    \n";
      combinedScript += '    console.log("[Z3D Three.js] Starting safe Three.js loading...");\n';
      combinedScript += "    \n";
      combinedScript += "    // Clear existing THREE to prevent conflicts\n";
      combinedScript += '    if (typeof window !== "undefined" && window.THREE) {\n';
      combinedScript += '        console.log("[Z3D Three.js] Clearing existing window.THREE");\n';
      combinedScript += "        delete window.THREE;\n";
      combinedScript += "    }\n";
      combinedScript += '    if (typeof globalThis !== "undefined" && globalThis.THREE) {\n';
      combinedScript += '        console.log("[Z3D Three.js] Clearing existing globalThis.THREE");\n';
      combinedScript += "        delete globalThis.THREE;\n";
      combinedScript += "    }\n";
      combinedScript += '    if (typeof self !== "undefined" && self.THREE) {\n';
      combinedScript += '        console.log("[Z3D Three.js] Clearing existing self.THREE");\n';
      combinedScript += "        delete self.THREE;\n";
      combinedScript += "    }\n";
      combinedScript += "    \n";
      combinedScript += "    // Load Three.js Core in isolated scope\n";
      combinedScript += '    console.log("[Z3D Three.js] Loading Three.js core...");\n';
      combinedScript += "    try {\n";
      combinedScript += threeJsResources.threeJs;
      combinedScript += '\n        console.log("[Z3D Three.js] \u2705 Three.js core loaded, version:", typeof THREE !== "undefined" ? THREE.REVISION : "unknown");\n';
      combinedScript += "    } catch (error) {\n";
      combinedScript += '        console.error("[Z3D Three.js] \u274C Three.js core failed:", error);\n';
      combinedScript += "        return;\n";
      combinedScript += "    }\n";
      combinedScript += "    \n";
      combinedScript += "    // Verify THREE is available\n";
      combinedScript += '    if (typeof THREE === "undefined") {\n';
      combinedScript += '        console.error("[Z3D Three.js] \u274C THREE not available after loading");\n';
      combinedScript += "        return;\n";
      combinedScript += "    }\n";
      combinedScript += "    \n";
      if (threeJsResources.gltfLoader) {
        combinedScript += "    // Load GLTF Loader\n";
        combinedScript += '    console.log("[Z3D Three.js] Loading GLTF Loader...");\n';
        combinedScript += "    try {\n";
        combinedScript += threeJsResources.gltfLoader;
        combinedScript += "\n        // Register GLTFLoader with THREE\n";
        combinedScript += '        if (typeof GLTFLoader !== "undefined") {\n';
        combinedScript += "            THREE.GLTFLoader = GLTFLoader;\n";
        combinedScript += "        }\n";
        combinedScript += '        console.log("[Z3D Three.js] \u2705 GLTF Loader loaded");\n';
        combinedScript += "    } catch (error) {\n";
        combinedScript += '        console.warn("[Z3D Three.js] GLTF Loader failed:", error);\n';
        combinedScript += "    }\n";
        combinedScript += "    \n";
      }
      if (threeJsResources.orbitControls) {
        combinedScript += "    // Load Orbit Controls\n";
        combinedScript += '    console.log("[Z3D Three.js] Loading Orbit Controls...");\n';
        combinedScript += "    try {\n";
        combinedScript += threeJsResources.orbitControls;
        combinedScript += '\n        console.log("[Z3D Three.js] \u2705 Orbit Controls loaded");\n';
        combinedScript += "    } catch (error) {\n";
        combinedScript += '        console.warn("[Z3D Three.js] Orbit Controls failed:", error);\n';
        combinedScript += "    }\n";
        combinedScript += "    \n";
      }
      combinedScript += "    // Make THREE globally available\n";
      combinedScript += '    if (typeof window !== "undefined") window.THREE = THREE;\n';
      combinedScript += '    if (typeof globalThis !== "undefined") globalThis.THREE = THREE;\n';
      combinedScript += '    if (typeof self !== "undefined") self.THREE = THREE;\n';
      combinedScript += "    \n";
      combinedScript += '    console.log("[Z3D Three.js] \u2705 All components loaded successfully");\n';
      combinedScript += '    console.log("[Z3D Three.js] Available components:", {\n';
      combinedScript += "        core: true,\n";
      combinedScript += "        revision: THREE.REVISION,\n";
      combinedScript += '        gltfLoader: typeof THREE.GLTFLoader !== "undefined" || typeof GLTFLoader !== "undefined",\n';
      combinedScript += '        orbitControls: typeof THREE.OrbitControls !== "undefined"\n';
      combinedScript += "    });\n";
      combinedScript += "    \n";
      combinedScript += "})();\n";
      return combinedScript;
    }
    _generateMainScript(config, threeJsResources) {
      console.log("[Z3DObjectEditor] Assembling main script from embedded assets...");
      let mainScript = "";
      mainScript += 'console.log("[Z3D Object Editor] \u{1F680} Editor loading from embedded template assets...");\n\n';
      mainScript += "// ===== CORE COMPONENTS =====\n";
      mainScript += this._assets.scripts.core.eventEmitter + "\n\n";
      mainScript += this._assets.scripts.core.uiManager + "\n\n";
      mainScript += "// ===== UI COMPONENTS =====\n";
      mainScript += this._assets.scripts.components.objectControls + "\n\n";
      if (this._assets.scripts.components.viewportControls) {
        mainScript += this._assets.scripts.components.viewportControls + "\n\n";
      }
      if (this._assets.scripts.components.outlinerControls) {
        mainScript += this._assets.scripts.components.outlinerControls + "\n\n";
      }
      if (this._assets.scripts.components.animationControls) {
        mainScript += "// ===== ANIMATION CONTROLS =====\n";
        mainScript += this._assets.scripts.components.animationControls + "\n\n";
      }
      if (this._assets.scripts.components.textureControls) {
        mainScript += "// ===== TEXTURE CONTROLS =====\n";
        mainScript += this._assets.scripts.components.textureControls + "\n\n";
      }
      if (this._assets.scripts.components.viewerManager) {
        mainScript += "// ===== VIEWER MANAGER =====\n";
        mainScript += this._assets.scripts.components.viewerManager + "\n\n";
      }
      if (this._assets.scripts.components.viewportButtons) {
        mainScript += "// ===== VIEWPORT BUTTONS =====\n";
        mainScript += this._assets.scripts.components.viewportButtons + "\n\n";
      }
      if (this._assets.scripts.components.gizmoController) {
        mainScript += "// ===== GIZMO CONTROLLER =====\n";
        mainScript += this._assets.scripts.components.gizmoController + "\n\n";
      }
      if (this._assets.scripts.components.statsOverlay) {
        mainScript += "// ===== STATS OVERLAY =====\n";
        mainScript += this._assets.scripts.components.statsOverlay + "\n\n";
      }
      if (this._assets.scripts.components.sceneTopbarControls) {
        mainScript += "// ===== SCENE TOPBAR CONTROLS =====\n";
        mainScript += this._assets.scripts.components.sceneTopbarControls + "\n\n";
      }
      mainScript += this._assets.scripts.components.resizer + "\n\n";
      if (this._assets.scripts.utils) {
        mainScript += "// ===== UTILITY FUNCTIONS =====\n";
        const utilOrder = [
          "canvasManager",
          "commonFunctions",
          "cameraSetup",
          "modelLoader",
          "parentCommunication",
          "workerInitialization"
        ];
        utilOrder.forEach((utilName) => {
          if (this._assets.scripts.utils[utilName]) {
            mainScript += `// ${utilName}
`;
            mainScript += this._assets.scripts.utils[utilName];
            mainScript += "\n\n";
          }
        });
      }
      mainScript += "// ===== WORKER CODE GENERATION =====\n";
      mainScript += this._generateWorkerCodeFunction(threeJsResources);
      mainScript += "\n\n";
      mainScript += "// ===== MAIN INITIALIZATION =====\n";
      if (this._assets.scripts.mainInitialization) {
        mainScript += this._assets.scripts.mainInitialization;
      }
      mainScript += "\n\n// ===== AUTO-CLOSE IF PARENT WINDOW CLOSES =====\n";
      mainScript += "setInterval(() => {\n";
      mainScript += "    try {\n";
      mainScript += "        if (!window.opener || window.opener.closed) {\n";
      mainScript += '            console.log("[Z3D Object Editor] Parent window closed, closing editor");\n';
      mainScript += "            window.close();\n";
      mainScript += "        }\n";
      mainScript += "    } catch (e) {\n";
      mainScript += "        // Parent might be on different origin or closed\n";
      mainScript += '        console.log("[Z3D Object Editor] Cannot access parent, closing editor");\n';
      mainScript += "        window.close();\n";
      mainScript += "    }\n";
      mainScript += "}, 1000);\n";
      mainScript += "\n";
      console.log("[Z3DObjectEditor] \u2705 Main script assembled from embedded assets");
      return mainScript;
    }
    _generateWorkerCodeFunction(threeJsResources) {
      let workerFunction = "";
      workerFunction += "function createWorkerCodeWithThreeJS() {\n";
      workerFunction += '    console.log("[Z3D Object Editor] Generating worker code...");\n';
      workerFunction += "    \n";
      workerFunction += "    const threeJSCode = " + JSON.stringify(threeJsResources.threeJs || "") + ";\n";
      workerFunction += "    const gltfLoaderCode = " + JSON.stringify(threeJsResources.gltfLoader || "") + ";\n";
      workerFunction += "    const orbitControlsCode = " + JSON.stringify(threeJsResources.orbitControls || "") + ";\n";
      workerFunction += "    \n";
      workerFunction += '    let workerCode = "";\n';
      workerFunction += "    \n";
      workerFunction += "    // Worker header\n";
      workerFunction += '    workerCode += "console.log(\\"[Z3D Object Worker] Starting Three.js worker...\\");\\n\\n";\n';
      workerFunction += "    \n";
      workerFunction += "    // Clear existing THREE if present\n";
      workerFunction += '    workerCode += "// Clear existing THREE if present\\n";\n';
      workerFunction += '    workerCode += "if (typeof THREE !== \\"undefined\\") {\\n";\n';
      workerFunction += '    workerCode += "    console.log(\\"[Z3D Object Worker] Existing THREE detected, clearing...\\");\\n";\n';
      workerFunction += '    workerCode += "    delete globalThis.THREE;\\n";\n';
      workerFunction += '    workerCode += "    delete self.THREE;\\n";\n';
      workerFunction += '    workerCode += "}\\n\\n";\n';
      workerFunction += "    \n";
      workerFunction += "    // CSP-safe Three.js loading\n";
      workerFunction += "    if (threeJSCode) {\n";
      workerFunction += '        workerCode += "// Three.js Core - Direct execution (CSP-safe)\\n";\n';
      workerFunction += "        workerCode += threeJSCode;\n";
      workerFunction += '        workerCode += "\\n";\n';
      workerFunction += '        workerCode += "// Verify THREE is available\\n";\n';
      workerFunction += '        workerCode += "if (typeof THREE === \\"undefined\\") {\\n";\n';
      workerFunction += '        workerCode += "    console.error(\\"[Z3D Object Worker] THREE not found after execution\\");\\n";\n';
      workerFunction += '        workerCode += "} else {\\n";\n';
      workerFunction += '        workerCode += "    console.log(\\"[Z3D Object Worker] \u2705 Three.js loaded:\\", THREE.REVISION);\\n";\n';
      workerFunction += '        workerCode += "}\\n\\n";\n';
      workerFunction += "        \n";
      workerFunction += "        if (gltfLoaderCode) {\n";
      workerFunction += '            workerCode += "// GLTF Loader\\n";\n';
      workerFunction += "            workerCode += gltfLoaderCode;\n";
      workerFunction += '            workerCode += "\\n";\n';
      workerFunction += '            workerCode += "if (typeof GLTFLoader !== \\"undefined\\" && typeof THREE !== \\"undefined\\") {\\n";\n';
      workerFunction += '            workerCode += "    THREE.GLTFLoader = GLTFLoader;\\n";\n';
      workerFunction += '            workerCode += "}\\n";\n';
      workerFunction += '            workerCode += "console.log(\\"[Z3D Object Worker] \u2705 GLTF Loader loaded\\");\\n\\n";\n';
      workerFunction += "        }\n";
      workerFunction += "        \n";
      workerFunction += "        if (orbitControlsCode) {\n";
      workerFunction += '            workerCode += "// OrbitControls\\n";\n';
      workerFunction += "            workerCode += orbitControlsCode;\n";
      workerFunction += '            workerCode += "\\n";\n';
      workerFunction += '            workerCode += "console.log(\\"[Z3D Object Worker] \u2705 OrbitControls loaded\\");\\n\\n";\n';
      workerFunction += "        }\n";
      workerFunction += "    } else {\n";
      workerFunction += '        workerCode += "console.warn(\\"[Z3D Object Worker] No Three.js source - worker will run in basic mode\\");\\n";\n';
      workerFunction += "    }\n";
      workerFunction += "    \n";
      workerFunction += "    // Add Scene Data Collector (embedded to avoid importScripts issues)\n";
      workerFunction += "    if (" + JSON.stringify(!!this._assets.scripts.workers.sceneDataCollector) + ") {\n";
      workerFunction += '        workerCode += "\\n// ============================================\\n";\n';
      workerFunction += '        workerCode += "// SCENE DATA COLLECTOR (Embedded)\\n";\n';
      workerFunction += '        workerCode += "// ============================================\\n\\n";\n';
      workerFunction += "        workerCode += " + JSON.stringify(this._assets.scripts.workers.sceneDataCollector || "") + ";\n";
      workerFunction += '        workerCode += "\\n\\n";\n';
      workerFunction += "    }\n";
      workerFunction += "    \n";
      workerFunction += "    // Add Viewport Gizmo (embedded)\n";
      workerFunction += "    if (" + JSON.stringify(!!this._assets.scripts.workers.viewportGizmo) + ") {\n";
      workerFunction += '        workerCode += "\\n// ============================================\\n";\n';
      workerFunction += '        workerCode += "// VIEWPORT GIZMO (Embedded)\\n";\n';
      workerFunction += '        workerCode += "// ============================================\\n\\n";\n';
      workerFunction += "        workerCode += " + JSON.stringify(this._assets.scripts.workers.viewportGizmo || "") + ";\n";
      workerFunction += '        workerCode += "\\n\\n";\n';
      workerFunction += "    }\n";
      workerFunction += "    \n";
      workerFunction += "    // Add Transform Gizmo (embedded)\n";
      workerFunction += "    if (" + JSON.stringify(!!this._assets.scripts.workers.transformGizmo) + ") {\n";
      workerFunction += '        workerCode += "\\n// ============================================\\n";\n';
      workerFunction += '        workerCode += "// TRANSFORM GIZMO (Embedded)\\n";\n';
      workerFunction += '        workerCode += "// ============================================\\n\\n";\n';
      workerFunction += "        workerCode += " + JSON.stringify(this._assets.scripts.workers.transformGizmo || "") + ";\n";
      workerFunction += '        workerCode += "\\n\\n";\n';
      workerFunction += "    }\n";
      workerFunction += "    \n";
      workerFunction += "    // Add the main worker functionality\n";
      workerFunction += '    workerCode += "\\n// ============================================\\n";\n';
      workerFunction += '    workerCode += "// MAIN WORKER LOGIC\\n";\n';
      workerFunction += '    workerCode += "// ============================================\\n\\n";\n';
      workerFunction += "    workerCode += " + JSON.stringify(this._getFullWorkerLogic()) + ";\n";
      const nodeTreeAppend = `
        ; (function(){
        let __nodeTreeSent = false;
        function __safeUserData(obj){ try { return JSON.parse(JSON.stringify(obj||{})); } catch(e){ return {}; } }
        function __serializeNode(n){ var out={ id:n.uuid, name:n.name||"", type:n.type||"", userData:__safeUserData(n.userData), children:[] }; if(n.children&&n.children.length){ for(var i=0;i<n.children.length;i++){ out.children.push(__serializeNode(n.children[i])); } } return out; }
        function __getTreeRoot(){ try { if (typeof currentModel==="undefined"||!currentModel) return null; var root=currentModel; if(root.name==="ModelWrapper" && root.children && root.children.length===1){ root=root.children[0]; } return root; } catch(e){ return null; } }
        function __sendTreeOnce(){ if(__nodeTreeSent) return; var root=__getTreeRoot(); if(root){ try { var tree=__serializeNode(root); self.postMessage({ type:"MODEL_NODE_TREE", data:{ nodeTree: tree } }); __nodeTreeSent=true; } catch(e){} } }
        try { __sendTreeOnce(); } catch(e){}
        var __tries=0, __max=200; var __timer=setInterval(function(){ __sendTreeOnce(); __tries++; if(__nodeTreeSent||__tries>__max) clearInterval(__timer); }, 50);
        })();
        `;
      workerFunction += "    workerCode += " + JSON.stringify(nodeTreeAppend) + ";\n";
      workerFunction += "    \n";
      workerFunction += '    console.log("[Z3D Object Editor] \u2705 Worker code generated (" + Math.round(workerCode.length / 1024) + "KB)");\n';
      workerFunction += "    return workerCode;\n";
      workerFunction += "}";
      return workerFunction;
    }
    // ✅ NEW: Get the full worker logic from embedded assets
    _getFullWorkerLogic() {
      if (this._assets.scripts.workers.threeWorker) {
        console.log("[Z3DObjectEditor] Using embedded three-worker.js");
        let workerCode = this._assets.scripts.workers.threeWorker;
        workerCode = workerCode.replace(
          /^.*importScripts\(['"]\.\/scene-data-collector\.js['"]\);.*$/gm,
          "// Scene data collector has been embedded above"
        );
        return workerCode;
      }
      console.warn("[Z3DObjectEditor] No embedded worker script found, using basic fallback");
      return this._getWorkerCoreLogic();
    }
    _buildHTMLWithScripts(options) {
      const scriptTags = options.scriptUrls.map(
        (url) => `    <script src="${url}"><\/script>`
      ).join("\n");
      let html = this._assets.html.main;
      html = html.replace("{{TITLE}}", options.title);
      html = html.replace("{{STYLES}}", options.styles);
      const configElements = `
    <!-- Hidden Config Data -->
    <div id="z3d-object-editor-config" style="display: none;">${options.config}</div>
    <script type="application/json" id="build-config">${options.config}<\/script>
    <script type="application/json" id="editor-config">${options.editorConfig}<\/script>`;
      if (html.includes("{{CONFIG}}")) {
        html = html.replace("{{CONFIG}}", options.config);
      }
      html = html.replace("</body>", configElements + "\n" + scriptTags + "\n</body>");
      return html;
    }
    _getWorkerCoreLogic() {
      return `
// Basic worker logic
let scene = null;
let camera = null;
let renderer = null;

self.addEventListener('message', function(event) {
    const { type, data } = event.data;
    console.log('[Z3D Object Worker] Message:', type);
    
    try {
        switch (type) {
            case 'SETUP_CANVAS':
                setupCanvas(data);
                break;
            case 'LOAD_MODEL':
                loadModel(data);
                break;
            case 'PING':
                self.postMessage({ type: 'WORKER_READY' });
                break;
        }
    } catch (error) {
        console.error('[Z3D Object Worker] Error:', error);
        self.postMessage({ type: 'ERROR', data: { error: error.message } });
    }
});

function setupCanvas(data) {
    console.log('[Z3D Object Worker] Setting up canvas...');
    self.postMessage({ type: 'CANVAS_READY' });
}

function loadModel(data) {
    console.log('[Z3D Object Worker] Loading model (basic mode)...');
    self.postMessage({ type: 'MODEL_LOADED', data: { success: true } });
}

console.log('[Z3D Object Worker] \u2705 Worker ready');
self.postMessage({ type: 'WORKER_READY' });
`;
    }
    /**
     * Log asset statistics for debugging
     */
    _logAssetStats() {
      const stats = {
        html: Object.keys(this._assets.html).length,
        styles: Object.keys(this._assets.styles).length,
        coreScripts: Object.keys(this._assets.scripts.core).length,
        componentScripts: Object.keys(this._assets.scripts.components).length,
        workerScripts: Object.keys(this._assets.scripts.workers).length,
        utilScripts: this._assets.scripts.utils ? Object.keys(this._assets.scripts.utils).length : 0,
        hasMainInit: !!this._assets.scripts.mainInitialization,
        config: Object.keys(this._assets.config).length
      };
      console.log("[Z3DObjectEditor] Asset statistics:", stats);
      console.log("[Z3DObjectEditor] Core scripts:", Object.keys(this._assets.scripts.core));
      console.log("[Z3DObjectEditor] Component scripts:", Object.keys(this._assets.scripts.components));
      if (this._assets.scripts.utils) {
        console.log("[Z3DObjectEditor] Utility scripts:", Object.keys(this._assets.scripts.utils));
      }
    }
    /**
     * Get template assets (for debugging)
     */
    getAssets() {
      return this._assets;
    }
    /**
     * Validate that all required assets are present
     */
    validateAssets() {
      const required = [
        "html.main",
        "styles.base",
        "styles.components",
        "styles.layout",
        "scripts.core.eventEmitter",
        "scripts.core.uiManager",
        "scripts.components.objectControls",
        "scripts.components.resizer",
        "config.editorConfig",
        "scripts.components.animationControls",
        "scripts.components.textureControls",
        "scripts.components.viewerManager",
        "scripts.components.outlinerControls",
        "styles.animation",
        "styles.texture"
      ];
      for (const path of required) {
        const keys = path.split(".");
        let current = this._assets;
        for (const key of keys) {
          current = current?.[key];
          if (!current) {
            console.error(`[Z3DObjectEditor] Missing required asset: ${path}`);
            return false;
          }
        }
      }
      return true;
    }
  };

  // packages/z3d-object/src/editor/editor-window.ts
  var EditorWindow = class {
    constructor(objectEditor) {
      this._window = null;
      this._isOpening = false;
      this._isReady = false;
      this._modelDataSent = false;
      this._messageHandler = null;
      this._windowCheckInterval = null;
      this._objectEditor = objectEditor;
    }
    async open(options = {}) {
      if (this._isOpening) {
        console.log("[EditorWindow] Already opening");
        return false;
      }
      if (this.isOpen()) {
        console.log("[EditorWindow] Already open");
        if (options.focus !== false)
          this.focus();
        return true;
      }
      try {
        this._isOpening = true;
        this._isReady = false;
        this._modelDataSent = false;
        const template = await this._buildEditorTemplate(options);
        const success = await this._createEditorWindow(template, options);
        if (success) {
          this._setupCommunication();
          this._startWindowMonitoring();
          console.log("[EditorWindow] \u2705 Editor opened");
          return true;
        }
        throw new Error("Failed to create editor window");
      } catch (error) {
        console.error("[EditorWindow] Failed to open:", error);
        this._cleanup();
        return false;
      } finally {
        this._isOpening = false;
      }
    }
    close() {
      if (this._window && !this._window.closed) {
        try {
          this._window.close();
        } catch (e) {
          console.error("[EditorWindow] Error closing:", e);
        }
      }
      this._cleanup();
    }
    isOpen() {
      return this._window !== null && !this._window.closed;
    }
    focus() {
      if (this._window && !this._window.closed) {
        try {
          this._window.focus();
        } catch {
        }
      }
    }
    sendMessage(message, transferable) {
      if (!this._window || this._window.closed)
        return;
      try {
        this._window.postMessage(message, "*", transferable);
      } catch (error) {
        console.error("[EditorWindow] Error sending message:", error);
      }
    }
    dispose() {
      this.close();
    }
    async _buildEditorTemplate(options) {
      const templateBuilder = new TemplateBuilder();
      const propertyAdapter = this._objectEditor.getPropertyAdapter();
      const initialState = propertyAdapter.getState();
      const host = this._objectEditor.getHost();
      const buildData = {
        instanceId: host?.inst?.GetUID?.() || 0,
        modelPath: initialState.modelPath || "",
        initialState,
        debugMode: false
      };
      return await templateBuilder.build(buildData);
    }
    async _createEditorWindow(template, options) {
      const blob = new Blob([template], { type: "text/html" });
      const blobUrl = URL.createObjectURL(blob);
      const features = this._calculateWindowFeatures(options);
      const host = this._objectEditor.getHost();
      const uid = host?.inst?.GetUID?.() || 0;
      this._window = window.open(blobUrl, `z3d-object-editor-${uid}`, features);
      if (!this._window) {
        URL.revokeObjectURL(blobUrl);
        return false;
      }
      setTimeout(() => URL.revokeObjectURL(blobUrl), 1e4);
      await this._waitForWindowLoad();
      return true;
    }
    async _waitForWindowLoad() {
      return new Promise((resolve, reject) => {
        if (!this._window) {
          reject(new Error("No window to wait for"));
          return;
        }
        const timeout = setTimeout(() => reject(new Error("Window load timeout")), 15e3);
        const checkReady = () => {
          if (!this._window || this._window.closed) {
            clearTimeout(timeout);
            reject(new Error("Window closed during load"));
            return;
          }
          try {
            if (this._window.document?.readyState === "complete") {
              clearTimeout(timeout);
              resolve();
              return;
            }
          } catch {
          }
          setTimeout(checkReady, 100);
        };
        checkReady();
      });
    }
    _setupCommunication() {
      if (this._messageHandler) {
        window.removeEventListener("message", this._messageHandler);
      }
      this._messageHandler = (event) => {
        if (!this._window || event.source !== this._window)
          return;
        this._handleMessage(event.data);
      };
      window.addEventListener("message", this._messageHandler);
    }
    _handleMessage(message) {
      if (!message.type)
        return;
      switch (message.type) {
        case "EDITOR_READY":
          this._isReady = true;
          console.log("[EditorWindow] Editor ready");
          break;
        case "INITIALIZATION_COMPLETE":
          console.log("[EditorWindow] Editor initialization complete");
          this._objectEditor.markInitializationComplete();
          break;
        case "TRANSFORMS_UPDATE":
          this._objectEditor.handlePropertyUpdate(message.data);
          break;
        case "REQUEST_MODEL_DATA":
          if (!this._modelDataSent) {
            this._modelDataSent = true;
            this._handleModelDataRequest(message.data);
          }
          break;
        case "ANIMATION_STATE_CHANGE":
          console.log("[EditorWindow] Animation state change:", message.data);
          this._objectEditor.handleAnimationStateChange(message.data);
          break;
        case "NODE_VISIBILITY_CHANGE":
          console.log("[EditorWindow] Node visibility change:", message.data);
          this._objectEditor.handleNodeVisibilityChange(message.data);
          break;
        case "SKINNED_MESH_UPDATE":
          console.log("[EditorWindow] Skinned mesh update, vertices:", message.data?.vertices?.length);
          this._objectEditor.handleSkinnedMeshUpdate(message.data);
          break;
        default:
          console.log("[EditorWindow] Unhandled message type:", message.type);
          break;
      }
    }
    async _handleModelDataRequest(data) {
      const propertyAdapter = this._objectEditor.getPropertyAdapter();
      const modelPath = data?.modelPath || propertyAdapter.getValue("modelPath");
      if (!modelPath) {
        this.sendMessage({
          type: "MODEL_DATA_RESPONSE",
          data: { success: false, error: "No model path specified" }
        });
        return;
      }
      try {
        const host = this._objectEditor.getHost();
        const modelData = await host.getProjectFile(modelPath);
        const z3dConfig = propertyAdapter.getZ3DConfig();
        const animationState = z3dConfig?.animation || null;
        this.sendMessage({
          type: "MODEL_DATA_RESPONSE",
          data: {
            modelPath,
            modelData,
            animationState,
            // Include animation state for restoration
            success: true
          }
        }, modelData ? [modelData] : void 0);
      } catch (error) {
        this.sendMessage({
          type: "MODEL_DATA_RESPONSE",
          data: {
            modelPath,
            success: false,
            error: error instanceof Error ? error.message : "Unknown error"
          }
        });
      }
    }
    _startWindowMonitoring() {
      if (this._windowCheckInterval) {
        clearInterval(this._windowCheckInterval);
      }
      let lastCheckFailed = false;
      const host = this._objectEditor.getHost();
      const originalUID = host?.inst?.GetUID?.() || 0;
      this._windowCheckInterval = window.setInterval(() => {
        if (!this._window || this._window.closed) {
          console.log("[EditorWindow] Window was closed");
          this._cleanup();
          return;
        }
        try {
          const currentHost = this._objectEditor.getHost();
          const project = currentHost?.inst?.GetProject?.();
          if (!project) {
            if (!lastCheckFailed) {
              console.log("[EditorWindow] Project not accessible, will close if next check fails");
              lastCheckFailed = true;
            } else {
              console.log("[EditorWindow] Project still not accessible, closing editor");
              this.close();
            }
            return;
          }
          const objectType = currentHost?.inst?.GetObjectType?.();
          if (objectType) {
            const allInstances = objectType.GetAllInstances?.();
            if (allInstances) {
              const stillExists = allInstances.some((inst) => {
                try {
                  return inst.GetUID() === originalUID;
                } catch {
                  return false;
                }
              });
              if (!stillExists) {
                console.log(`[EditorWindow] Instance ${originalUID} not found in object type instances, closing editor`);
                this.close();
                return;
              }
            }
          }
          const testAccess = currentHost?.getPropertyValue?.(
            currentHost.propertyMapping.modelPath || "model-path"
          );
          lastCheckFailed = false;
        } catch (e) {
          if (!lastCheckFailed) {
            console.log("[EditorWindow] Cannot access instance, will close if next check fails");
            lastCheckFailed = true;
          } else {
            console.log("[EditorWindow] Instance still not accessible, closing editor");
            this.close();
          }
        }
      }, 200);
    }
    _calculateWindowFeatures(options) {
      const features = [
        "width=1400",
        "height=900",
        "scrollbars=yes",
        "resizable=yes",
        "menubar=no",
        "toolbar=no",
        "location=no",
        "status=no"
      ];
      if (options.centerOnScreen) {
        const left = Math.max(0, (window.screen.availWidth - 1400) / 2);
        const top = Math.max(0, (window.screen.availHeight - 900) / 2);
        features.push(`left=${left}`, `top=${top}`);
      }
      return features.join(",");
    }
    _cleanup() {
      if (this._windowCheckInterval) {
        clearInterval(this._windowCheckInterval);
        this._windowCheckInterval = null;
      }
      if (this._messageHandler) {
        window.removeEventListener("message", this._messageHandler);
        this._messageHandler = null;
      }
      this._window = null;
      this._isReady = false;
      this._isOpening = false;
      this._modelDataSent = false;
      this._objectEditor.onWindowClosed();
    }
  };

  // packages/z3d-object/src/editor/index.ts
  var Z3DObjectEditor = class {
    constructor(host) {
      this._isOpen = false;
      // Property sync state
      this._syncTimer = null;
      this._syncInterval = 25;
      this._isActive = false;
      this._lastSyncHash = "";
      this._recentEditorUpdate = false;
      this._editorUpdateTimeout = null;
      this._isInitializing = true;
      this.host = host;
      this.propertyAdapter = new PropertyAdapter(host);
      this.editorWindow = new EditorWindow(this);
    }
    async openEditor(options = {}) {
      if (this._isOpen) {
        console.log("[Z3DObjectEditor] Editor already open");
        this.editorWindow.focus();
        return true;
      }
      try {
        const success = await this.editorWindow.open(options);
        if (success) {
          this._isOpen = true;
          this._isInitializing = true;
          setTimeout(() => {
            this.sendInitialState();
            this._startPropertySync();
          }, 100);
        }
        return success;
      } catch (error) {
        console.error("[Z3DObjectEditor] Failed to open editor:", error);
        return false;
      }
    }
    closeEditor() {
      if (!this._isOpen)
        return;
      this._stopPropertySync();
      this.editorWindow.close();
      this._isOpen = false;
    }
    isOpen() {
      return this._isOpen && this.editorWindow.isOpen();
    }
    focus() {
      if (this._isOpen) {
        this.editorWindow.focus();
      }
    }
    sendInitialState() {
      const state = this.propertyAdapter.getState();
      console.log("[Z3DObjectEditor] Sending initial state:", state);
      this.editorWindow.sendMessage({
        type: "INITIAL_STATE",
        data: state
      });
      this._lastSyncHash = JSON.stringify(state);
    }
    handlePropertyUpdate(data) {
      this._recentEditorUpdate = true;
      if (this._editorUpdateTimeout) {
        clearTimeout(this._editorUpdateTimeout);
      }
      this._editorUpdateTimeout = window.setTimeout(() => {
        this._recentEditorUpdate = false;
      }, 200);
      this.propertyAdapter.applyState(data);
      const currentState = this.propertyAdapter.getState();
      this._lastSyncHash = JSON.stringify(currentState);
      if (this.host.onPropertiesChanged) {
        this.host.onPropertiesChanged();
      }
    }
    handleAnimationStateChange(data) {
      console.log("[Z3DObjectEditor] Handling animation state change:", data);
      this.propertyAdapter.updateAnimationState(data);
      if (this.host.onPropertiesChanged) {
        this.host.onPropertiesChanged();
      }
    }
    handleNodeVisibilityChange(data) {
      console.log("[Z3DObjectEditor] Handling node visibility change:", data);
      if (data.nodeVisibility && typeof data.nodeVisibility === "object") {
        Object.entries(data.nodeVisibility).forEach(([nodeName, visible]) => {
          this.propertyAdapter.updateNodeVisibility(nodeName, visible);
        });
        if (this.host.onPropertiesChanged) {
          this.host.onPropertiesChanged();
        }
      } else if (data.nodeName && data.visible !== void 0) {
        this.propertyAdapter.updateNodeVisibility(data.nodeName, data.visible);
        if (this.host.onPropertiesChanged) {
          this.host.onPropertiesChanged();
        }
      }
    }
    handleSkinnedMeshUpdate(data) {
      console.log("[Z3DObjectEditor] Handling skinned mesh update");
      this.propertyAdapter.updateSkinnedMesh(data);
      if (this.host.onPropertiesChanged) {
        this.host.onPropertiesChanged();
      }
    }
    updateState() {
      if (!this._isOpen || this._isInitializing || this._recentEditorUpdate)
        return;
      const state = this.propertyAdapter.getState();
      const stateHash = JSON.stringify(state);
      if (stateHash !== this._lastSyncHash) {
        this._lastSyncHash = stateHash;
        console.log("[Z3DObjectEditor] Sending state update to editor");
        this.editorWindow.sendMessage({
          type: "STATE_UPDATE",
          data: state
        });
      }
    }
    _startPropertySync() {
      if (this._isActive)
        return;
      this._isActive = true;
      this._syncTimer = window.setInterval(() => {
        this._performSync();
      }, this._syncInterval);
      console.log("[Z3DObjectEditor] Property sync started");
    }
    _stopPropertySync() {
      this._isActive = false;
      if (this._syncTimer) {
        clearInterval(this._syncTimer);
        this._syncTimer = null;
      }
      if (this._editorUpdateTimeout) {
        clearTimeout(this._editorUpdateTimeout);
        this._editorUpdateTimeout = null;
      }
      console.log("[Z3DObjectEditor] Property sync stopped");
    }
    _performSync() {
      if (this._isInitializing || this._recentEditorUpdate || !this._isOpen)
        return;
      this.updateState();
    }
    markInitializationComplete() {
      this._isInitializing = false;
      this._recentEditorUpdate = false;
      this._lastSyncHash = "";
      console.log("[Z3DObjectEditor] Initialization complete, sync enabled");
    }
    onWindowClosed() {
      console.log("[Z3DObjectEditor] Editor window was closed");
      this._isOpen = false;
      this._stopPropertySync();
    }
    getHost() {
      return this.host;
    }
    getPropertyAdapter() {
      return this.propertyAdapter;
    }
    forceSync() {
      if (this._isInitializing)
        return;
      this._recentEditorUpdate = false;
      this.updateState();
    }
    dispose() {
      this._stopPropertySync();
      this.closeEditor();
      this.editorWindow.dispose();
    }
  };
  var editor_default = Z3DObjectEditor;
  return __toCommonJS(editor_exports);
})();
console.log('[Z3DPortable] Script completed, Z3DPortable set to:', Z3DPortable);
console.log('[Z3DPortable] Z3DPortable keys:', Z3DPortable ? Object.keys(Z3DPortable) : 'null');
globalThis.Z3DPortable = Z3DPortable;
console.log('[Z3DPortable] Set on globalThis');
//# sourceMappingURL=z3d-portable-editor.js.map
